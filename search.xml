<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PostgreSQL安装部署</title>
    <url>/blog/2020/03/11/postgresql/</url>
    <content><![CDATA[<h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>操作系统：CentOS Linux release 7.7.1908 (Core)</p>
</li>
<li><p>安装版本：<a href="https://www.postgresql.org/" target="_blank" rel="noopener">PostgreSQL</a> 9.6</p>
</li>
<li><p>安装方式：<code>yum</code> 安装</p>
</li>
</ul>
<h4 id="一、检查PostgreSQL-是否已经安装"><a href="#一、检查PostgreSQL-是否已经安装" class="headerlink" title="一、检查PostgreSQL 是否已经安装"></a>一、检查PostgreSQL 是否已经安装</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询是否安装</span></span><br><span class="line"><span class="string">rpm</span> <span class="bullet">-qa|grep</span> <span class="string">postgre</span></span><br><span class="line"><span class="comment">#查询包中文件安装的位置</span></span><br><span class="line"><span class="string">rpm</span> <span class="bullet">-qal|grep</span> <span class="string">postgre</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载已安装包</span></span><br><span class="line"><span class="string">rpm</span> <span class="bullet">-e</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/qiyebao/p/4343182.html" target="_blank" rel="noopener">linux-软件包管理-rpm命令管理-查询</a></p>
<h4 id="二、创建用户和用户组"><a href="#二、创建用户和用户组" class="headerlink" title="二、创建用户和用户组"></a>二、创建用户和用户组</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增postgres用户组</span></span><br><span class="line"><span class="string">groupadd</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增postgres用户属于postgres用户组</span></span><br><span class="line"><span class="string">useradd</span> <span class="bullet">-g</span> <span class="string">postgres</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>

<h4 id="三、下载安装"><a href="#三、下载安装" class="headerlink" title="三、下载安装"></a>三、下载安装</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建PostgreSQL9.6的yum源文件</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="attr">https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装客户端</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">postgresql96</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#安装服务端</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">postgresql96-server</span></span><br></pre></td></tr></table></figure>

<h4 id="四、初始化-amp-启动"><a href="#四、初始化-amp-启动" class="headerlink" title="四、初始化&amp;启动"></a>四、初始化&amp;启动</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化数据库</span></span><br><span class="line"><span class="string">/usr/pgsql-9.6/bin/postgresql96-setup</span> <span class="string">initdb</span>  <span class="comment"># /usr/pgsql-9.6/bin/initdb -D /data/postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动postgresql服务，并设置为开机自动启动</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">postgresql-9.6</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">postgresql-9.6</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">status</span> <span class="string">postgresql-9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看监听端口</span></span><br><span class="line"><span class="string">netstat</span> <span class="bullet">-nat</span></span><br></pre></td></tr></table></figure>

<h4 id="五、修改数据目录"><a href="#五、修改数据目录" class="headerlink" title="五、修改数据目录"></a>五、修改数据目录</h4><p>默认目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/lib/pgsql/9.6/data/</span><br></pre></td></tr></table></figure>

<p>修改数据目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭服务</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">stop</span> <span class="string">postgresql-9.6</span></span><br><span class="line"><span class="comment">#创建目录，并给目录授权</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">/data/postgresql</span></span><br><span class="line"><span class="string">chown</span> <span class="bullet">-R</span> <span class="attr">postgres:postgres</span> <span class="string">postgresql</span></span><br><span class="line"><span class="string">chmod</span> <span class="number">700</span> <span class="string">/data/postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改systemctl启动文件</span></span><br><span class="line"><span class="string">vi</span> <span class="string">/usr/lib/systemd/system/postgresql-9.6.service</span>   <span class="comment"># Environment=PGDATA= /data/postgresql/</span></span><br><span class="line"><span class="comment"># 重新加载配置文件使其生效</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换至postgres用户指定目录初始化数据</span></span><br><span class="line"><span class="string">su</span> <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line"><span class="string">/usr/pgsql-9.6/bin/initdb</span> <span class="bullet">-D</span> <span class="string">/data/postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#root用户下</span></span><br><span class="line"><span class="string">vi</span> <span class="string">/data/postgresql/postgresql.conf</span>  <span class="comment"># data_directory = '/data/postgresql'</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">restart</span> <span class="string">postgresql-9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前数据目录位置</span></span><br><span class="line"><span class="string">$</span> <span class="string">su</span> <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">-</span><span class="string">bash-4.2$</span> <span class="string">psql</span></span><br><span class="line"><span class="string">postgres=#</span> <span class="string">show</span> <span class="string">data_directory;</span></span><br><span class="line">  <span class="string">data_directory</span>  </span><br><span class="line"><span class="bullet">-</span><span class="bullet">-----------------</span></span><br><span class="line"> <span class="string">/data/postgresql</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#后台登录</span></span><br><span class="line"><span class="string">$</span> <span class="string">su</span> <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">-</span><span class="string">bash-4.2$</span> <span class="string">psql</span></span><br><span class="line"><span class="string">psql</span> <span class="string">(9.6.17)</span></span><br><span class="line"><span class="string">postgres=#</span> <span class="string">select</span> <span class="string">version();</span></span><br><span class="line">                                                  <span class="string">version</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> <span class="string">PostgreSQL</span> <span class="number">9.6</span><span class="number">.17</span> <span class="string">on</span> <span class="string">x86_64-pc-linux-gnu,</span> <span class="string">compiled</span> <span class="string">by</span> <span class="string">gcc</span> <span class="string">(GCC)</span> <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> <span class="string">(Red</span> <span class="string">Hat</span> <span class="number">4.8</span><span class="number">.5</span><span class="bullet">-39</span><span class="string">),</span> <span class="number">64</span><span class="bullet">-bit</span></span><br><span class="line"><span class="string">(1</span> <span class="string">row)</span></span><br></pre></td></tr></table></figure>

<h4 id="六、配置远程连接"><a href="#六、配置远程连接" class="headerlink" title="六、配置远程连接"></a>六、配置远程连接</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置Navicate可登录 &lt;postgres/Haier@123&gt;，本地后台登录不需要密码</span></span><br><span class="line"><span class="comment"># pg_hba.conf：配置对数据库的访问权限</span></span><br><span class="line"><span class="comment"># postgresql.conf：配置PostgreSQL数据库服务器的相应的参数</span></span><br><span class="line"><span class="string">vi</span> <span class="string">/data/postgresql/postgresql.conf</span>  <span class="comment"># listen_addresses = '*'</span></span><br><span class="line"><span class="string">vi</span> <span class="string">/data/postgresql/pg_hba.conf</span>  <span class="comment"># 文件末尾添加 host  all  all  0.0.0.0/0  trust</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙5432端口</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="bullet">--zone=public</span> <span class="bullet">--add-port=5432/tcp</span> <span class="bullet">--permanent</span> <span class="comment"># 永久生效再加上 permanent </span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="bullet">--reload</span>                                      <span class="comment"># 更新防火墙规则</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="bullet">--zone=public</span> <span class="bullet">--list-ports</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改登录密码</span></span><br><span class="line"><span class="string">sudo</span> <span class="bullet">-u</span> <span class="string">postgres</span> <span class="string">psql</span></span><br><span class="line"><span class="string">ALTER</span> <span class="string">USER</span> <span class="string">postgres</span> <span class="string">WITH</span> <span class="string">password</span> <span class="string">'Haier@123'</span><span class="string">;</span></span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>采用 <code>yum</code> 方式安装</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum 删除软件包</span></span><br><span class="line"><span class="string">yum</span> <span class="string">remove</span> <span class="string">postgresql*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除相关目录文件：</span></span><br><span class="line"><span class="comment">#删除数据目录</span></span><br><span class="line"><span class="string">rm</span> <span class="bullet">-rf</span>  <span class="string">/var/lib/pgsql</span>       <span class="comment">#默认数据目录</span></span><br><span class="line"><span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">/data/postgresql/</span>     <span class="comment">#修改后的数据目录</span></span><br><span class="line"><span class="comment">#删除安装目录</span></span><br><span class="line"><span class="string">rm</span> <span class="bullet">-rf</span>  <span class="string">/usr/pgsql*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除pg相关用户组/用户</span></span><br><span class="line"><span class="string">userdel</span> <span class="bullet">-r</span> <span class="string">postgres</span></span><br><span class="line"><span class="string">groupdel</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>

<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="客户端登录"><a href="#客户端登录" class="headerlink" title="客户端登录"></a>客户端登录</h4><ul>
<li>安装 <a href="https://www.navicat.com.cn/products/navicat-premium" target="_blank" rel="noopener">Navicate</a></li>
<li>登录数据库<ul>
<li>主机：10.133.0.52</li>
<li>端口：5432</li>
<li>数据库：postgres</li>
<li>用户名：postgres</li>
<li>密码：Haier@123</li>
</ul>
</li>
</ul>
<h4 id="服务器远程登录"><a href="#服务器远程登录" class="headerlink" title="服务器远程登录"></a>服务器远程登录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">psql -h 47.104.161.59 -U postgres -d Haier@123 -p 5432</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>积分中心迁移上云</title>
    <url>/blog/2020/03/05/Integration-Center-to-cloud/</url>
    <content><![CDATA[<p>准备工作</p>
<table>
<thead>
<tr>
<th>项目信息</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>项目名称</td>
<td></td>
</tr>
<tr>
<td>机房位置</td>
<td></td>
</tr>
<tr>
<td>本地数据库</td>
<td></td>
</tr>
<tr>
<td>数据量</td>
<td></td>
</tr>
<tr>
<td>版本</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>堡垒机登录</title>
    <url>/blog/2020/02/28/jumper/</url>
    <content><![CDATA[<p><strong>阿里云 ECS 服务器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 登陆账户：工号 + 密码</span><br><span class="line"># 内网登录</span><br><span class="line">ssh -p 60022 01510886@10.163.193.54</span><br><span class="line"></span><br><span class="line"># 公网登陆</span><br><span class="line">ssh -p 60022 01510886@47.104.192.254</span><br></pre></td></tr></table></figure>

<p><strong>本地 IDC 服务器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -p 2222 01510886@10.138.16.192</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL · 海贝商城迁移上云</title>
    <url>/blog/2020/02/28/mysql-migration-to-cloud/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><table>
<thead>
<tr>
<th>本地数据库</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>项目名称</td>
<td>海贝积分商城</td>
</tr>
<tr>
<td>机房位置</td>
<td>北京亦庄机房</td>
</tr>
<tr>
<td>本地数据库</td>
<td>10.159.33.219</td>
</tr>
<tr>
<td>主从</td>
<td>从库</td>
</tr>
<tr>
<td>数据量</td>
<td>127 GB</td>
</tr>
<tr>
<td>版本</td>
<td>MariaDB 10.1.18</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>阿里云ECS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>主机</td>
<td>10.162.177.68</td>
</tr>
<tr>
<td>自建MySQL</td>
<td>MariaDB 10.1.19</td>
</tr>
<tr>
<td>用户名</td>
<td>root</td>
</tr>
<tr>
<td>密码</td>
<td>74kv6PQF$wVtlkU^</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>阿里云RDS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>测试实例</td>
<td>rm-2zey293xldeni7k48.mysql.rds.aliyuncs.com</td>
</tr>
<tr>
<td>版本</td>
<td>MySQL 5.6</td>
</tr>
<tr>
<td>生产实例</td>
<td>rm-2zem962y8x2rlm74v.mysql.rds.aliyuncs.com</td>
</tr>
<tr>
<td>版本</td>
<td>MySQL 5.6</td>
</tr>
<tr>
<td>用户名</td>
<td>haibei</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：</span><br><span class="line">1、无ECS登录权限，找云管理王伟成添加堡垒机权限</span><br></pre></td></tr></table></figure>

<h3 id="迁移方案"><a href="#迁移方案" class="headerlink" title="迁移方案"></a>迁移方案</h3><p>本地 <code>IDC</code> 数据库  -&gt;   <code>ECS</code> 自建数据库 -&gt;阿里云 <code>RDS</code></p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><table>
<thead>
<tr>
<th>步骤</th>
<th>耗时</th>
</tr>
</thead>
<tbody><tr>
<td>全备</td>
<td>——</td>
</tr>
<tr>
<td>传输</td>
<td>——</td>
</tr>
<tr>
<td>恢复</td>
<td>——</td>
</tr>
<tr>
<td>DTS迁移</td>
<td>2 h 15 min</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/blog/2020/02/19/mybatis/</url>
    <content><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1什么是Mybatis"><a href="#1-1什么是Mybatis" class="headerlink" title="1.1什么是Mybatis"></a>1.1什么是Mybatis</h3><ul>
<li><code>MyBatis</code> 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化<code>SQL</code>、存储过程以及高级映射</li>
<li><code>MyBatis</code> 避免了几乎所有的 <code>JDBC</code> 代码和手动设置参数以及获取结果集。</li>
<li><code>MyBatis</code>  可以使用简单的  <code>XML</code>  或注解来配置和映射原生类型、接口和  <code>Java</code> 的 <code>POJO</code>（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li><code>MyBatis</code> 本是 <code>apache</code> 的一个开源项目 <code>iBatis</code>，2010年这个项目由 <code>apache software foundation</code> 迁移到了<code>Google code</code> 并改名为 <code>MyBatis</code></li>
<li>2013年11月迁移到 <code>Github</code>。</li>
</ul>
<p>如何获得 <code>Mybatis</code>？</p>
<ul>
<li><code>maven</code> 仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Github</code> ：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></li>
<li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>瞬时状态：内存：<strong>断电即失</strong></li>
<li>持久状态：数据库(jdbc) ，io文件持久化</li>
</ul>
<p><strong>为什么需要持久化？</strong></p>
<ul>
<li><p>有一些对象， 不能让他丢掉。</p>
</li>
<li><p>内存太贵了</p>
</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层、Service层、Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="1-4、为什么需要Mybatis？"><a href="#1-4、为什么需要Mybatis？" class="headerlink" title="1.4、为什么需要Mybatis？"></a>1.4、为什么需要Mybatis？</h3><ul>
<li><p>帮助程序员将数据存入到数据库中。</p>
</li>
<li><p>传统的JDBC代码太复杂了，为了简化因此出现了框架。自动化。</p>
</li>
<li><p>不用Mybatis也可以，但是由Mybatis更容易上手。</p>
</li>
<li><p>优点：</p>
<ul>
<li>简单易学、灵活，使用的人多。</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql</li>
</ul>
<p>后续学习：<code>Spring</code>、 <code>SpringMVC</code> 、<code>SpringBoot</code></p>
</li>
</ul>
<h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p>
<p>2.1、搭建数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `Mybatis`;</span><br><span class="line">USE `Mybatis`</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">	`id` INT(<span class="number">20</span>) NOT NULL PRIMARY key,</span><br><span class="line">	`name` VARCHAR(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">	`pwd` VARCHAR(<span class="number">30</span>) DEFAULT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES</span><br><span class="line">(<span class="number">1</span>,<span class="string">'狂神'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'张三'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'李四'</span>,<span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<p>1、新建一个普通 <code>maven</code> 项目</p>
<p>2、删除src目录</p>
<p>3、导入<code>maven</code> 依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--导入依赖--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--mysql驱动--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--mybatis--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--junit--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul>
<li><p>编写 <code>mybatis</code> 的核心配置文件 ：<code>mybatis-config.xml</code></p>
<p>连接数据库</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;!--核心配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">    &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">        &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;userUnicode=true&amp;amp;characterEncoding=TUF-8"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"password"</span> value=<span class="string">"shinee19970608"</span>/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 <code>mybatis</code> 工具类,能连接上数据库了</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SqlSessionFactory 构建 sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提升作用域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory SqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取SqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="comment">// 可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  SqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Dao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口实现类由原来的 <code>UserDaoImpl</code> 转变为一个 <code>Mapper</code> 配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace=绑定一个对应的Dao/Mapper接口·--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.kuang.dao.UserDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询语句--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getUserList"</span> resultType=<span class="string">"com.kuang.pojo.User"</span>&gt;</span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点：</p>
<ul>
<li>junit测试</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>IDEA· jar包导入</title>
    <url>/blog/2020/02/16/Pom-xml/</url>
    <content><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>搭建 <code>maven</code> 工程时 <code>pom</code> 文件出现了 “Failed to read artifact descriptor for xxx:jar” 错误，原因是由于本地仓库中没有这个 <code>jar</code> 包，并且也无法从中央仓库中下载下来。查看本地仓库的对应文件夹，只有 <code>lastUpdated</code> 文件存在。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>手动将 <code>jar</code> 包发布到 <code>maven</code> 本地仓库中</p>
<p>1、下载好对应的 <code>jar</code> 包到本地</p>
<p>2、查看该 <code>jar</code> 包的坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	 &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	 &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;8.0.18&lt;/version&gt;</span><br><span class="line">	 &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=mysql -DartifactId=mysql-connector-java -Dversion=8.0.18 -Dpackaging=jar -Dfile=F:\jar\mysql-connector-java-8.0.18.jar</span><br></pre></td></tr></table></figure>

<p>命令的参数如下：</p>
<ul>
<li><code>DgroupId</code> 为 <code>jar</code> 包坐标的 <code>groupId</code> 值</li>
<li><code>DartifactId</code> 为 <code>jar</code> 包坐标的 <code>artifactId</code> 值</li>
<li><code>Dversion</code> 为 <code>jar</code> 包坐标的版本号</li>
<li><code>Dpackaging</code> 为 <code>jar</code> 包的打包方式</li>
<li><code>Dfile</code> 为 <code>jar</code> 包的本地路径</li>
</ul>
<p>执行可以在 <code>IDEA</code> 的 <code>maven project</code> 窗口进行执行</p>
<p>4、重新导入所有的 <code>maven</code> 项目</p>
<p>点击 <code>maven project</code> 窗口左上角的刷新按钮，<code>Reimport All Meven Projects</code> 。</p>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p><code>maven</code> 本地仓库中存在 <code>jar</code> 包，<code>pom.xml</code> 文件未报错，但是 <code>Maven Projects</code>  中的 <code>Dependencies</code> 中有红线报错</p>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>将 <code>pom.xml</code> 中这些出错的 <code>jar</code> 包引用先删除，刷新一次后再重新添加上</p>
]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/blog/2020/02/11/maven/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    开发中常需要依赖第三方的包，包和包之间存在依赖关系，版本间还有兼容性问题，有时需要将旧包升级或降级，当项目复杂到一定程度时包管理变得非常重要。</p>
<p><code>Maven</code> 是当前最受欢迎的Java项目管理构建自动化综合工具，主要做了两件事：</p>
<ul>
<li>统一开发规范与工具</li>
<li>统一管理 <code>jar</code> 包</li>
</ul>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网下载安装包</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>注：安装 <code>Maven</code> 前需确保已安装 <code>JDK</code>, 如果是 <code>Maven3</code> 则需 <code>JDK1.7</code> 以上</p>
<p>1、解压压缩包</p>
<p>2、配置系统变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新建环境变量</span><br><span class="line">MAVEN_HOME：E:\apache-maven-3.5.4</span><br><span class="line">添加path环境变量</span><br><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure>

<p>3、打开 <code>cmd</code> 输入 <code>mvn -version</code> 出现 <code>maven</code> 版本信息说明配置成功</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Maven0.png" alt></p>
<h3 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h3><ul>
<li>若不配置本地仓库，会在如下默认位置存放远程下载到的包</li>
</ul>
<p>打开 <code>maven</code> 安装目录、 打开<code>conf</code> 目录下的  <code>settings</code> 文件</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Maven1.png" alt></p>
<ul>
<li>将本地仓库位置配置到 <code>E:\javaKit\mavenRes</code></li>
</ul>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Meven2.png" alt></p>
<h3 id="中央仓库配置"><a href="#中央仓库配置" class="headerlink" title="中央仓库配置"></a>中央仓库配置</h3><p>当构建一个Maven项目时，首先检查pom.xml文件以确定依赖包的下载位置，执行顺序如下</p>
<ul>
<li>从本地资源库中查找并获得依赖包，如果没有，执行第二步</li>
<li>从 <code>Maven</code> 默认中央仓库中查找并获得依赖包（<a href="http://repo1.maven.org/maven2/），如果没有执行第3步" target="_blank" rel="noopener">http://repo1.maven.org/maven2/），如果没有执行第3步</a></li>
<li>如果在 <code>pom.xml</code> 中定义了自定义的远程仓库，也会在这里的仓库中查找并获得依赖包，如果都没有找到，则 <code>Maven</code> 会抛出异常</li>
</ul>
<p>修改默认中央仓库地址</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Maven3.png" alt></p>
<p><a href="https://www.cnblogs.com/best/p/9676515.html" target="_blank" rel="noopener">学习资料：一小时学会Maven</a></p>
<p>创建Maven项目</p>
<p><strong>maven项目打包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\IdeaProjects\learing-java&gt;mvn clean package</span><br></pre></td></tr></table></figure>

<p><strong>maven项目运行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\IdeaProjects\learing-java&gt;java -cp target/untitled-1.0-SNAPSHOT.jar org.example.App</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot入门</title>
    <url>/blog/2020/02/10/Spring-Boot/</url>
    <content><![CDATA[<h2 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h2><h3 id="1、Spring-Boot简介"><a href="#1、Spring-Boot简介" class="headerlink" title="1、Spring Boot简介"></a>1、Spring Boot简介</h3><ul>
<li>简化Spring应用开发的一个框架；</li>
<li>整个Spring技术栈的一个大整合；</li>
<li>J2EE开发的一站式解决方案；</li>
</ul>
<h3 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h3><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<ul>
<li><p>一个应用应该是一组小型服务;可以通过HTTP的方式进行互通；</p>
</li>
<li><p>每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
</li>
</ul>
<p>单体应用：ALL IN ONE </p>
<ul>
<li>所有的东西写在一个应用里；</li>
</ul>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Spring%20Boot0.png" alt></p>
<p><a href="https://www.jianshu.com/p/4821a29fa998" target="_blank" rel="noopener">详细参照微服务文档</a></p>
<h3 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h3><ul>
<li><p>jdk1.8    </p>
</li>
<li><p>maven3.6.1</p>
</li>
<li><p>springboot最新版</p>
</li>
<li><p>IDEA</p>
</li>
</ul>
<h2 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h2><p>官方：提供了一个快速生成的网站！IDEA集成了这个网站</p>
]]></content>
      <tags>
        <tag>Sring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA</title>
    <url>/blog/2020/02/06/java-ide/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java JDK</a></p>
</li>
<li><p><a href="http://www.jetbrains.com/" target="_blank" rel="noopener">IntelliJ IDEA</a></p>
</li>
</ul>
<h3 id="IDEA-目录"><a href="#IDEA-目录" class="headerlink" title="IDEA 目录"></a>IDEA 目录</h3><h4 id="IDEA安装目录结构"><a href="#IDEA安装目录结构" class="headerlink" title="IDEA安装目录结构"></a>IDEA安装目录结构</h4><ul>
<li>bin : 容器、执行文件和启动参数等</li>
<li>help：快捷键文档和其他帮助文档</li>
<li>jre64：64位java运行环境</li>
<li>lib：IDEA依赖的类库</li>
<li>license：各种插件许可</li>
<li>plugin：插件</li>
</ul>
<h4 id="IDEA设置目录结构"><a href="#IDEA设置目录结构" class="headerlink" title="IDEA设置目录结构"></a>IDEA设置目录结构</h4><p>设置目录是IDEA各种配置的保存目录，删除掉整个目录之后，重新启动 IntelliJ IDEA 会再自动帮你生成一个全新的默认配置。即把 IntelliJ IDEA 配置改坏时，可以删掉该目录，一切都会还原到默认。 </p>
<ul>
<li>conf：IntelliJ IDEA 个性化化配置目录，<strong>最重要的目录</strong>。记录了：IDE 主要配置功能、自定义的代码模板、自定义的文件 模板、自定义的快捷键、Project 的 tasks 记录等等个性化的设置。</li>
<li>system：IntelliJ IDEA 系统文件目录，里面主要有：缓存、索引、容器文件输出等等。</li>
</ul>
<h3 id="IDEA常用快捷方式"><a href="#IDEA常用快捷方式" class="headerlink" title="IDEA常用快捷方式"></a>IDEA常用快捷方式</h3><p><strong>IDEA常用快捷键</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---------代码自动生成-----------</span><br><span class="line">alt+/            代码自动补全</span><br><span class="line">alt+insert       自动生成构造方法等</span><br><span class="line">ctrl+shift+回车   补全结尾</span><br><span class="line">ctrl+j           自动代码生成模板</span><br><span class="line">---------代码优化--------------</span><br><span class="line">alt+回车          导包或者修正已导的包</span><br><span class="line">ctrl+alt+l       格式化代码</span><br><span class="line">ctrl+alt+i       代码自动缩进</span><br><span class="line">ctrl+e           显示最近打开的文件</span><br><span class="line">ctrl+p           方法参数提示</span><br><span class="line">ctrl+alt+t       把选中代码放入if等语句里</span><br><span class="line">---------代码编辑-------------</span><br><span class="line">ctrl+y           删除行</span><br><span class="line">ctrl+D           复制行</span><br><span class="line">ctrl+w           自动选中代码</span><br><span class="line">ctrl+g           跳转到指定行</span><br><span class="line">ctrl+shift+w     反选代码</span><br><span class="line">ctrl+shift+u     转换大小写</span><br><span class="line">alt+上下箭头      移动光标到上\下一个方法</span><br><span class="line">----------debug--------------</span><br><span class="line">F7              step into</span><br><span class="line">F8              step over</span><br><span class="line">alt+shift+f7    Force Step Into</span><br><span class="line">shift+f8        step out</span><br><span class="line">----------查询快捷键的使用------</span><br><span class="line">ctrl+n       查找类</span><br><span class="line">ctrl+shift+n 查找文件</span><br><span class="line">ctrl+G       定位行</span><br><span class="line">ctrl+f       查找当前窗口文本</span><br><span class="line">ctrl+R       当前窗口文本替换</span><br><span class="line">----------其他快捷键----------</span><br><span class="line">ctrl+z        回退</span><br><span class="line">ctrl+/        单行注释</span><br><span class="line">ctrl+shift+/  多行注释</span><br></pre></td></tr></table></figure>

<p><strong>IDEA模板</strong></p>
<p>1、<code>IDEA</code> 中代码模板所处的位置：settings - Editor - Live Templates / Postfix Completion</p>
<p>2、常用的模板</p>
<ul>
<li>psvm : main函数 </li>
<li>sout : 输出    变形 : soutp / soutm / soutv / xxx.sout    </li>
<li>fori : 可生产 for 循环</li>
<li>list.for : 可生成集合 list 的 for 循环</li>
<li>ifn ：可生成 if(xxx = null)</li>
<li>prsf : 可生成 private  static final</li>
</ul>
<p>学习资料：<a href="https://www.bilibili.com/video/av71609179?p=2" target="_blank" rel="noopener">IntelliJ IDEA 入门到实战教程</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>RDS用户权限管理</title>
    <url>/blog/2020/01/13/RDS-privilege-management/</url>
    <content><![CDATA[<h3 id="只读用户"><a href="#只读用户" class="headerlink" title="只读用户"></a>只读用户</h3><p>只能进行读取数据库操作</p>
<p><strong>全局权限：</strong></p>
<ul>
<li>PROCESS,REPLICATION SLAVE,REPLICATION CLIENT</li>
</ul>
<p><strong>数据库权限：</strong></p>
<ul>
<li>SELECT,LOCK TABLES,SHOW VIEW</li>
</ul>
<h3 id="读写用户"><a href="#读写用户" class="headerlink" title="读写用户"></a>读写用户</h3><p>可对数据库进行读写操作</p>
<p><strong>全局权限：</strong></p>
<ul>
<li>PROCESS,REPLICATION SLAVE,REPLICATION CLIENT</li>
</ul>
<p><strong>数据库权限</strong></p>
<ul>
<li>没有REFERENCES</li>
<li>SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX,TRIGGER,CREATE VIEW,SHOW VIEW,EXECUTE,ALTER ROUTINE,CREATE ROUTINE,CREATE TEMPORARY TABLES,LOCK TABLES,EVENT</li>
</ul>
<h3 id="仅DDL用户"><a href="#仅DDL用户" class="headerlink" title="仅DDL用户"></a>仅DDL用户</h3><p>对库或者表结构的操作</p>
<p><strong>全局权限：</strong></p>
<ul>
<li>PROCESS,REPLICATION SLAVE,REPLICATION CLIENT</li>
</ul>
<p><strong>数据库权限：</strong></p>
<ul>
<li>CREATE,DROP,ALTER,INDEX,CREATE VIEW,SHOW VIEW,ALTER ROUTINE,CREATE ROUTINE,CREATE TEMPORARY TABLES,LOCK TABLES</li>
</ul>
<h3 id="只DML用户"><a href="#只DML用户" class="headerlink" title="只DML用户"></a>只DML用户</h3><p>对数据库的数据进行操作</p>
<p><strong>全局权限：</strong></p>
<ul>
<li>PROCESS,REPLICATION SLAVE,REPLICATION CLIENT</li>
</ul>
<p><strong>数据库权限</strong></p>
<ul>
<li>SELECT,INSERT,UPDATE,DELETE,TRIGGER,SHOW VIEW,EXECUTE,CREATE TEMPORARY TABLES,LOCK TABLES,EVENT</li>
</ul>
<h3 id="高权限用户"><a href="#高权限用户" class="headerlink" title="高权限用户"></a>高权限用户</h3><p><strong>全局权限：</strong></p>
<ul>
<li>无SUPER、FILE、GRANT、SHUTDOWN</li>
<li>SELECT、INSERT、UPDATE、DELETE、CREATE、DROP、RELOAD、PROCESS、REFERENCES、INDEX、ALTER、CREATE TEMPORARY TABLES、LOCK TABLES、EXECUTE、REPLICATION SLAVE、REPLICATION CLIENT、CREATE VIEW、SHOW VIEW、CREATE ROUTINE、ALTER ROUTINE、CREATE USER、EVENT、GRANT OPTION、TRIGGER</li>
</ul>
]]></content>
      <tags>
        <tag>RDS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux free命令</title>
    <url>/blog/2020/01/09/free-h/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>free</code> 命令查看当前服务器内存使用状况以及剩余内存状况。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>free [参数]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-help       # 查看free命令详细信息</span><br><span class="line">-b          # 以bytes为单位显示内存信息</span><br><span class="line">-k          # 以KB为单位显示内存信息</span><br><span class="line">-m          # 以M为单位显示内存信息</span><br><span class="line">-g          # 以G为单位显示内存信息</span><br><span class="line">-h          # 以适于人类可读方式显示内存信息</span><br><span class="line">-t          # 显示Linux的全部内存</span><br><span class="line">-V          # 显示版本信息</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@db init.d]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G        459M        157M        492K        1.2G        1.2G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一列</span><br><span class="line">Mem           # 内存的使用信息</span><br><span class="line">Swap          # 交换空间的使用信息</span><br><span class="line">第一行</span><br><span class="line">total         # 服务器内存总大小</span><br><span class="line">used          # 已经使用了多少内存</span><br><span class="line">free          # 未被任何应用使用的真实空闲内存</span><br><span class="line">shared        # 多个进程共享的内存总额</span><br><span class="line">buff/cache    # 磁盘缓冲/缓存使用的物理内存的大小</span><br><span class="line">available     # 还可以被应用程序使用的物理内存的大小</span><br></pre></td></tr></table></figure>

<h4 id="free-与-available"><a href="#free-与-available" class="headerlink" title="free 与 available"></a>free 与 available</h4><ul>
<li><p><code>free</code> : 真正尚未被使用的物理内存的大小</p>
</li>
<li><p><code>available</code> : 应用程序认为可用内存的大小，大概计算方法：<code>available = free + buff + cache</code> </p>
</li>
</ul>
<p><code>Linux</code> 为提升读写性能，会消耗一部分内存资源来缓存磁盘数据，对内核而言 <code>buffer</code> 和 <code>cache</code> 属于已被使用的内存，但当应用程序申请内存时，如果 <code>free</code> 中的内存不够，内核会回收 <code>buffer</code> 和 <code>cache</code> 中的内存来满足应用程序的请求</p>
<h4 id="buffer-与-cache"><a href="#buffer-与-cache" class="headerlink" title="buffer 与 cache"></a>buffer 与 cache</h4><ul>
<li><code>buffer</code> : 缓冲 ，适用与速度快的往速度慢的输出东西。如：内存数据写到磁盘，<code>cpu</code>寄存器中的数据写到内存。</li>
<li><code>cache</code> ：缓存 ，速度慢的往速度快的输送东西。如：<code>cpu</code> 读取内存数据，硬盘一般提供一个内存作为缓存来增加系统的读取性能。</li>
</ul>
<p><a href="https://www.cnblogs.com/M18-BlankBox/p/5326484.html" target="_blank" rel="noopener">buffer 和 cache 怎么让你们解释的这么难理解</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lower_case_table_names大小写敏感设置</title>
    <url>/blog/2020/01/07/lower-case-file-system/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>事务隔离级别和MVCC</title>
    <url>/blog/2020/01/07/transaction-and-mvcc/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>MySQL是怎样运行的</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldump</title>
    <url>/blog/2019/12/31/mysqldump/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Linux下SCP后台运行传输文件</title>
    <url>/blog/2019/12/31/scp-backstage/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>传输一个大文件另一台服务器，当传输速率不高时有时需要传输几个小时，至十几个小时，为了避免由于其他原因导致传输的中断，需要将 <code>scp</code> 放到后台中运行。后台执行我们常用 <code>nohup command &amp;</code> 但是<code>scp</code> 需要输入密码，所以无法直接使用 <code>nohup</code> 。</p>
<h3 id="方法一、配置互信"><a href="#方法一、配置互信" class="headerlink" title="方法一、配置互信"></a>方法一、配置互信</h3><ul>
<li><a href="https://mino-yn.github.io/blog/2019/08/23/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%88%E5%8D%95%E5%90%91%EF%BC%89/">配置互信</a></li>
<li>后台执行 <code>scp</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#可以使用-l控制传输速度，传输过程中占用过大带宽，影响其他服务器。(100000/8/1024=12M)</span><br><span class="line">nohup scp -l 100000 test.tar root@172.172.230.211:/data &amp;</span><br></pre></td></tr></table></figure>

<h3 id="方法二、bg命令转后台执行"><a href="#方法二、bg命令转后台执行" class="headerlink" title="方法二、bg命令转后台执行"></a>方法二、bg命令转后台执行</h3><ul>
<li>运行 <code>scp</code> 命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup scp -P 60022 -r /TRS/back/* root@47.95.110.25:/backup</span><br></pre></td></tr></table></figure>

<ul>
<li>输入密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#此时输完密码进程会挂起，还是在前台执行</span><br><span class="line">nohup: ignoring input and appending output to `nohup.out&apos;</span><br><span class="line">root@47.95.110.25&apos;s password:</span><br></pre></td></tr></table></figure>

<ul>
<li>输入 <code>ctrl+z</code> 暂停程序,出现以下提示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]+  Stopped                 nohup scp -P 60022 -r /TRS/back/* root@47.95.110.25:/backup</span><br></pre></td></tr></table></figure>

<ul>
<li>执行 <code>bg</code> 使进程在后台继续运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hr-jf11 TRS]# bg</span><br><span class="line">[1]+ nohup scp -P 60022 -r /TRS/back/* root@47.95.110.25:/backup</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 <code>scp</code> 进程，进程已经在后台执行了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep scp</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装MySQL</title>
    <url>/blog/2019/12/27/CentOS-MySQL-Download/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Linux</code> 上安装软件常用方式：</p>
<ul>
<li>源码编译</li>
<li>压缩包解压（一般为 <code>tar.gz</code>）</li>
<li>编译好的安装包（RPM、DPKG等）</li>
<li>在线安装（YUM、APT等）</li>
</ul>
<p>便捷性：</p>
<p>YUM &gt; RPM &gt; tar.gz &gt; 源码</p>
<p>通用性:</p>
<p>源码 &gt; tar.gz &gt; RPM &gt; YUM</p>
<p>如：使用压缩包解压的方式安装，虽然需要自己额外进行一些配置工作，但掌握方法后各个平台都基本适用，YUM方式虽然简单，但平台和网络受限，必要时需添加一些特定的YUM源。</p>
<h2 id="删除已安装的MySQL"><a href="#删除已安装的MySQL" class="headerlink" title="删除已安装的MySQL"></a>删除已安装的MySQL</h2><p><code>yum</code> 方式可以不删mariad除 <code>mariadb</code> ，安装的 <code>MySQL</code> 会覆盖掉之前存在的 <code>mariadb</code></p>
<ul>
<li>检查 <code>MariaDB</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -qa|grep mariadb</span><br><span class="line">mariadb-server-5.5.60-1.el7_5.x86_64</span><br><span class="line">mariadb-5.5.60-1.el7_5.x86_64</span><br><span class="line">mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>

<ul>
<li>删除 <code>MariDB</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -e --nodeps mariadb-server</span><br><span class="line">shell&gt; rpm -e --nodeps mariadb</span><br><span class="line">shell&gt; rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></table></figure>

<ul>
<li>检查 <code>MySQL</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -qa|grep mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>删除 <code>MySQL</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -e --nodeps xxx</span><br></pre></td></tr></table></figure>

<h2 id="YUM方式"><a href="#YUM方式" class="headerlink" title="YUM方式"></a>YUM方式</h2><h3 id="添加-MySQL-YUM-Repository"><a href="#添加-MySQL-YUM-Repository" class="headerlink" title="添加 MySQL YUM Repository"></a>添加 MySQL YUM Repository</h3><p><code>CentOS 7</code> 开始，<code>Mariadb</code> 成为 <code>YUM</code> 源种默认的数据库安装包，如果想安装官方 <code>MySQL</code> 版本需适用 <code>MySQL</code> 提供的 <code>YUM</code> 源。</p>
<ul>
<li>下载 <code>MySQL</code> 源</li>
</ul>
<p>官网地址：<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看系统版本</span><br><span class="line">shell&gt; cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.7.1908 (Core)</span><br><span class="line"></span><br><span class="line">#选择对应版本进行下载,这里为CentOS 7 </span><br><span class="line">shell&gt; wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 <code>MySQL</code> 源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CentOS7当前最新的MySQL源安装</span><br><span class="line">sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>检查是否安装成功</li>
</ul>
<p>1、执行成功后会在 <code>/etc/yum.repos.d/</code> 目录下生成两个 <code>repo</code>  文件：<code>mysql-community.repo</code> 、<code>mysql-community-source.repo</code>。</p>
<p>2、通过 <code>yum repolist</code> 可以看到 <code>mysql</code> 相关资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line">mysql-connectors-community/x86_64 MySQL Connectors Community                 131</span><br><span class="line">mysql-tools-community/x86_64      MySQL Tools Community                      100</span><br><span class="line">mysql80-community/x86_64          MySQL 8.0 Community Server                 145</span><br></pre></td></tr></table></figure>

<h3 id="选择-MySQL版本"><a href="#选择-MySQL版本" class="headerlink" title="选择 MySQL版本"></a>选择 MySQL版本</h3><p>使用 <code>MySQL Yum Repository</code> 安装 <code>MySQL</code> 默认选择当前最新的稳定版本，如果希望安装其他版本需切换一下版本。</p>
<ul>
<li>查看当前 <code>MySQL Yum Repository</code> 中所有的 <code>MySQL</code> 版本(每个版本在不同子仓库中)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<ul>
<li><p>切换版本为  <code>MySQL5.7</code></p>
<p>方法1：使用 <code>yum-config-manager</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo yum-config-manager --disable mysql80-community</span><br><span class="line">shell&gt; sudo yum-config-manager --enable mysql57-community</span><br><span class="line"></span><br><span class="line"># 报错</span><br><span class="line">sudo: yum-config-manager: command not found</span><br><span class="line"># 解决</span><br><span class="line">yum -y install yum-utils</span><br></pre></td></tr></table></figure>

<pre><code>方法2：直接编辑 `/etc/yum.repos.d/mysql-community.repo`</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># enabled=0禁用</span><br><span class="line">[mysql80-community]</span><br><span class="line">name=MySQL 8.0 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-8.0-community/el/7/$basearch/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line"></span><br><span class="line"># enabled=1启用</span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>检查当前启用的 <code>MySQL</code>仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep mysq</span><br><span class="line">mysql-connectors-community/x86_64 MySQL Connectors Community                 131</span><br><span class="line">mysql-tools-community/x86_64      MySQL Tools Community                      100</span><br><span class="line">mysql57-community/x86_64          MySQL 5.7 Community Server                 384</span><br></pre></td></tr></table></figure>

<p><em>如果同时启用了多个仓库，安装时会选择最新版本</em></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>该命令会安装 <code>MySQL</code> 服务器 ( <code>mysql-community-server</code> ) 及其所需的依赖、相关组件，包括 <code>mysql-community-client</code>、<code>mysql-community-common</code> 、<code>mysql-community-libs</code> 等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure>

<h3 id="启停MySQL"><a href="#启停MySQL" class="headerlink" title="启停MySQL"></a>启停MySQL</h3><p><strong>CentOS 7</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">sudo systemctl start mysqld.service</span><br><span class="line">#查看状态</span><br><span class="line">sudo systemctl status mysqld.service</span><br><span class="line">#停止</span><br><span class="line">sudo systemctl stop mysqld.service</span><br><span class="line">#重启</span><br><span class="line">sudo systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>

<p><strong>CentOS 6</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">sudo service mysqld start</span><br><span class="line">#查看状态</span><br><span class="line">sudo service mysqld status</span><br><span class="line">#停止</span><br><span class="line">sudo service mysqld stop</span><br><span class="line">#重启</span><br><span class="line">sudo service mysqld restart</span><br></pre></td></tr></table></figure>

<h3 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">#修改root用户密码</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;XXX&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; systemctl enable mysqld</span><br><span class="line">shell&gt; systemctl daemon-reload</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Explain(下)</title>
    <url>/blog/2019/12/11/MySQL-Explain2/</url>
    <content><![CDATA[<p><strong>Extra</strong></p>
<p><code>Extra</code> 列用来说明一些额外信息，帮助我们更准确的理解 <code>MySQL</code> 如何执行给定的查询语句。</p>
<p>常见额外信息</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>No tables used</td>
<td>查询语句没有from子句</td>
</tr>
<tr>
<td>Impossible WHERE</td>
<td>查询语句的WHERE子句永远为FALSE</td>
</tr>
<tr>
<td>No matching min/max row</td>
<td>查询列表处有MIN或MAX聚集函数，但没有符合WHERE子句的搜索条件的记录</td>
</tr>
<tr>
<td>Using index</td>
<td>搜索条件只包含属于某索引的列，可以使用索引覆盖无需回表操作</td>
</tr>
<tr>
<td>Using index condition</td>
<td>查询执行过程中使用到Index Condition Pushdown（检查二级索引记录是否满足条件后再回表）特性</td>
</tr>
<tr>
<td>Using where</td>
<td>使用全表扫描，且语句中WHERE子句有针对该表的搜索条件</td>
</tr>
<tr>
<td>Using join buffer(Block Nested Loop)</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL是怎么运行的</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux · 升级GLIBCXX</title>
    <url>/blog/2019/12/10/Linux-GLIBCXX/</url>
    <content><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><p>安装软件时有时会遇到以下报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15&apos; not found</span><br></pre></td></tr></table></figure>

<p>出现该错误的原因是当前的 <code>GCC</code> 版本中，没有 <code>GLIBCXX_3.4.15</code> ，须要安装更高版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings /usr/lib64/libstdc++.so.6 | grep GLIBC</span><br><span class="line">GLIBCXX_3.4</span><br><span class="line">GLIBCXX_3.4.1</span><br><span class="line">GLIBCXX_3.4.2</span><br><span class="line">GLIBCXX_3.4.3</span><br><span class="line">GLIBCXX_3.4.4</span><br><span class="line">GLIBCXX_3.4.5</span><br><span class="line">GLIBCXX_3.4.6</span><br><span class="line">GLIBCXX_3.4.7</span><br><span class="line">GLIBCXX_3.4.8</span><br><span class="line">GLIBCXX_3.4.9</span><br><span class="line">GLIBCXX_3.4.10</span><br><span class="line">GLIBCXX_3.4.11</span><br><span class="line">GLIBCXX_3.4.12</span><br><span class="line">GLIBCXX_3.4.13</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBCXX_FORCE_NEW</span><br><span class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>从其它的机器上或者网上直接下载 <code>libstdc++.so.6.0.18</code> 版本（不限本版本，这个版本可以支持）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#直接下载至/usr/lib64目录下，注意确认没有重名文件</span><br><span class="line">cd /usr/lib64/</span><br><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/libstdc%2B%2B.so.6.0.18</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x libstdc++.so.6.0.18</span><br><span class="line">mv libstdc++.so.6 libstdc++.so.6-old</span><br><span class="line">ln -sf libstdc++.so.6.0.18 libstdc++.so.6</span><br></pre></td></tr></table></figure>

<p>重新查看当前 <code>GCC</code> 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings /usr/lib64/libstdc++.so.6 | grep GLIBC</span><br><span class="line">GLIBCXX_3.4</span><br><span class="line">GLIBCXX_3.4.1</span><br><span class="line">GLIBCXX_3.4.2</span><br><span class="line">GLIBCXX_3.4.3</span><br><span class="line">GLIBCXX_3.4.4</span><br><span class="line">GLIBCXX_3.4.5</span><br><span class="line">GLIBCXX_3.4.6</span><br><span class="line">GLIBCXX_3.4.7</span><br><span class="line">GLIBCXX_3.4.8</span><br><span class="line">GLIBCXX_3.4.9</span><br><span class="line">GLIBCXX_3.4.10</span><br><span class="line">GLIBCXX_3.4.11</span><br><span class="line">GLIBCXX_3.4.12</span><br><span class="line">GLIBCXX_3.4.13</span><br><span class="line">GLIBCXX_3.4.14</span><br><span class="line">GLIBCXX_3.4.15</span><br><span class="line">GLIBCXX_3.4.16</span><br><span class="line">GLIBCXX_3.4.17</span><br><span class="line">GLIBCXX_3.4.18</span><br><span class="line">GLIBCXX_3.4.19</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBCXX_FORCE_NEW</span><br><span class="line">GLIBCXX_FORCE_NEW</span><br><span class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RDS数据同步</title>
    <url>/blog/2019/12/09/RDS-data-synchronization/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有些项目进行测试时，需要建一个开发库的测试库，要求和生产环境的数据一样，做一个数据同步。如果原生产库和所要建的测试库都在阿里云上，可以使用 <code>RDS</code> 进行数据库克隆。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>创建测试数据库</p>
</li>
<li><p>为测试数据库创建读写账号</p>
</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、使用高权限用户 <code>rds</code> 登录 <code>RDS</code> 数据库。</p>
<p>2、选择 <code>数据方案</code> -&gt; <code>数据库克隆</code></p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/RDS%20Data%20Copy0.png" alt></p>
<p>3、选择源库-&gt;选择克隆目标库-&gt;选项-&gt;进行克隆-&gt;克隆结果</p>
<ul>
<li><p>选项</p>
<p>重点对象处理：跳过重点对象</p>
<p>时间选项：立即执行</p>
<p>迁移附加选项：视图、存储过程、函数、触发器、事件</p>
</li>
</ul>
<p>克隆结束后查看克隆结果，无执行失败的情况，则克隆成功。</p>
]]></content>
      <tags>
        <tag>数据迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>案例5 · 数据库无法连接</title>
    <url>/blog/2019/12/09/Database-cannot-connect/</url>
    <content><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Database%20cannot%20connection1.png" alt></p>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cosmo-hce01bak etc]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL.sed: -e expression #1, char 14: unknown option to `s&apos;</span><br></pre></td></tr></table></figure>

<p>查看配置文件 <code>my.cnf</code>，发现第14行中存在不必要的分割符/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my.cnf</span><br><span class="line">binlog//_format = mixed</span><br></pre></td></tr></table></figure>

<p>将分隔符/删掉后重新启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cosmo-hce01bak etc]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL... ERROR! The server quit without updating PID file (/home/data/mysql3306/mysql.pid).</span><br></pre></td></tr></table></figure>

<p>查看错误日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-12-09T09:01:04.701323+08:00 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span><br><span class="line">2019-12-09T09:01:04.701428+08:00 0 [Note] --secure-file-priv is set to NULL. Operations related to importing and exporting data are disabled</span><br><span class="line">2019-12-09T09:01:04.701456+08:00 0 [Note] /usr/local/mysql3306/bin/mysqld (mysqld 5.7.23-log) starting as process 36914 ...</span><br><span class="line">2019-12-09T09:01:04.708255+08:00 0 [Note] InnoDB: PUNCH HOLE support available</span><br><span class="line">2019-12-09T09:01:04.708294+08:00 0 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class="line">2019-12-09T09:01:04.708298+08:00 0 [Note] InnoDB: Uses event mutexes</span><br><span class="line">2019-12-09T09:01:04.708309+08:00 0 [Note] InnoDB: GCC builtin __sync_synchronize() is used for memory barrier</span><br><span class="line">2019-12-09T09:01:04.708313+08:00 0 [Note] InnoDB: Compressed tables use zlib 1.2.3</span><br><span class="line">2019-12-09T09:01:04.708316+08:00 0 [Note] InnoDB: Using Linux native AIO</span><br><span class="line">2019-12-09T09:01:04.709838+08:00 0 [Note] InnoDB: Number of pools: 1</span><br><span class="line">2019-12-09T09:01:04.709926+08:00 0 [Note] InnoDB: Using CPU crc32 instructions</span><br><span class="line">2019-12-09T09:01:04.711619+08:00 0 [Note] InnoDB: Initializing buffer pool, total size = 22G, instances = 8, chunk size = 128M</span><br><span class="line">2019-12-09T09:01:06.070773+08:00 0 [Note] InnoDB: Completed initialization of buffer pool</span><br><span class="line">2019-12-09T09:01:06.359814+08:00 0 [ERROR] [FATAL] InnoDB: pthread_create returned 11</span><br><span class="line">2019-12-09 09:01:06 0x7f4b98c20780  InnoDB: Assertion failure in thread 139962662127488 in file ut0ut.cc line 942</span><br><span class="line">InnoDB: We intentionally generate a memory trap.</span><br><span class="line">InnoDB: Submit a detailed bug report to http://bugs.mysql.com.</span><br><span class="line">InnoDB: If you get repeated assertion failures or crashes, even</span><br><span class="line">InnoDB: immediately after the mysqld startup, there may be</span><br><span class="line">InnoDB: corruption in the InnoDB tablespace. Please refer to</span><br><span class="line">InnoDB: http://dev.mysql.com/doc/refman/5.7/en/forcing-innodb-recovery.html</span><br><span class="line">InnoDB: about forcing recovery.</span><br><span class="line">01:01:06 UTC - mysqld got signal 6 ;</span><br><span class="line">This could be because you hit a bug. It is also possible that this binary</span><br><span class="line">or one of the libraries it was linked against is corrupt, improperly built,</span><br><span class="line">or misconfigured. This error can also be caused by malfunctioning hardware.</span><br><span class="line">Attempting to collect some information that could help diagnose the problem.</span><br><span class="line">As this is a crash and something is definitely wrong, the information</span><br><span class="line">collection process might fail.</span><br><span class="line"></span><br><span class="line">2019-12-09T09:01:06.359861+08:00 0 [Note] InnoDB: If the mysqld execution user is authorized, page cleaner thread priority can be changed. See the man page of setpriority().</span><br><span class="line">key_buffer_size=67108864</span><br><span class="line">read_buffer_size=2097152</span><br><span class="line">max_used_connections=0</span><br><span class="line">max_threads=4000</span><br><span class="line">thread_count=0</span><br><span class="line">connection_count=0</span><br><span class="line">It is possible that mysqld could use up to</span><br><span class="line">key_buffer_size + (read_buffer_size + sort_buffer_size)*max_threads = 16503036 K  bytes of memory</span><br><span class="line">Hope that&apos;s ok; if not, decrease some variables in the equation.</span><br><span class="line"></span><br><span class="line">Thread pointer: 0x0</span><br><span class="line">Attempting backtrace. You can use the following information to find out</span><br><span class="line">where mysqld died. If you see no messages after this, something went</span><br><span class="line">terribly wrong...</span><br><span class="line">stack_bottom = 0 thread_stack 0x30000</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(my_print_stacktrace+0x35)[0xf4e5e5]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(handle_fatal_signal+0x4a4)[0x7d1b64]</span><br><span class="line">/lib64/libpthread.so.0(+0xf5d0)[0x7f4b988005d0]</span><br><span class="line">/lib64/libc.so.6(gsignal+0x37)[0x7f4b971e9207]</span><br><span class="line">/lib64/libc.so.6(abort+0x148)[0x7f4b971ea8f8]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_Z18ut_print_timestampP8_IO_FILE+0x0)[0x7c0f4e]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_ZN2ib5fatalD1Ev+0xb3)[0x11ab913]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_Z21os_thread_create_funcPFPvS_ES_Pm+0x277)[0x10c1f97]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_Z34innobase_start_or_create_for_mysqlv+0x1acc)[0x1162e8c]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld[0x1044c3a]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_Z24ha_initialize_handlertonP13st_plugin_int+0x51)[0x81d5b1]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld[0xd3be16]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_Z40plugin_register_builtin_and_init_core_sePiPPc+0x3e4)[0xd3cff4]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld[0x7c8047]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld(_Z11mysqld_mainiPPc+0x92f)[0x7cb63f]</span><br><span class="line">/lib64/libc.so.6(__libc_start_main+0xf5)[0x7f4b971d53d5]</span><br><span class="line">/usr/local/mysql3306/bin/mysqld[0x7c1cb9]</span><br><span class="line">The manual page at http://dev.mysql.com/doc/mysql/en/crashing.html contains</span><br><span class="line">information that should help you find out what is causing the crash.</span><br></pre></td></tr></table></figure>

<p>free指令查看内存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cosmo-hce01bak data]# free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:       32656552      747216    22193532      157684     9715804    31254364</span><br><span class="line">Swap:      10485756           0    10485756</span><br></pre></td></tr></table></figure>

<p>配置文件中配置的 <code>MySQL</code> 内存大小为 <code>22GB</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innodb_buffer_pool_size = 22528M      #23068672KB</span><br></pre></td></tr></table></figure>

<p>剩余的内存空间少于22GB，将配置文件中 <code>innodb_buffer_pool_size</code> 参数改小后启动MySQL，启动成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cosmo-hce01bak data]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL...... SUCCESS!</span><br><span class="line">[root@cosmo-hce01bak data]# ps -ef|grep mysqld</span><br><span class="line">root      67122      1  0 10:20 pts/1    00:00:00 /bin/sh /usr/local/mysql3306/bin/mysqld_safe --datadir=/home/data/mysql3306/data --pid-file=/home/data/mysql3306/mysql.pid</span><br><span class="line">mysql     68120  67122 99 10:20 pts/1    00:00:23 /usr/local/mysql3306/bin/mysqld --basedir=/usr/local/mysql3306 --datadir=/home/data/mysql3306/data --plugin-dir=/usr/local/mysql3306/lib/plugin --user=mysql --log-error=err.log --open-files-limit=65536 --pid-file=/home/data/mysql3306/mysql.pid --socket=/home/data/mysql3306/mysql.sock --port=3306</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>Explain(上)</title>
    <url>/blog/2019/12/06/MySQL-Explain1/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用 <code>EXPLAIN</code> 语句可以得到经过 <code>MySQL</code> 查询优化器优化后生成的执行计划，本章目的就是明白使用<code>EXPLAIN</code> 语句所得到的各个输出项的作用。</p>
<p><code>EXPLAIN</code> 语句输出各列的大体作用：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>id</code></td>
<td align="left">在一个大的查询语句中每个<code>SELECT</code>关键字都对应一个唯一的<code>id</code></td>
</tr>
<tr>
<td align="center"><code>select_type</code></td>
<td align="left"><code>SELECT</code>关键字对应的那个查询的类型</td>
</tr>
<tr>
<td align="center"><code>table</code></td>
<td align="left">表名</td>
</tr>
<tr>
<td align="center"><code>partitions</code></td>
<td align="left">匹配的分区信息</td>
</tr>
<tr>
<td align="center"><code>type</code></td>
<td align="left">针对单表的访问方法</td>
</tr>
<tr>
<td align="center"><code>possible_keys</code></td>
<td align="left">可能用到的索引</td>
</tr>
<tr>
<td align="center"><code>key</code></td>
<td align="left">实际上使用的索引</td>
</tr>
<tr>
<td align="center"><code>key_len</code></td>
<td align="left">实际使用到的索引长度</td>
</tr>
<tr>
<td align="center"><code>ref</code></td>
<td align="left">当使用索引列等值查询时，与索引列进行等值匹配的对象信息</td>
</tr>
<tr>
<td align="center"><code>rows</code></td>
<td align="left">预估的需要读取的记录条数</td>
</tr>
<tr>
<td align="center"><code>filtered</code></td>
<td align="left">某个表经过搜索条件过滤后剩余记录条数的百分比</td>
</tr>
<tr>
<td align="center"><code>Extra</code></td>
<td align="left">一些额外的信息</td>
</tr>
</tbody></table>
<h2 id="执行计划输出中各列详解"><a href="#执行计划输出中各列详解" class="headerlink" title="执行计划输出中各列详解"></a>执行计划输出中各列详解</h2><h3 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h3><p><code>EXPLAIN</code> 语句输出的每条记录都对应着某个单表的访问方法，该条记录的 <code>table</code> 列代表该表表名。</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h3><p>当查询中包含 <code>子查询</code> 或包含 <code>UNION</code> 语句时一条查询语句可能会出现多个 <code>SELECT</code> 关键字。 查询语句中每出现一个 <code>SELECT</code> 关键字，便分配一个唯一的 <code>id</code> 值。 </p>
<p>可以通过查看执行计划中的 <code>id</code> ，知道查询优化器是否对涉及子查询的查询语句进行重写，转换成连接查询。</p>
<p>连接查询的执行计划中，每个表对应一条记录，这些记录的 <code>id</code> 列的值相同，出现在前面的表示驱动表，出现在后面的表示被驱动表。</p>
<h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h3><p>一条大的查询语句中可以包含若干个 <code>SELECT</code> 关键字，每个 <code>SELECT</code> 关键字都代表一个小的查询语句有一个 <code>select_type</code> 属性。 <code>select_type</code> 属性代表了小查询在大查询中扮演的角色。 </p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SIMPLE</td>
<td>查询语句中不包含UNION或子查询的查询</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>包含UNION、UNION ALL或子查询的大查询的最左边SELECT</td>
</tr>
<tr>
<td>UNION</td>
<td>包含UNION、UNION ALL的大查询中除最左边小查询外的查询</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>子查询中第一个SELECT代表的查询（前提：1、子查询不能转为相应的semi-join形式   2、子查询是<strong>不相关子查询</strong>   3、优化器采用将子查询物化的形式执行该子查询）</td>
</tr>
<tr>
<td>DEPENDENT SUBQUERY</td>
<td>子查询中第一个SELECT代表的查询（前提：1、子查询不能转为相应的semi-join形式  2、子查询是<strong>相关子查询</strong>  ）</td>
</tr>
<tr>
<td>DEPENDENT UNION</td>
<td>包含UNION或UNION ALL的大查询中除最左边小查询外的其他小查询（前提：各小查询依赖于外部查询）</td>
</tr>
<tr>
<td>DERIVED</td>
<td>采用物化的方式执行的包含派生表的查询，该派生表对应的子查询的<code>select_type</code> 为 <code>DERIVED</code></td>
</tr>
<tr>
<td>MATERIALIZED</td>
<td>查询优化器执行包含子查询的语句时，选择将子查询物化后与外层查询进行连接查询时，该子查询对应的 <code>select_type</code> 属性为 <code>MATERIALIZED</code>.</td>
</tr>
</tbody></table>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><p><code>type</code> 表明了 <code>MySQL</code> 对某个表执行查询时的访问方法。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>system</td>
<td>表中仅有一条记录，且使用的存储引擎的统计数据是精准的，如:MyISAM、Memory</td>
</tr>
<tr>
<td>const</td>
<td>根据主键或唯一二级索引列与常数进行等值匹配时</td>
</tr>
<tr>
<td>eq_ref</td>
<td>连接查询时，被驱动表通过主键或唯一二级索引列等值匹配的方式进行访问，对该被驱动表的访问方法为<code>eq_ref</code></td>
</tr>
<tr>
<td>ref</td>
<td>通过普通二级索引列与常量进行等值匹配查询某表</td>
</tr>
<tr>
<td>fulltext</td>
<td>全文索引</td>
</tr>
<tr>
<td>ref_or_null</td>
<td>对普通二级索引进行等值匹配查询，且该索引列的值可以为NULL、对该表的访问方法<strong>可能</strong>为<code>ref_or_null</code></td>
</tr>
<tr>
<td>index_merge</td>
<td>使用<strong>索引合并</strong>的方式执行对表的查询</td>
</tr>
<tr>
<td>unique_subquery</td>
<td>包含<code>IN</code>子查询的语句，优化器将 <code>IN</code> 子查询转换为<code>EXISTS</code> 子查询。且子查询可使用主键进行等值匹配。</td>
</tr>
<tr>
<td>index_subquery</td>
<td>与<code>unique_subquery</code> 类似，但访问子查询中的表时使用的是普通索引</td>
</tr>
<tr>
<td>range</td>
<td>使用索引获取某些范围区间的记录，可能使用到 <code>range</code> 访问方法</td>
</tr>
<tr>
<td>index</td>
<td>可以使用索引覆盖，但需扫描全部索引记录</td>
</tr>
<tr>
<td>ALL</td>
<td>全表扫描</td>
</tr>
</tbody></table>
<h3 id="possible-keys和key"><a href="#possible-keys和key" class="headerlink" title="possible_keys和key"></a><strong>possible_keys和key</strong></h3><p><code>possible_keys</code>：某个查询语句中，对某个表执行单表查询时可能用到的索引。</p>
<p><code>key</code>：实际使用到的索引。</p>
<h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h3><p><code>key_len</code> : 优化器决定使用某个索引执行查询时，该索引记录的最大长度，由三部分组成。</p>
<ul>
<li>固定长度类型的索引列，实际占用的存储空间的最大长度就是该固定值。指定字符集的变长类型的索引列，如某个索引列的类型是<code>VARCHAR(100)</code>，使用的字符集是<code>utf8</code>，那么该列实际占用的最大存储空间就是<code>100 × 3 = 300</code>个字节。</li>
<li>索引列可存储 <code>NULL</code> 值，<code>key_len</code> 比不可存储 <code>NULL</code> 值多一个字节。</li>
<li>变长字段：2个字节的空间存储变长列实际长度。</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h3><p>使用索引列等值匹配的条件执行查询时，<strong>ref</strong> 列展示与索引列进行等值匹配的是什么。</p>
<p>常数：<code>const</code>             某个列：<code>库名.表名.列名</code>         函数：<code>func</code></p>
<h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h3><ul>
<li><p>全表扫描：预计需要扫描的行数</p>
</li>
<li><p>使用索引：预计需要扫描的索引记录行数</p>
</li>
</ul>
<h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h3><p><code>MySQL</code> 在计算驱动扇出表采用的策略</p>
<ul>
<li>全表扫描：估计出满足搜索条件的记录有多少条。</li>
<li>使用索引：估计出满足除使用到对应索引的搜索条件外其他搜索条件的记录有多少条。</li>
</ul>
<p>更关注连接查询中驱动表对应的执行计划记录的 <code>filtered</code> 值，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key1 WHERE s1.common_field = &apos;a&apos;;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | s1    | NULL       | ALL  | idx_key1      | NULL     | NULL    | NULL              | 9688 |    10.00 | Using where |</span><br><span class="line">|  1 | SIMPLE      | s2    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s1.key1 |    1 |   100.00 | NULL        |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>执行计划显示 <code>s1</code> :驱动表  <code>s2</code> :被驱动表。 <code>s1</code> 扇出值为：<code>9688*10.00% = 968.8</code> 说明需要对被驱动表执行约 <code>968</code> 次查询。</p>
]]></content>
      <tags>
        <tag>MySQL是怎么运行的</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux · glibc 升级</title>
    <url>/blog/2019/12/04/linux-glibc/</url>
    <content><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>查看阿里云 <code>HDM</code> 中的数据库实例，发现很多处于异常状态，查看处于异常状态的 <code>DBgateway</code> 发现其版本信息一直显示由 <code>1.9.11</code> 正在升级至 <code>1.9.12</code>。分析可能由于依赖库版本过低导致。</p>
<p>注意：一般情况下不要随意升级。</p>
<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>安装软件经常会遇到如下报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/lib64/libc.so.6: version `GLIBC_2.14&apos; not found</span><br></pre></td></tr></table></figure>

<p>出现这种报错的原因是，使用高级的命令安装了软件，但是本机还是使用的是低级的依赖库，因此会出现报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ strings /lib64/libc.so.6 | grep GLIBC</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.2.6</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBC_2.3.3</span><br><span class="line">GLIBC_2.3.4</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.5</span><br><span class="line">GLIBC_2.6</span><br><span class="line">GLIBC_2.7</span><br><span class="line">GLIBC_2.8</span><br><span class="line">GLIBC_2.9</span><br><span class="line">GLIBC_2.10</span><br><span class="line">GLIBC_2.11</span><br><span class="line">GLIBC_2.12</span><br><span class="line">GLIBC_PRIVATE</span><br></pre></td></tr></table></figure>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>将 CentOS 6 升级到 <code>glibc 2.15</code> 版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/glibc-2.15.tar.gz</span><br><span class="line">wget https://ftp.gnu.org/gnu/glibc/glibc-2.15.tar.gz</span><br><span class="line">tar -zxvf glibc-2.15.tar.gz</span><br><span class="line">cd glibc-2.15</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#configure: error: no acceptable C compiler found in $PATH  缺少gcc</span><br><span class="line">yum install gcc</span><br></pre></td></tr></table></figure>

<ul>
<li>验证是否升级成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ strings /lib64/libc.so.6 | grep GLIBC</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.2.6</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBC_2.3.3</span><br><span class="line">GLIBC_2.3.4</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.5</span><br><span class="line">GLIBC_2.6</span><br><span class="line">GLIBC_2.7</span><br><span class="line">GLIBC_2.8</span><br><span class="line">GLIBC_2.9</span><br><span class="line">GLIBC_2.10</span><br><span class="line">GLIBC_2.11</span><br><span class="line">GLIBC_2.12</span><br><span class="line">GLIBC_2.13</span><br><span class="line">GLIBC_2.14</span><br><span class="line">GLIBC_2.15</span><br><span class="line">GLIBC_PRIVATE</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MES数据归档</title>
    <url>/blog/2019/11/29/MES-Data-archiving/</url>
    <content><![CDATA[<h3 id="数据归档"><a href="#数据归档" class="headerlink" title="数据归档"></a>数据归档</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><table>
<thead>
<tr>
<th>工厂编码</th>
<th>工厂名</th>
<th>数据库地址</th>
<th>端口</th>
<th>归档库</th>
<th>月结结束时间</th>
</tr>
</thead>
<tbody><tr>
<td>1003</td>
<td>中德滚筒</td>
<td>10.180.129.24</td>
<td>3306</td>
<td>cosmo_im_1003</td>
<td>2019-11-30 10:00</td>
</tr>
<tr>
<td>1031</td>
<td>重庆冰箱</td>
<td>10.139.119.91</td>
<td>3306</td>
<td>cosmo_im_1031</td>
<td>2019-11-30 12:00</td>
</tr>
<tr>
<td>1028</td>
<td>重庆波轮</td>
<td>10.139.115.36</td>
<td>3306</td>
<td>cosmo_im_1028</td>
<td>2019-11-30 09:00</td>
</tr>
<tr>
<td>1004</td>
<td>黄岛油烟机</td>
<td>10.136.218.10</td>
<td>3306</td>
<td>cosmo_im_1004</td>
<td>2019-11-30 08:00</td>
</tr>
<tr>
<td>1033</td>
<td>黄岛灶烤</td>
<td>10.180.120.5</td>
<td>3306</td>
<td>cosmo_im_1033</td>
<td>2019-11-30 08:00</td>
</tr>
<tr>
<td>1027</td>
<td>合肥滚筒</td>
<td>10.142.216.8</td>
<td>3306</td>
<td>cosmo_im_1027</td>
<td>2019-11-30 14:00</td>
</tr>
<tr>
<td>1029</td>
<td>重庆滚筒</td>
<td>10.139.113.122</td>
<td>3306</td>
<td>cosmo_im_1029</td>
<td>2019-11-30 12:00</td>
</tr>
</tbody></table>
<h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><p>订单日期在10月1日之前，且订单状态已完成。</p>
<table>
<thead>
<tr>
<th>表</th>
<th>说明</th>
<th>关联字段</th>
</tr>
</thead>
<tbody><tr>
<td>base_production_order_t</td>
<td>订单表</td>
<td>Code</td>
</tr>
<tr>
<td>bns_pm_operation</td>
<td>条码表</td>
<td>WorkUser_MOrderCode</td>
</tr>
<tr>
<td>bns_pm_scanhistory_month</td>
<td>扫描记录表</td>
<td>Code</td>
</tr>
<tr>
<td>bns_qm_processtest</td>
<td>过程检验表</td>
<td>Code</td>
</tr>
<tr>
<td>bns_pm_prodprocess</td>
<td>工位过站记录表</td>
<td>Order_Code</td>
</tr>
<tr>
<td>bns_pm_barcodecode</td>
<td>物料绑定表</td>
<td>….</td>
</tr>
</tbody></table>
<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul>
<li><a href="https://mino-yn.github.io/blog/2019/09/06/Percona%20Toolkit/">安装 Percona Toolkit</a></li>
<li>创建归档表</li>
</ul>
<p>数据归档表的表结构与原表一致，删除索引只保留主键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 归档表的表结构与原表一致，命名统一采用原表名_archive的格式</span><br><span class="line">bns_pm_operation_archive</span><br><span class="line">bns_pm_scanhistory_month_archive</span><br><span class="line">bns_qm_processtest_archive</span><br><span class="line">bns_pm_prodprocess_archive</span><br><span class="line">bns_pm_barcodecode_archive</span><br><span class="line"></span><br><span class="line">#创建归档表与原表表结构一致</span><br><span class="line">create table xx_archive like xx;</span><br></pre></td></tr></table></figure>

<ul>
<li>开始归档</li>
</ul>
<table>
<thead>
<tr>
<th>工厂名</th>
<th>数据库地址</th>
<th>归档库</th>
</tr>
</thead>
<tbody><tr>
<td>中德滚筒</td>
<td>10.180.129.24</td>
<td>cosmo_im_1003</td>
</tr>
<tr>
<td>重庆冰箱</td>
<td>10.139.119.91</td>
<td>cosmo_im_1031</td>
</tr>
<tr>
<td>重庆波轮</td>
<td>10.139.115.36</td>
<td>cosmo_im_1028</td>
</tr>
<tr>
<td>黄岛油烟机</td>
<td>10.136.218.10</td>
<td>cosmo_im_1004</td>
</tr>
<tr>
<td>黄岛灶烤</td>
<td>10.180.120.5</td>
<td>cosmo_im_1033</td>
</tr>
<tr>
<td>合肥滚筒</td>
<td>10.142.216.8</td>
<td>cosmo_im_1027</td>
</tr>
<tr>
<td>重庆滚筒</td>
<td>10.139.113.122</td>
<td>cosmo_im_1029</td>
</tr>
</tbody></table>
<p>1、通过特权账号登录服务器，进入 <code>tmp</code> 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br></pre></td></tr></table></figure>

<p>2、创建脚本文件 <code>MES_achiver.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi MES_achiver.sh</span><br></pre></td></tr></table></figure>

<p>3、打开文件后按键盘上的 <code>i</code> 转换到编辑模式（左下方显示 <code>-- INSERT --</code>）</p>
<p>将以下脚本复制后粘贴进去。注意：修改数据库地址和归档库名。</p>
<table>
<thead>
<tr>
<th>工厂名</th>
<th>数据库地址</th>
<th>归档库</th>
</tr>
</thead>
<tbody><tr>
<td>中德滚筒</td>
<td>10.180.129.24</td>
<td>cosmo_im_1003</td>
</tr>
<tr>
<td>重庆冰箱</td>
<td>10.139.119.91</td>
<td>cosmo_im_1031</td>
</tr>
<tr>
<td>重庆波轮</td>
<td>10.139.115.36</td>
<td>cosmo_im_1028</td>
</tr>
<tr>
<td>黄岛油烟机</td>
<td>10.136.218.10</td>
<td>cosmo_im_1004</td>
</tr>
<tr>
<td>黄岛灶烤</td>
<td>10.180.120.5</td>
<td>cosmo_im_1033</td>
</tr>
<tr>
<td>合肥滚筒</td>
<td>10.142.216.8</td>
<td>cosmo_im_1027</td>
</tr>
<tr>
<td>重庆滚筒</td>
<td>10.139.113.122</td>
<td>cosmo_im_1029</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#--------------------------------------------------------------------------------</span><br><span class="line">#脚本名称：  MES_achiver.sh</span><br><span class="line">#脚本功能：  MES工厂月结数据归档</span><br><span class="line">#归档策略：  归档订单日期是 2 个月以前，且订单状态是已完成</span><br><span class="line">#--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># bns_pm_barcodecode</span><br><span class="line"># 开始归档</span><br><span class="line">nohup pt-archiver --source h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_barcodecode --charset=utf8 --dest  h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_barcodecode_archive --where &quot;scan_time &lt; now()-interval 2 month&quot; --limit 1000 --commit-each --bulk-insert --no-version-check &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"># bns_pm_operation</span><br><span class="line"># 开始归档</span><br><span class="line">nohup pt-archiver --source h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_operation --charset=utf8 --dest  h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_operation_archive --where &quot;WorkUser_MOrderCode IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;)&quot; --limit 1000 --commit-each --bulk-insert --no-version-check &gt; myout1.file 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"># bns_pm_scanhistory_month</span><br><span class="line"># 开始归档</span><br><span class="line">nohup pt-archiver --source h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_scanhistory_month --charset=utf8 --dest  h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_scanhistory_month_archive --where &quot;Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;)&quot; --limit 1000 --commit-each --bulk-insert --no-version-check &gt; myout2.file 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># bns_qm_processtest</span><br><span class="line"># 开始归档</span><br><span class="line">nohup pt-archiver --source h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_qm_processtest --charset=utf8 --dest  h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_qm_processtest_archive --where &quot;Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;)&quot; --limit 1000 --commit-each --bulk-insert --no-version-check &gt; myout3.file 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># bns_pm_prodprocess</span><br><span class="line"># 开始归档</span><br><span class="line">nohup pt-archiver --source h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_prodprocess --charset=utf8 --dest  h=XX,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;XX&apos;,t=bns_pm_prodprocess_archive --where &quot;Order_Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;)&quot; --limit 1000 --commit-each --bulk-insert --no-version-check &gt; myout4.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>4、单击键盘的 <code>ESC</code> 然后输入<code>:wq!</code>  退出编辑文本编辑模式，并保存刚编辑的文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看tmp目录下MES_achiver.sh目录是否存在</span><br><span class="line">ls</span><br><span class="line">#执行脚本文件</span><br><span class="line">bash MES_achiver.sh</span><br></pre></td></tr></table></figure>

<p>实时查看进度，可以直接通过客户端查看，也可执行语句查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在MySQL中执行</span><br><span class="line">use information_schema;</span><br><span class="line">select table_name,table_rows from tables where TABLE_SCHEMA = &apos;xx&apos; and table_name=&apos;xx&apos;;</span><br></pre></td></tr></table></figure>

<h4 id="停止归档"><a href="#停止归档" class="headerlink" title="停止归档"></a>停止归档</h4><p>1、查看进程，在命令行执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep pt-archiver</span><br></pre></td></tr></table></figure>

<p>2、查看其执行的语句确定要停止的进程的进程号后，杀掉进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 进程号</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/MES.png" alt></p>
<h4 id="设置自动归档"><a href="#设置自动归档" class="headerlink" title="设置自动归档"></a>设置自动归档</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 存储过程</span><br><span class="line">DELIMITER $$ </span><br><span class="line"></span><br><span class="line">DROP PROCEDURE IF EXISTS sp_archive$$ </span><br><span class="line">CREATE PROCEDURE sp_archive()</span><br><span class="line">BEGIN 	</span><br><span class="line">	INSERT INTO bns_pm_barcodecode_archive SELECT * FROM bns_pm_barcodecode WHERE </span><br><span class="line">	scan_time &lt; now() - interval 2 month;</span><br><span class="line">	DELETE FROM bns_pm_barcodecode WHERE scan_time &lt; now() - interval 2 month;</span><br><span class="line">	</span><br><span class="line">	INSERT INTO bns_pm_prodprocess_archive SELECT * FROM bns_pm_prodprocess WHERE </span><br><span class="line">    Order_Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2     month and OrderStatus = &apos;2&apos;);</span><br><span class="line">    DELETE FROM bns_pm_prodprocess WHERE Order_Code IN (select Code from    base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line">    </span><br><span class="line">    INSERT INTO bns_pm_operation_archive SELECT * FROM bns_pm_operation</span><br><span class="line">    WHERE WorkUser_MOrderCode IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line">    DELETE FROM bns_pm_operation WHERE WorkUser_MOrderCode IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line">    </span><br><span class="line">    INSERT INTO bns_pm_scanhistory_month_archive SELECT * FROM bns_pm_scanhistory_month</span><br><span class="line">    WHERE Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line">	DELETE FROM bns_pm_barcodecode WHERE Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line">	</span><br><span class="line">	INSERT INTO bns_qm_processtest_archive SELECT * FROM bns_qm_processtest</span><br><span class="line">    WHERE Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line">	DELETE FROM bns_qm_processtest WHERE Code IN (select Code from base_production_order_t where EST &lt; now()-interval 2 month and OrderStatus = &apos;2&apos;);</span><br><span class="line"></span><br><span class="line">END $$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 事件</span><br><span class="line">CREATE EVENT Event_Archive_Daily</span><br><span class="line">ON SCHEDULE EVERY 1 DAY STARTS &apos;2019-12-01 02:00:00&apos;</span><br><span class="line">ON COMPLETION PRESERVE</span><br><span class="line">ENABLE</span><br><span class="line">DO call sp_archive();</span><br></pre></td></tr></table></figure>

<h4 id="10-138-232-85"><a href="#10-138-232-85" class="headerlink" title="10.138.232.85"></a>10.138.232.85</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开始归档</span><br><span class="line">nohup pt-archiver --source h=10.138.232.85,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;csomo-barcode&apos;,t=base_barcode_info --charset=utf8 --dest h=10.138.232.85,P=3306,u=sre,p=&apos;sre@@p$i&apos;,D=&apos;csomo-barcode&apos;,t=base_barcode_info_archive --where &quot;barcode_request_id IN (SELECT id FROM base_barcode_request WHERE TYPE = 5 AND est &lt; &apos;2019-10-01 00:00:00&apos;)&quot; --limit 1000 --commit-each --bulk-insert --no-version-check &gt; myout5.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL实时会话状态</title>
    <url>/blog/2019/11/15/mysql-live-session/</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看正在运行的线程，列出前100条</span></span><br><span class="line"><span class="string">show</span> <span class="string">processlist</span></span><br><span class="line"><span class="comment">#列出所有正在运行的线程</span></span><br><span class="line"><span class="string">show</span> <span class="string">full</span> <span class="string">processlist</span></span><br></pre></td></tr></table></figure>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mysql&gt;</span> <span class="string">show</span> <span class="string">processlist;</span></span><br><span class="line"><span class="string">+--------+---------+--------------------+--------------------+---------+------+----------+------------------+</span></span><br><span class="line"><span class="string">| Id     | User    | Host               | db                 | Command | Time | State    | Info             |</span></span><br><span class="line"><span class="string">+--------+---------+--------------------+--------------------+---------+------+----------+------------------+</span></span><br><span class="line"><span class="string">| 106125 | tdmsdev | 10.153.96.89:56808 | tdm                | Sleep   |  597 |          | NULL             |</span></span><br><span class="line"><span class="string">| 106134 | tdmsdev | 10.153.96.89:56827 | tdm                | Sleep   |  596 |          | NULL             |</span></span><br><span class="line"><span class="string">| 106178 | hdm     | 10.133.0.53:60606  | information_schema | Sleep   |    4 |          | NULL             |</span></span><br><span class="line"><span class="string">| 106179 | sre     | localhost          | NULL               | Query   |    0 | starting | show processlist |</span></span><br><span class="line"><span class="string">+--------+---------+--------------------+--------------------+---------+------+----------+------------------+</span></span><br><span class="line"><span class="string">4 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Id</strong>：线程标识，<code>kill</code> 某线程时使用</li>
<li><strong>User</strong>：显示当前用户，也就是执行 <code>SQL</code> 语句的用户</li>
<li><strong>Host</strong>：显示执行 <code>SQL</code> 的 <code>IP</code> 和端口，可以用来追踪问题的来源</li>
<li><strong>db</strong>：显示该线程连接的是哪个数据库</li>
<li><strong>Command</strong>：显示当前执行的命令，一般：<code>Sleep</code> 休眠，<code>Query</code> 查询，<code>Connect</code> 连接，<code>Binlog Dump</code> 复制</li>
<li><strong>Time</strong>：会话持续时间，单位（秒）</li>
<li><strong>State</strong>：显示使用当前连接的状态，很重要列。请注意，<code>State</code> 只是语句执行中的某一个状态，以查询为例，需要经过 <code>copying to tmp table，sorting result，sending data</code> 等状态才算完成。</li>
<li><strong>Info</strong>：显示执行的 <code>SQL</code> 语句，判断问题的重要依据。</li>
</ul>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><ul>
<li><p><strong>Sending data：</strong>正在处理SELECT查询的记录，同时正在把结果发送给客户端。</p>
</li>
<li><p><strong>Checking table：</strong>正在检查数据表（这是自动的）。</p>
</li>
<li><p><strong>Closing tables：</strong>正在将表中修改的数据刷新到磁盘中，同时正在关闭已经用完的表。这是一个很快的操作，如果不是这样的话，就应该确认磁盘空间是否已经满了或者磁盘是否正处于重负中。<br><strong>Connect Out：</strong>复制从服务器正在连接主服务器。</p>
</li>
<li><p><strong>Copying to tmp table on disk:</strong> 由于临时结果集大于<code>tmp_table_size</code>，正在将临时表从内存存储转为磁盘存储以此节省内存，大量线程处于该状态，可同时调大 <code>max_heap_table_size</code> 和 <code>tmp_table_size</code> 参数。</p>
</li>
<li><p><strong>Creating tmp table：</strong>正在创建临时表以存放部分查询结果。</p>
</li>
<li><p><strong>deleting from main table：</strong>服务器正在执行多表删除中的第一部分，刚删除第一个表。</p>
</li>
<li><p><strong>deleting from reference tables:</strong> 服务器正在执行多表删除中的第二部分，正在删除其他表的记</p>
</li>
<li><p><strong>Flushing tables:</strong> 正在执行FLUSH TABLES，等待其他线程关闭数据表。</p>
</li>
<li><p><strong>Killed:</strong> 发送了一个kill请求给某线程，那么这个线程将会检查kill标志位，同时会放弃下一个kill请求。MySQL会在每次的主循环中检查kill标志位，不过有些情况下该线程可能会过一小段才能死掉。如果该线程程被其他线程锁住了，那么kill请求会在锁释放时马上生效。</p>
</li>
<li><p><strong>Locked:</strong> 被其他查询锁住了。</p>
</li>
<li><p><strong>Sorting for group:</strong>  正在为GROUP BY做排序。</p>
</li>
<li><p><strong>Sorting for order:</strong> 正在为ORDER BY做排序。</p>
</li>
<li><p><strong>Opening tables:</strong> 这个过程应该会很快，除非受到其他因素的干扰。例如，在执ALTER TABLE或LOCK TABLE语句行完以前，数据表无法被其他线程打开。正尝试打开一个表。</p>
</li>
<li><p><strong>Removing duplicates:</strong> 正在执行一个SELECT DISTINCT方式的查询，但是MySQL无法在前一个阶段优化掉那些重复的记录。因此，MySQL需要再次去掉重复的记录，然后再把结果发送给客户端。</p>
</li>
<li><p><strong>Reopen table:</strong> 获得了对一个表的锁，但是必须在表结构修改之后才能获得这个锁。已经释放锁，关闭数据表，正尝试重新打开数据表。</p>
</li>
<li><p><strong>Repair by sorting:</strong> 修复指令正在排序以创建索引。</p>
</li>
<li><p><strong>Repair with keycache:</strong> 修复指令正在利用索引缓存一个一个地创建新索引。它会比Repair by sorting慢些。</p>
</li>
<li><p><strong>Searching rows for update：</strong> 正在讲符合条件的记录找出来以备更新。它必须在UPDATE要修改相关的记录之前就完成了。</p>
</li>
<li><p><strong>Sleeping：</strong> 正在等待客户端发送新请求.</p>
</li>
<li><p><strong>System lock：</strong> 正在等待取得一个外部的系统锁。如果当前没有运行多个mysqld服务器同时请求同一个表，那么可以通过增加–skip-external-locking参数来禁止外部系统锁。</p>
</li>
<li><p><strong>Upgrading lock：</strong> INSERT DELAYED正在尝试取得一个锁表以插入新记录。</p>
</li>
<li><p><strong>Updating:</strong> 正在搜索匹配的记录，并且修改它们。</p>
</li>
<li><p><strong>User Lock:</strong> 正在等待GET_LOCK()。</p>
</li>
<li><p>*<em>Waiting for tables flush: *</em>该线程得到通知，数据表结构已经被修改了，需要重新打开数据表以取得新的结构。然后，为了能的重新打开数据表，必须等到所有其他线程关闭这个表。以下几种情况下会产生这个通知：<code>FLUSH TABLES tbl_name</code>, <code>ALTER TABLE, RENAME TABLE, REPAIR TABLE</code>, <code>ANALYZE TABLE</code>,或<code>OPTIMIZE TABLE</code>。</p>
</li>
<li><p><strong>waiting for handler insert:</strong> INSERT DELAYED已经处理完了所有待处理的插入操作，正在等待新的请求。<br>大部分状态对应很快的操作，只要有一个线程保持同一个状态好几秒钟，那么可能是有问题发生了，需要检查一下。</p>
</li>
<li><p><strong>Writing to net</strong>：服务器正在将数据包写入网络。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6与CentOS 7启停服务</title>
    <url>/blog/2019/11/15/linux-service/</url>
    <content><![CDATA[<p>查看系统版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsb_release -a             #可列出所有版本信息</span><br><span class="line">cat /etc/redhat-release    #只适合Redhat系的Linux</span><br><span class="line">cat /etc/issue             #适用于所有的Linux发行版</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置服务自启动</span><br><span class="line">chkconfig --add mysqld          # 添加服务</span><br><span class="line">chkconfig mysqld on             # 开机自启服务</span><br><span class="line">chkconfig mysqld off            # 关闭开机自启</span><br><span class="line">chkconfig --list | grep mysqld  # 查看</span><br><span class="line"></span><br><span class="line"># 查看状态、启动、停止、重启</span><br><span class="line">service mysqld status/start/stop/restart</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld.service  # 开机自启服务</span><br><span class="line">systemctl disable mysqld.service # 关闭开机自启</span><br><span class="line"></span><br><span class="line"># 查看状态、启动、停止、重启</span><br><span class="line">systemctl status/start/stop/restart mysqld.service</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL故障排查</title>
    <url>/blog/2019/11/14/MySQL-troubleshooting-step/</url>
    <content><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>数据库连接不上</p>
<p>业务查询慢，执行 <code>SQL</code> 操作没有反应</p>
<h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><p>1）远程客户端是否能连接上数据库.</p>
<ul>
<li><p>查看会话连接数</p>
</li>
<li><p>查看线程状态</p>
<p>检查是不是有线程阻塞，有没有锁（ <code>Locked</code> ）占用</p>
<p><a href="https://huiraoo.github.io/blog/2019/11/15/mysql-live-session/" target="_blank" rel="noopener">线程状态</a></p>
</li>
</ul>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/troubleshooting1.png" alt></p>
<p>2)  通过服务器登录数据库，查看 <code>mysqld</code> 进行是否存在</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">ps</span> <span class="bullet">-ef</span> <span class="string">| grep mysqld</span></span><br><span class="line"><span class="string">root      64511  64440  0 10:27 pts/2    00:00:00 grep --color=auto mysqld</span></span><br><span class="line"><span class="string">root      79355      1  0 Aug31 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</span></span><br><span class="line"><span class="string">mysql     79981  79355 99 Aug31 ?        2-01:38:14 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/error.log --pid-file=/data/mysql/mysql.pid --socket=/data/mysql/mysql.sock --port=3306</span></span><br></pre></td></tr></table></figure>

<p>进程不存在，可能是服务器断电导致进行未自启动，启动 <code>mysql</code> 进程</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用 init.d</span></span><br><span class="line"><span class="string">$</span> <span class="string">/etc/init.d/mysqld</span> <span class="string">start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用mysqld_safe</span></span><br><span class="line"><span class="string">$</span> <span class="string">mysqld_safe</span> <span class="bullet">--defaults-file=/etc/my.cnf</span> <span class="bullet">--user=mysql</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用service</span></span><br><span class="line"><span class="string">$</span> <span class="string">systemctl</span> <span class="string">start</span> <span class="string">mysqld</span></span><br><span class="line"><span class="string">$</span> <span class="string">service</span> <span class="string">mysql</span> <span class="string">start</span></span><br></pre></td></tr></table></figure>

<p>3）登录 <code>MySQL</code> 查看线程状态，查看是否有锁占用，或者线程大量阻塞的情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -S /data/mysql/mysql.sock -usre -p&apos;sre@@p$i&apos;</span><br><span class="line">mysql&gt; show processlist;</span><br></pre></td></tr></table></figure>

<ul>
<li>有锁占用或线程阻塞</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除正在执行锁表的线程</span></span><br><span class="line"><span class="string">kill</span> <span class="string">id;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出时间大于10的线程, 复制查询结果，批量执行</span></span><br><span class="line"><span class="string">select</span> <span class="string">concat('kill</span> <span class="string">', id, '</span><span class="string">;')</span> <span class="string">from</span> <span class="string">information_schema.processlist</span> <span class="string">where</span> <span class="string">time</span> <span class="string">&gt; 10;</span></span><br></pre></td></tr></table></figure>

<p>快速杀掉大量会话连接</p>
<p><code>kill.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># !/bin/sh</span><br><span class="line"></span><br><span class="line">#############################################################################</span><br><span class="line"># Kill all processlist According to status.</span><br><span class="line"># -h: 主机IP</span><br><span class="line"># -u: 用户名</span><br><span class="line"># -p: 密码</span><br><span class="line">#############################################################################</span><br><span class="line"></span><br><span class="line">host = &apos;&apos;</span><br><span class="line">user = &apos;&apos;</span><br><span class="line">pwd  = &apos;&apos;</span><br><span class="line">status = &apos;&apos;</span><br><span class="line"></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">  n=`mysqladmin processlist -h$host -u$user -p$pwd | grep -i $status | wc -l`</span><br><span class="line">  date=`date +%Y%m%d\[%H:%M:%S]`</span><br><span class="line">  echo $n</span><br><span class="line"></span><br><span class="line">  if [ &quot;$n&quot; -gt 10 ]</span><br><span class="line">  then</span><br><span class="line">  for i in `mysqladmin processlist -h$host -u$user -p$pwd | grep -i $status | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">  do</span><br><span class="line">  	mysqladmin processlist -h$host -u$user -p$pwd kill $i</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">  echo &quot;$status is too many need killed it &quot; &gt;&gt; /tmp/kill.log</span><br><span class="line">  echo &quot;$date : $n&quot; &gt;&gt; /tmp/kill.log</span><br><span class="line">  fi</span><br><span class="line">  sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>4）查看磁盘空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cosmoim-d-fslg ~]# df -h</span><br><span class="line">Filesystem                               Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos_cosmoim--fslg01-root  100G  8.5G   92G   9% /</span><br><span class="line">devtmpfs                                  16G     0   16G   0% /dev</span><br><span class="line">tmpfs                                     16G     0   16G   0% /dev/shm</span><br><span class="line">tmpfs                                     16G   65M   16G   1% /run</span><br><span class="line">tmpfs                                     16G     0   16G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1                               1014M  190M  825M  19% /boot</span><br><span class="line">/dev/mapper/centos_cosmoim--fslg01-var    60G  286M   60G   1% /var</span><br><span class="line">/dev/mapper/centos_cosmoim--fslg01-tmp    60G   33M   60G   1% /tmp</span><br><span class="line">/dev/mapper/centos_cosmoim--fslg01-data  864G  114G  751G  14% /data</span><br><span class="line">tmpfs                                    3.2G     0  3.2G   0% /run/user/1001</span><br><span class="line">tmpfs                                    3.2G     0  3.2G   0% /run/user/0</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>案例5 · 主从复制延迟</title>
    <url>/blog/2019/11/14/Case5-replication/</url>
    <content><![CDATA[<h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>从库两个线程 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 均是 <strong>Yes</strong>，说明主从复制链路正常，但是 <code>Seconds_Behind_Master</code> 不断增大，且主从数据延迟有不断扩大的趋势。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.138.86.40</span><br><span class="line">                  Master_User: sre</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.001212</span><br><span class="line">          Read_Master_Log_Pos: 137934465</span><br><span class="line">               Relay_Log_File: relay-log.001555</span><br><span class="line">                Relay_Log_Pos: 1036549424</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.001191</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB: test,mysql,infomation_schema</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1036549261</span><br><span class="line">              Relay_Log_Space: 23223038991</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 422170</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 51</span><br><span class="line">                  Master_UUID: 2a627321-7537-11e8-99de-0050568ce861</span><br><span class="line">             Master_Info_File: /data/mysql/data/hlmp@3306/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Reading event from the relay log</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>检查当前正在使用的表：<code>show open tables where In_use=1;</code> 发现有一张表一直处于 <code>In_use</code> 状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;  show open tables where In_use=1;</span><br><span class="line">+----------+-----------------------+--------+-------------+</span><br><span class="line">| Database | Table                 | In_use | Name_locked |</span><br><span class="line">+----------+-----------------------+--------+-------------+</span><br><span class="line">| hlmp     | hlmp_bms_cost_summary |      1 |           0 |</span><br><span class="line">+----------+-----------------------+--------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>根据 <code>Relay_Log_Pos</code> 解析 <code>relay-log.001555</code>，查看当时正在执行的操作是 <code>Delete_rows</code>，操作的表是 <code>hlmp.hlmp_bms_cost_summary</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mysqlbinlog</span>   <span class="bullet">--no-defaults</span> <span class="bullet">--base64-output=decode-rows</span> <span class="string">relay-log.001592</span> <span class="bullet">--start-position=44477266</span> <span class="string">| more</span></span><br><span class="line"><span class="string">--vv                          # 将二进制转换为可阅读文本</span></span><br><span class="line"><span class="string">--base64-output=decode-rows   # 解析binlog为sql</span></span><br><span class="line"><span class="string">--start-position              # 起始位置</span></span><br><span class="line"><span class="string">--stop-position               # 结束位置</span></span><br><span class="line"><span class="string">--start-datetime              # 起始时间</span></span><br><span class="line"><span class="string">--stop-datetime               # 结束时间</span></span><br><span class="line"><span class="string">--no-defaults                 # 解决报错：unknown variable 'default-character-set=utf8'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hlmp-db hlmp@3306]# mysqlbinlog   --no-defaults --base64-output=decode-rows relay-log.001555 --start-position=1036549424 | more</span><br><span class="line">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span><br><span class="line">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span><br><span class="line">DELIMITER /*!*/;</span><br><span class="line"># at 1036549424</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036549341 CRC32 0x1bda7585  Query   thread_id=133919        exec_time=52    error_code=0</span><br><span class="line">SET TIMESTAMP=1573812653/*!*/;</span><br><span class="line">SET @@session.pseudo_thread_id=133919/*!*/;</span><br><span class="line">SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;</span><br><span class="line">SET @@session.sql_mode=1075838976/*!*/;</span><br><span class="line">SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;</span><br><span class="line">/*!\C utf8 *//*!*/;</span><br><span class="line">SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;</span><br><span class="line">SET @@session.time_zone=&apos;SYSTEM&apos;/*!*/;</span><br><span class="line">SET @@session.lc_time_names=0/*!*/;</span><br><span class="line">SET @@session.collation_database=DEFAULT/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"># at 1036549504</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036549494 CRC32 0xa972affe  Table_map: `hlmp`.`hlmp_bms_cost_summary` mapped to number 389</span><br><span class="line"># at 1036549657</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036557664 CRC32 0x86e8f0b3  Delete_rows: table id 389</span><br><span class="line"># at 1036557827</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036565850 CRC32 0xdcb58e43  Delete_rows: table id 389</span><br><span class="line"># at 1036566013</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036573985 CRC32 0x78b661d2  Delete_rows: table id 389</span><br><span class="line"># at 1036574148</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036581985 CRC32 0x4490473f  Delete_rows: table id 389</span><br><span class="line"># at 1036582148</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036590027 CRC32 0xe71fb4c4  Delete_rows: table id 389</span><br><span class="line"># at 1036590190</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036598226 CRC32 0x819227f3  Delete_rows: table id 389</span><br><span class="line"># at 1036598389</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036606256 CRC32 0xab8ec990  Delete_rows: table id 389</span><br><span class="line"># at 1036606419</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036614229 CRC32 0xc3a91b17  Delete_rows: table id 389</span><br><span class="line"># at 1036614392</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036622259 CRC32 0xa0f85538  Delete_rows: table id 389</span><br><span class="line"># at 1036622422</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036630232 CRC32 0x16881e81  Delete_rows: table id 389</span><br><span class="line"># at 1036630395</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036638346 CRC32 0x16658bd4  Delete_rows: table id 389</span><br><span class="line"># at 1036638509</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036646413 CRC32 0xb59b8535  Delete_rows: table id 389</span><br><span class="line"># at 1036646576</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036654571 CRC32 0x7cd654d6  Delete_rows: table id 389</span><br><span class="line"># at 1036654734</span><br><span class="line">#191115 18:10:53 server id 51  end_log_pos 1036662718 CRC32 0xf87f7be0  Delete_rows: table id 389</span><br><span class="line"># at 1036662881</span><br></pre></td></tr></table></figure>

<p>检查表结构，发现该表无主键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table hlmp.hlmp_bms_cost_summary</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在主从库分别为表 <code>hlmp.hlmp_bms_cost_summary</code> 添加主键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、备库停止 stop slave，可能会执行较久，因为需要回滚事务</span><br><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">2、在主库和从库上分别添加主键</span><br><span class="line">set sql_log_bin=0;   --设为0后，在会话中数据库上执行的语句都不记录binlog</span><br><span class="line">alter table hlmp.hlmp_bms_cost_summary add id int(10) unsigned primary key AUTO_INCREMENT;</span><br><span class="line"></span><br><span class="line">3、备库启动主从复制</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无主键、无索引或索引区分度不高，导致的主从复制延迟</p>
<h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. show slave status， 显示position 一直没有变</span><br><span class="line">b. show open tables where In_use=1， 显示某个表一直是in_use为 1</span><br><span class="line">c. show create table，查看表结构可以看到无主键，或者无任何索引，或者索引区分度很差</span><br></pre></td></tr></table></figure>

<h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. 找到表区分度比较高的几个字段, 可以使用这个方法判断：</span><br><span class="line">select count(*) from xx;</span><br><span class="line">select count(*) from (select distinct xx from xxx) t;</span><br><span class="line">如果2个查询count(*)的结果差不多，说明可以对这些字段加索引</span><br><span class="line"></span><br><span class="line">b. 备库 </span><br><span class="line">stop slave;   ---可能会执行比较久，因为需要回滚事务。</span><br><span class="line"></span><br><span class="line">c. 在主库和从库上分别添加索引</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line">alter table xx add key xx(xx);</span><br><span class="line">alter table &apos;xxxx&apos; add id int(10) unsigned primary key AUTO_INCREMENT;</span><br><span class="line"></span><br><span class="line">d. 备库 </span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6与 CentOS 7防火墙设置与端口打开</title>
    <url>/blog/2019/11/14/linux-firewall/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>CentOS</code> 升级到7后，内置防火墙从 <code>iptables</code> 变为 <code>firewalled</code> 不同操作系统设置的方式不同。</p>
<ul>
<li>查看系统版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsb_release -a             #可列出所有版本信息</span><br><span class="line">cat /etc/redhat-release    #只适合Redhat系的Linux</span><br><span class="line">cat /etc/issue             #适用于所有的Linux发行版</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h3><ul>
<li>打开/关闭/重启防火墙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig iptables on       # 开启防火墙</span><br><span class="line">chkconfig iptables off      # 关闭防火墙</span><br><span class="line">service iptables start      # 开启防火墙</span><br><span class="line">service iptables stop       # 关闭防火墙</span><br><span class="line">service iptables restarted  # 重启防火墙</span><br><span class="line">iptables -F                 # 清除防火墙规则</span><br></pre></td></tr></table></figure>

<ul>
<li>打开端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT   # 打开22端口</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT # 打开3306端口</span><br><span class="line">/etc/rc.d/init.d/iptables save   # 保存防火墙</span><br><span class="line">/etc/init.d/iptables restart     # 重启防火墙</span><br></pre></td></tr></table></figure>

<ul>
<li>查看打开的端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><ul>
<li>打开/关闭/重启防火墙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld  # 启用防火墙systemctl stop firewalld   # 停止防火墙systemctl status firewalld # 查看状态</span><br></pre></td></tr></table></figure>

<ul>
<li>打开端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp # 永久生效再加上--permanentfirewall-cmd --reload                        # 更新防火墙规则</span><br></pre></td></tr></table></figure>

<ul>
<li>查看打开的端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客添加搜索功能</title>
    <url>/blog/2019/11/13/hexo-search/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>文档慢慢变多时，标签和分类已经无法提供太大的作用，为了更加准确的定位到自己想看的文章，需要添加一个搜索功能。</p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在自己博客文件夹根目录（我的为<code>blog</code>）下点击右键选择 <code>Git Bash Here</code>安装插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h4 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h4><p><code>blog</code> 下的 <code>_config.yaml</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 10000</span><br></pre></td></tr></table></figure>

<p>注：每个冒号后需加空格</p>
<h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p><code>/blog/themes/next</code> 下的 <code>_config.yml</code> 文件，修改 <code>local_search</code> 为 <code>true</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>清除缓存后，生成部署网站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本下载汇总</title>
    <url>/blog/2019/11/11/Script-Download/</url>
    <content><![CDATA[<p><a href="https://mino-yn.github.io/blog/2019/09/11/Xtrabackup/"><strong>XtraBackup 安装</strong></a></p>
<p><code>install_xtrabackup.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/install_xtrabackup.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://mino-yn.github.io/blog/2019/09/06/Percona%20Toolkit/"><strong>Percona Toolkit 安装</strong></a></p>
<p><code>install_pt.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/install_pt.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://mino-yn.github.io/blog/2019/08/23/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%88%E5%8D%95%E5%90%91%EF%BC%89/"><strong>初始化+SSH免密</strong></a></p>
<p><code>sshFreeLogin.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/sshFreeLogin.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://mino-yn.github.io/blog/2019/09/24/mysql-DatabaseName/"><strong>修改数据库名</strong></a></p>
]]></content>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>定时统计数据库大小</title>
    <url>/blog/2019/11/09/Statistics-database-size/</url>
    <content><![CDATA[<p><strong>背景</strong></p>
<p>常有工单要求提供项目数据库的周增量及月增量，但HDM监控只能看到近一周数据库大小变化。为解决这一问题，需编写脚本自动查询数据库数据总量到指定表中。</p>
<p><strong>系统</strong>：供应链、HMQM、</p>
<p><strong>数据库实例</strong>：<code>10.200.62.4:3307</code></p>
<p>库名 : <code>reportdb</code></p>
<p>表名：<code>total_data</code></p>
<p><strong>执行时间</strong>：周日、每月第一天</p>
<p><code>totaldata.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> /bin/bash</span><br><span class="line"><span class="meta">#</span> 定时统计数据库大小</span><br><span class="line">EXEC_DATE=`date +%Y-%m-%d`</span><br><span class="line">FILE_DIR=`dirname $0`</span><br><span class="line">FILE_NAME=`basename $0 .sh`</span><br><span class="line">USER="sre"</span><br><span class="line">PASSWORD='sre@@p$i'</span><br><span class="line"></span><br><span class="line">sed '/^#.*\|^$/d' $&#123;FILE_DIR&#125;/$&#123;FILE_NAME&#125;.def &gt;$&#123;FILE_DIR&#125;/$&#123;FILE_NAME&#125;.tmp</span><br><span class="line">for i in `cat $&#123;FILE_DIR&#125;/$&#123;FILE_NAME&#125;.tmp`</span><br><span class="line">do</span><br><span class="line">DEF_DATA_TMP="`echo $&#123;i&#125; |sed s/\ //g`" #去空格,得到一行数据</span><br><span class="line"><span class="meta">#</span>得到数据库的项目名、ip、端口</span><br><span class="line">PROJECT=`echo $&#123;i&#125; | cut -d "," -f1 | tr "[A-Z]" "[a-z]"`</span><br><span class="line">IP=`echo $&#123;i&#125; | cut -d "," -f2 | tr "[A-Z]" "[a-z]"`</span><br><span class="line">PORT=`echo $&#123;i&#125; | cut -d "," -f3 | tr "[A-Z]" "[a-z]"`</span><br><span class="line">echo "$&#123;IP&#125;:$&#123;PORT&#125;   $&#123;PROJECT&#125;"</span><br><span class="line"></span><br><span class="line">total=`mysql -u $&#123;USER&#125; -p"$&#123;PASSWORD&#125;" -h $&#123;IP&#125; -P$&#123;PORT&#125;   -e "select concat(round(sum((data_length + index_length)/1024/1024/1024),2),'GB') as data from information_schema.tables;"`&gt;&gt; myout.file 2&gt;&amp;1</span><br><span class="line">totaldata="`echo $&#123;total##*a&#125; |sed s/\ //g`"</span><br><span class="line">mysql -u $&#123;USER&#125; -p"$&#123;PASSWORD&#125;"  -S/data/mysql3307/mysql.sock -e "INSERT INTO reportdb.total_data (project,ip,date,total_data) VALUES('$&#123;PROJECT&#125;','$&#123;IP&#125;:$&#123;PORT&#125;','$&#123;EXEC_DATE&#125;','$&#123;totaldata&#125;')" &gt;&gt; myout.file 2&gt;&amp;1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载地址</span><br><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/totaldata.sh</span><br></pre></td></tr></table></figure>

<p><code>totaldata.def</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#依次填写项目简称、IP、端口号</span><br><span class="line">HMQM-M,10.138.22.217,3100</span><br><span class="line">HMQM-S,10.138.22.218,3100</span><br><span class="line">HMQM-T,10.138.22.192,3306</span><br><span class="line">HDY-M,10.135.22.70,3306</span><br><span class="line">HDY-S,10.135.22.71,3306</span><br><span class="line">HDY-M,10.138.41.225,3306</span><br><span class="line">HDY-S,10.138.41.226,3306</span><br><span class="line">DZSP-M,10.138.22.10,3306</span><br><span class="line">DZSP-S,10.138.22.11,3306</span><br><span class="line">GMDC-M,10.138.228.127,3306</span><br><span class="line">GMDC-S,10.138.228.128,3306</span><br><span class="line">HLMP-M,10.138.86.40,3306</span><br><span class="line">HLMP-S,10.138.93.34,3306</span><br><span class="line">HDYBC-M,10.138.23.212,3100</span><br><span class="line">HDYBC-S,10.138.23.169,3100</span><br><span class="line">DBS-M,10.133.7.18,3306</span><br><span class="line">DBS-S,10.133.7.19,3306</span><br><span class="line">CPLM-M,10.138.98.218,3306</span><br><span class="line">CPLM-S,10.138.98.219,3306</span><br><span class="line">COSMOWMS-M,10.138.42.94,3306</span><br><span class="line">COSMOWMS-M,10.138.98.20,3306</span><br><span class="line">COSMOWMS-S,10.138.98.21,3306</span><br><span class="line">COSMOWMS-M,10.138.228.40,3306</span><br><span class="line">COSMOWMS-S,10.138.228.41,3306</span><br><span class="line">COSMOWMS-M,10.138.228.43,3306</span><br><span class="line">COSMOWMS-S,10.138.228.164,3306</span><br><span class="line">COSMOWMS-M,10.138.228.165,3306</span><br><span class="line">COSMOWMS-S,10.138.228.166,3306</span><br><span class="line">COSMOWMS-S,10.138.232.164,3306</span><br><span class="line">COSMOWMS-M,10.133.7.31,3306</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载地址</span><br><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/totaldata.def</span><br></pre></td></tr></table></figure>

<p><strong>定时任务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># crontab -e</span><br><span class="line">0      0     *       *       0      sh /tmp/test/totaldata.sh full</span><br><span class="line">0      0     1       *       *      sh /tmp/test/totaldata.sh full</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>本地数据库迁移至RDS</title>
    <url>/blog/2019/11/08/HeidiSQL-import-DATA/</url>
    <content><![CDATA[<h2 id="使用-HeidiSQL-工具"><a href="#使用-HeidiSQL-工具" class="headerlink" title="使用 HeidiSQL 工具"></a>使用 <code>HeidiSQL</code> 工具</h2><p>有时需要将本地服务器数据库中的数据迁移至云数据库RDS，可以借助 <code>HeidiSQL</code> 工具进行，达到事半功倍的效果。</p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1、<code>HeidiSQL</code> 对数据的导入导出功能是借助 <code>mysqldump</code> 实现的，所以在整个迁移过程过程中数据库需<strong>停库</strong>。</p>
<p>2、 为要进行迁移的 RDS 数据库创建高权限账号 <code>rds</code> 用于导入数据。</p>
<h4 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h4><p>1、选择要导出的数据库或数据表，单击鼠标右键，选择导出数据脚本。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HeidiSQL-import-Data.png" alt></p>
<p>2、根据实际情况选择合适的 <code>输出</code> 和 <code>数据</code> 参数，对要进行导出的数据库或数据表的内容进行选择导出。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HeidiSQL-import-Data3.png" alt></p>
<p><strong>云数据库中无数据</strong> 的情况进行迁移</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>数据库</td>
<td>删除、创建</td>
</tr>
<tr>
<td>表</td>
<td>删除、创建</td>
</tr>
<tr>
<td>数据</td>
<td>插入</td>
</tr>
<tr>
<td>输出</td>
<td>单个.sql文件</td>
</tr>
</tbody></table>
<p><strong>数据</strong> 选项中的各项参数：</p>
<ul>
<li>无数据：不导出数据，只导出表结构</li>
<li>删除+插入（清空现有数据）：清空数据表内容并插入导出的新内容</li>
<li>插入：只插入新内容</li>
<li>插入忽略：插入数据忽略掉错误内容</li>
<li>替换已存在数据</li>
</ul>
<p><strong>输出</strong> 选项中各项参数：</p>
<ul>
<li>单个 <code>.sql</code> 文件：导出一个SQL文件</li>
<li>目录-数据库子目录中每个对象一个文件：每个表一个单独的文件，存放到特定的文件夹中</li>
<li>剪切板：导出到剪切板</li>
<li>数据库：导入到另一个数据库中</li>
<li>服务器，导入到另一个服务器中</li>
</ul>
<p>勾选数据库和表中的 <code>删除</code>、<code>创建</code>选项，则生成的SQL语句中含有删除和创建数据库或数据表的语句，通常勾选起来。</p>
<h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><p>如果选择输出到数据库或服务器则无需单独进行数据导入工作，如果有导出的为SQL文件，则还需要对数据进行导入工作。</p>
<p>1、单击文件，选择运行SQL文件</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HeidiSQL-import-Data4.png" alt></p>
<p>2、选择要执行的 sql 脚本，点击打开，数据导入成功。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HeidiSQL-import-Data5.png" alt></p>
<h2 id="使用-mysqldump-在服务器操作"><a href="#使用-mysqldump-在服务器操作" class="headerlink" title="使用 mysqldump 在服务器操作"></a>使用 <code>mysqldump</code> 在服务器操作</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用 <code>HeidiSQL</code> 工具进行导入时，有时会提示需要 <code>Super</code> 权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access denied; you need (at least one of) the SUPER privilege(s) for this operation</span><br></pre></td></tr></table></figure>

<p>此时可借助 <code>mysqldump</code> 工具进行操作</p>
<p><strong>错误出现场景</strong></p>
<ul>
<li>在创建 存储过程、函数、触发器、事件、视图的时候出现这个错误。</li>
<li>从本地数据库导出 <code>SQL</code>，在 <code>RDS</code> 上应用该 <code>SQL</code> 的时候出现该错误。</li>
<li>从 <code>RDS</code>  数据库实例中进行逻辑备份，导入到 <code>RDS</code> 或本地数据库中。</li>
</ul>
<p><strong>错误出现原因</strong></p>
<ul>
<li>导入<code>RDS MySQL</code> 实例：<code>SQL</code>  语句中含有需要 <code>Supper</code> 权限才可以执行的语句，而 <code>RDS MySQL</code>不提供 <code>Super</code>  权限，因此需要去除这类语句。</li>
<li>本地 <code>MySQL</code> 实例没有启用 <code>GTID</code>。</li>
</ul>
<h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>使用 <code>mysqldump</code> 只导出本地数据库中的数据和表结构到<code>RDS</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">导出数据</span><br><span class="line">/usr/local/mysql/bin/mysqldump  --single-transaction -S/data/mysql/mysql@3307/mysql.sock -usre  -p&apos;sre@@p$i&apos; shin_survey &gt;shin_survey.sql</span><br><span class="line"></span><br><span class="line">如果本地数据库所在服务器无法连接至RDS，可将备份文件传输至10.133.0.53</span><br><span class="line">scp shin_survey.sql root@10.133.0.53:/tmp</span><br><span class="line"></span><br><span class="line">还原数据至RDS</span><br><span class="line">mysql -h rm-m5eh7vm829l4n623o.mysql.rds.aliyuncs.com -P3306 -u rds -p&apos;Changeme_123&apos; shin_survey &lt; shin_survey.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>mysqldump</code> 单独导出存储过程、函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只导出存储过程和函数(不导出结构和数据)</span><br><span class="line">/usr/local/mysql/bin/mysqldump -R -ndt  -S/data/mysql/mysql@3307/mysql.sock -usre  -p&apos;sre@@p$i&apos; shin_survey &gt;shin_survey1.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>检查导出的 <code>SQL</code> 去除类似如下子句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEFINER=`root`@`%`</span><br></pre></td></tr></table></figure>

<ul>
<li>修改完毕后，通过下面的语句检查是否合乎要求。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">egrep -in &quot;definer|set @@&quot; shin_survey1.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>还原存储过程和函数至数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果本地数据库所在服务器无法连接至RDS，可将备份文件传输至10.133.0.53</span><br><span class="line">scp shin_survey1.sql root@10.133.0.53:/tmp</span><br><span class="line"></span><br><span class="line">还原存储过程和函数至数据库</span><br><span class="line">mysql -h rm-m5eh7vm829l4n623o.mysql.rds.aliyuncs.com -P3306 -u rds -p&apos;Changeme_123&apos; shin_survey &lt; shin_survey1.sql</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工具</tag>
        <tag>数据迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>案例4 · MySQL备份失败</title>
    <url>/blog/2019/11/07/case4-backup-failed/</url>
    <content><![CDATA[<h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>供应商反应，xx系统备份作业卡住，请求协助查看数据库读写是否正常，如果是主从，查看主从是否同步。</p>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>1、查看从库状态，发现从库的两个线程 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 均为 yes 状态。即主从的复制链路是正常的，但是   <code>Seconds_Behind_Master</code> 在不断的增大，主从的复制延迟不断加大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 10.133.0.51</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-binlog.000561</span><br><span class="line">          Read_Master_Log_Pos: 456352268</span><br><span class="line">               Relay_Log_File: relay-log.001401</span><br><span class="line">                Relay_Log_Pos: 241706776</span><br><span class="line">        Relay_Master_Log_File: mysql-binlog.000554</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 241706557</span><br><span class="line">              Relay_Log_Space: 8638198834</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 173350</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 3306100</span><br><span class="line">                  Master_UUID: e1db90f2-fce1-11e8-86d2-005056b1d631</span><br><span class="line">             Master_Info_File: /data/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Reading event from the relay log</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br></pre></td></tr></table></figure>

<p>2、查看当前数据库线程状态无明显异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+--------+-------------+-------------------+--------------------+-------------+---------+---------------------------------------------------------------+--------------------------------+</span><br><span class="line">| Id     | User        | Host              | db                 | Command     | Time    | State                                                         | Info                           |</span><br><span class="line">+--------+-------------+-------------------+--------------------+-------------+---------+---------------------------------------------------------------+--------------------------------+</span><br><span class="line">|     55 | system user |                   | NULL               | Connect     | 9392470 | Waiting for master to send event                              | NULL                           |</span><br><span class="line">|     56 | system user |                   | NULL               | Connect     |  173622 | Reading event from the relay log                              | NULL                           |</span><br><span class="line">| 378492 | repl        | 10.200.62.4:39052 | NULL               | Binlog Dump | 3624063 | Master has sent all binlog to slave; waiting for more updates | NULL                           |</span><br><span class="line">| 608750 | cvbak       | localhost         | NULL               | Query       |  127066 | Waiting for table flush                                       | FLUSH /*!40101 LOCAL */ TABLES |</span><br><span class="line">| 617031 | root        | localhost         | NULL               | Query       |       0 | starting                                                      | show processlist               |</span><br><span class="line">| 617070 | hdm         | 10.133.0.52:52864 | information_schema | Sleep       |       3 |                                                               | NULL                           |</span><br><span class="line">+--------+-------------+-------------------+--------------------+-------------+---------+---------------------------------------------------------------+--------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3、使用 <code>show open tables where In_use = 1;</code> 查看当前正在使用的表，发现有一张表一直处于  <code>In_use</code> 状态.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show open tables where In_use = 1;</span><br><span class="line">+----------+-----------------------+--------+-------------+</span><br><span class="line">| Database | Table                 | In_use | Name_locked |</span><br><span class="line">+----------+-----------------------+--------+-------------+</span><br><span class="line">| tdmetl   | odsgvs_tax_center_cpo |      1 |           0 |</span><br><span class="line">+----------+-----------------------+--------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4、根据从库状态的 <code>Relay_Log_Pos</code> 解析 <code>relay-log.001401</code>，发现在对表 <code>odsgvs_tax_center_cpo</code> 执行大量的 <code>Delete_rows</code> 操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@tdds-mysql-s mysql]# mysqlbinlog -vvv --base64-output=decode-rows  relay-log.001401 --start-position=241706776 | more</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span><br><span class="line">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span><br><span class="line">DELIMITER /*!*/;</span><br><span class="line"># at 241706776</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241706622 CRC32 0x346b0eca      Anonymous_GTID  last_committed=61       sequence_number=62      rbr_only=yes</span><br><span class="line">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;</span><br><span class="line">SET @@SESSION.GTID_NEXT= &apos;ANONYMOUS&apos;/*!*/;</span><br><span class="line"># at 241706841</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241706696 CRC32 0x9ba8f516      Query   thread_id=13233783      exec_time=0     error_code=0</span><br><span class="line">SET TIMESTAMP=1572656709/*!*/;</span><br><span class="line">SET @@session.pseudo_thread_id=13233783/*!*/;</span><br><span class="line">SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;</span><br><span class="line">SET @@session.sql_mode=1436549128/*!*/;</span><br><span class="line">SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;</span><br><span class="line">/*!\C utf8 *//*!*/;</span><br><span class="line">SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;</span><br><span class="line">SET @@session.lc_time_names=0/*!*/;</span><br><span class="line">SET @@session.collation_database=DEFAULT/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"># at 241706915</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241706842 CRC32 0xc6476297      Table_map: `tdmetl`.`odsgvs_tax_center_cpo` mapped to number 172320</span><br><span class="line"># at 241707061</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241715049 CRC32 0xca58a8bf      Delete_rows: table id 172320</span><br><span class="line"># at 241715268</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241723194 CRC32 0xa8aae720      Delete_rows: table id 172320</span><br><span class="line"># at 241723413</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241731146 CRC32 0xc0240197      Delete_rows: table id 172320</span><br><span class="line"># at 241731365</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241739309 CRC32 0xfeafd008      Delete_rows: table id 172320</span><br><span class="line"># at 241739528</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241747304 CRC32 0x3366f85c      Delete_rows: table id 172320</span><br><span class="line"># at 241747523</span><br><span class="line">#191102  9:05:09 server id 3306100  end_log_pos 241755470 CRC32 0x014525ce      Delete_rows: table id 172320</span><br><span class="line"># at 241755689</span><br></pre></td></tr></table></figure>

<p>5、查看 <code>odsgvs_tax_center_cpo</code> 表结构，发现表的数据量很大，且无主键。确定原因：<strong>对无主键的表执行大量的删除或更新操作，导致从库卡住。</strong></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、对表添加自增主键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &apos;xxxx&apos; ADD id int UNSIGNED primary key AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>

<p>2、大表删除使用 <code>truncate</code> 命令。</p>
<p>具体解决步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、停止从库的slave</span><br><span class="line">2、给 odsgvs_tax_center_cpo 表添加主键</span><br><span class="line">4、重启slave</span><br><span class="line">5、使用 pt-slave-restart 在后台跳过错误</span><br><span class="line">nohup ./pt-slave-restart -usre -p&apos;sre@@p$i&apos;  &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class="line">6、稳定一段时间后查看其主从复制状态，以及主从库 odsgvs_tax_center_cpo 表的数据量是否一致。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell快速入门（二）</title>
    <url>/blog/2019/11/06/shell-quick-start2/</url>
    <content><![CDATA[<h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="IF-ELSE结构"><a href="#IF-ELSE结构" class="headerlink" title="IF ELSE结构"></a>IF ELSE结构</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=10</span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">  echo "a equals b"	# 输出这里</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="IF-ELSE-IF-ELSE结构"><a href="#IF-ELSE-IF-ELSE结构" class="headerlink" title="IF ELSE-IF ELSE结构"></a>IF ELSE-IF ELSE结构</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=9 </span><br><span class="line">if [ $a = 10 ]</span><br><span class="line">then</span><br><span class="line">  echo "a == 10"</span><br><span class="line">elif [ $a -lt 10 ]</span><br><span class="line">then</span><br><span class="line">  echo "a &lt; 10"	# 输出这里</span><br><span class="line">else </span><br><span class="line">  echo "a &gt; 10"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> <code>if</code> 后面的表达式其左右两边都要留有一个空格，这是 Shell 语法，若无空格，执行Shell时会报错。</p>
]]></content>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell快速入门（一）</title>
    <url>/blog/2019/11/06/shell-quick-start/</url>
    <content><![CDATA[<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><code>shell</code> 脚本组成结构如下：</p>
<ul>
<li>文件标识：<code>#!/bin/bash</code> 中的<code>#!</code> 是一个特殊标记，标识该 <code>Shell</code> 脚本将使用 <code>/bin/bash</code> 这个Shell对文件内容进行解析。</li>
<li>文件注释：对文件业务逻辑的注释</li>
<li>Shell代码</li>
</ul>
<p><code>Shell</code> 脚本文件结构范例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份数据库User表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接指定数据数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局变量:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   BACKUP_DIR</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   ORACLE_SID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   None</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回值:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   None</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################</span></span></span><br><span class="line">connect()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印字符串"><a href="#打印字符串" class="headerlink" title="打印字符串"></a>打印字符串</h3><p><code>echo</code> 适用于简单打印，<code>printf</code> 适用于统一缩进的复杂打印。</p>
<h4 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a><strong>echo命令</strong></h4><ul>
<li>裸奔：无法输出 <code>;</code> </li>
<li>单引号：无法在字符串中引用变量</li>
<li>双引号：无法直接打印出特殊字符，需要将特殊字符进行转义。</li>
</ul>
<p>无任何变量和特殊字符：可裸奔；有特殊字符，无引用变量：单引号；既有特殊字符，又要引用变量：双引号。</p>
<h4 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a><strong>printf命令</strong></h4><p>可以对齐打印字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"> </span><br><span class="line">printf &quot;%-10s %-8s %-4s\n&quot; 姓名 年龄 存款K  </span><br><span class="line">printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 30 52.20</span><br><span class="line">printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 25 26.32</span><br><span class="line">printf &quot;%-10s %-8s %-4.2f\n&quot; 郭芙 27 15.20</span><br><span class="line"></span><br><span class="line">#%-10s:左对齐，保留10位，是字符串</span><br><span class="line">#%-4.2f:左对齐，保留4位，小数点保留两位，是浮点型数字</span><br></pre></td></tr></table></figure>

<p><code>%</code> :标识符  <code>-</code> :左对齐   <code>10</code> :保留10位长度  <code>s</code> ：字符串</p>
<p><code>printf</code> 格式替代符：</p>
<ul>
<li>d: Decimal 十进制整数</li>
<li>s: String 字符串</li>
<li>c: Char 字符</li>
<li>f: Float 浮点</li>
</ul>
<h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><h4 id="进行数学运算"><a href="#进行数学运算" class="headerlink" title="进行数学运算"></a>进行数学运算</h4><p>计算<code>10+5</code>并输出</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式1</span></span><br><span class="line"><span class="string">a=`expr</span> <span class="number">10</span> <span class="string">+</span> <span class="number">5</span><span class="string">`</span></span><br><span class="line"><span class="string">echo</span> <span class="string">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line"><span class="string">let</span> <span class="string">a=10+5</span></span><br><span class="line"><span class="string">echo</span> <span class="string">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式3，推荐</span></span><br><span class="line"><span class="string">((</span> <span class="string">a</span> <span class="string">=</span> <span class="number">10</span> <span class="string">+</span> <span class="number">5</span> <span class="string">))</span></span><br><span class="line"><span class="string">echo</span> <span class="string">$a</span></span><br></pre></td></tr></table></figure>

<h4 id="进行数值比较"><a href="#进行数值比较" class="headerlink" title="进行数值比较"></a>进行数值比较</h4><p>将需要运算的表达式放在两对括号中，Shell会计算出一个最终结果，<code>true</code> 或者 <code>false</code> 。括号中的表达式与<code>Java</code> 等高级语言的语法非常一致，可以使用 <code>&amp;&amp;</code> 或者 <code>||</code> 符号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=15</span><br><span class="line">if (( a &gt; 10 &amp;&amp; a &lt; 20 ))</span><br><span class="line">then </span><br><span class="line">	echo "10 &lt; a &lt; 20"	</span><br><span class="line">else</span><br><span class="line">	echo "a &lt;= 10 or a &gt;= 20"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>输出 <code>10 &lt; a &lt; 20</code> </p>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p><code>Shell</code> 有专门的6个操作符进行字符串的比较：</p>
<ul>
<li><code>=</code> ：检测两个字符串是否相等，相等返回 <code>true</code></li>
<li><code>!=</code> ：检测两个字符串是否相等，不相等返回 <code>true</code></li>
<li><code>-z</code> ：检测字符串长度是否为0，为0返回 <code>true</code></li>
<li><code>-n</code>：检测字符串长度是否为0，不为0返回 <code>true</code></li>
<li><code>str</code> :检测字符串长度是否为空，不为空返回 <code>true</code></li>
</ul>
<p><strong>操作符左右两边都要加空格，否则会报语法错误</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a="abc"</span><br><span class="line">b="efg"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串是否相等</span></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">   echo "$a = $b : a 等于 b"</span><br><span class="line">else</span><br><span class="line">   echo "$a = $b: a 不等于 b"</span><br><span class="line">fi</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo "$a != $b : a 不等于 b"</span><br><span class="line">else</span><br><span class="line">   echo "$a != $b: a 等于 b"</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串长度是否为0</span></span><br><span class="line">if [ -z $a ]</span><br><span class="line">then</span><br><span class="line">   echo "-z $a : 字符串长度为 0"</span><br><span class="line">else</span><br><span class="line">   echo "-z $a : 字符串长度不为 0"</span><br><span class="line">fi</span><br><span class="line">if [ -n "$a" ]</span><br><span class="line">then</span><br><span class="line">   echo "-n $a : 字符串长度不为 0"</span><br><span class="line">else</span><br><span class="line">   echo "-n $a : 字符串长度为 0"</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串是否为空</span></span><br><span class="line">if [ $a ]</span><br><span class="line">then</span><br><span class="line">   echo "$a : 字符串不为空"</span><br><span class="line">else</span><br><span class="line">   echo "$a : 字符串为空"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>B+树索引的使用</title>
    <url>/blog/2019/10/25/B-tree-index-use/</url>
    <content><![CDATA[<ul>
<li><code>B+</code>树索引在空间和时间上都有代价，所以不能随便乱建索引。</li>
<li><code>B+</code>树索引适用于下边这些情况：<ul>
<li>全值匹配</li>
<li>匹配左边的列</li>
<li>匹配范围值</li>
<li>精确匹配某一列并范围匹配另外一列</li>
<li>用于排序</li>
<li>用于分组</li>
</ul>
</li>
<li>在使用索引时需要注意下边这些事项：<ul>
<li>只为用于搜索、排序或分组的列创建索引</li>
<li>为列的基数大的列创建索引</li>
<li>索引列的类型尽量小</li>
<li>可以只对字符串值的前缀建立索引</li>
<li>只有索引列在比较表达式中单独出现才可以适用索引</li>
<li>为了尽可能少的让<code>聚簇索引</code>发生页面分裂和记录移位的情况，建议让主键拥有<code>AUTO_INCREMENT</code>属性。</li>
<li>定位并删除表中的重复和冗余索引</li>
<li>尽量使用<code>覆盖索引</code>进行查询，避免<code>回表</code>带来的性能损耗。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL是怎样运行的</tag>
      </tags>
  </entry>
  <entry>
    <title>XtraBackup实现数据迁移</title>
    <url>/blog/2019/10/24/index-type/</url>
    <content><![CDATA[<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p><a href="https://mino-yn.github.io/blog/2019/09/11/Xtrabackup/">安装 `XtraBackup</a>`</p>
<p><a href="https://mino-yn.github.io/blog/2019/08/23/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%88%E5%8D%95%E5%90%91%EF%BC%89/">配置互信</a></p>
<p>全备数据并传输到现服务器</p>
<p>准备工作：</p>
<ul>
<li>确认数据库版本是否一致。</li>
<li>确认数据库存储引擎是否相同。</li>
<li>查看空间是否充足。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份原数据库：</span></span><br><span class="line"><span class="string">innobackupex</span> <span class="bullet">--defaults-file=/etc/my.cnf</span> <span class="bullet">--user=root</span> <span class="bullet">--password=Haier@123</span> <span class="bullet">--no-timestamp</span> <span class="string">/data/backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传输到现服务器：</span></span><br><span class="line"><span class="string">scp</span> <span class="bullet">-r</span> <span class="string">/data/backup/*</span> <span class="string">root@10.133.7.19:/data/backup</span></span><br></pre></td></tr></table></figure>

<p>现服务器，恢复全备数据</p>
<ul>
<li>原数据库与现数据库的数据库版本需一致</li>
<li>MySQL配置文件内容尽可能保持一致</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止MySQL服务</span></span><br><span class="line"><span class="string">mysqladmin</span> <span class="bullet">-uroot</span> <span class="bullet">-pHaier@123</span> <span class="string">shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#备份上应用日志，一般没有看到报错且最后显示 OK 就没有问题</span></span><br><span class="line"><span class="string">innobackupex</span> <span class="bullet">--defaults-file=/etc/my.cnf</span> <span class="bullet">--apply-log</span> <span class="string">/data/backup</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#将原MySQL数据目录改名</span></span><br><span class="line"><span class="string">mv</span> <span class="string">mysql</span> <span class="string">mysql_bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重建Mysql数据目录</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复数据,将备份还原到 my.cnf 指定的 datadir 中，不指定 --defaults-file，默认/etc/my.cnf</span></span><br><span class="line"><span class="string">innobackupex</span> <span class="bullet">--copy-back</span> <span class="string">/data/backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对新目录进行授权</span></span><br><span class="line"><span class="string">chown</span> <span class="bullet">-R</span> <span class="attr">mysql:mysql</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启MySQL服务，如果MySQL数据库启动失败，查看确认新的数据目录权限用户是否为mysql</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld_safe</span> <span class="bullet">--defaults-file=/etc/my.cnf</span> <span class="bullet">--user=mysql</span> <span class="string">&gt;/dev/null</span> <span class="string">&amp;</span></span><br><span class="line"><span class="string">时间预</span></span><br></pre></td></tr></table></figure>

<h3 id="时间预估"><a href="#时间预估" class="headerlink" title="时间预估"></a>时间预估</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件大小：185 GB</span><br><span class="line">备份时间：35 min</span><br><span class="line">传输时间：30 min   ---以100MB/s的传输速度为基准</span><br><span class="line">恢复时间：1h 10 min</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>XtraBackup</tag>
      </tags>
  </entry>
  <entry>
    <title>B+树索引</title>
    <url>/blog/2019/10/24/B-tree-indexe/</url>
    <content><![CDATA[<h2 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h2><h3 id="InnoDB记录存储方式"><a href="#InnoDB记录存储方式" class="headerlink" title="InnoDB记录存储方式"></a>InnoDB记录存储方式</h3><p>在 <code>InnoDB</code> 存储引擎中，数据页间通过 <code>双向链表</code> 进行连接，无需在物理结构上相连。数据页中的记录按主键值从小到大的顺序通过 <code>单向链表</code> 进行连接。每个数据页中的记录划分为几个组，每组 <code>最后</code> 一条记录的 <code>地址偏移量</code> 单独提取出来存储在靠近 <code>页</code> 的尾部，这些地址偏移量称为 <code>槽</code> ，这些 <code>槽</code> 组成了该数据页的 <code>页目录</code>。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/B%2Btree0.png" alt></p>
<h3 id="没有索引的查找"><a href="#没有索引的查找" class="headerlink" title="没有索引的查找"></a>没有索引的查找</h3><p>这里只讨论条件为对某列进行 <code>精准匹配</code> 的情况</p>
<p><strong>在同一页中查找</strong></p>
<ul>
<li>以主键为搜索条件查找</li>
</ul>
<p>在 <code>页目录</code> 中通过二分法快速定位至对应的 <code>槽</code> ,对 <code>槽</code> 所对应的分组的记录进行遍历。</p>
<ul>
<li>以其他列为搜索条件查找</li>
</ul>
<p>从 <code>最小记录</code> 开始遍历单列表链表中的每条记录，与搜索条件进行比对。</p>
<p><strong>在多个页中查找</strong></p>
<ul>
<li><p>定位到记录所在页：没有索引的情况下，无法快速定位到记录所在的页，只能从第一个列沿双向链表遍历所有的数据页。</p>
</li>
<li><p>在每个页中按照上述方式进行查找。</p>
</li>
</ul>
<h3 id="InnoDB索引方案"><a href="#InnoDB索引方案" class="headerlink" title="InnoDB索引方案"></a>InnoDB索引方案</h3><p>大部分情况下我们需要在很多数据页中查找记录，可以通过给数据页建立<code>目录项</code>（即 <code>索引</code>）的方式快速定位至记录所在的页，从而加快查询速度。</p>
<p><strong>以对 <code>主键</code> 建立索引为例</strong></p>
<p><strong>目录项的建立：</strong></p>
<p>通过建立目录项的形式快速定位到记录所在页需要：</p>
<ul>
<li>下一数据页中用户记录的主键值需大于上一数据页中用户记录的主键值。</li>
</ul>
<p>在对页记录进行增删改操作时，如向已满的数据页中插入记录，需通过 <code>页分裂</code> （将当前页面分裂成两个，将本页中的一些记录移动至新创建的页中）等操作确保上述状态一直成立。</p>
<ul>
<li>给所有的页建立一个目录项</li>
</ul>
<p>每个目录项包括两个部分：1.页的用户记录中 <code>最小</code> 的主键值      2.页号</p>
<p><strong>目录项的存储:</strong></p>
<p><code>InnoDB</code> 存储引擎复用存储用户记录的数据页来存储目录项，通过记录头信息的 <code>record_type</code> 属性将 <code>目录项记录</code> 与 <code>用户记录</code> 区分开。</p>
<p><code>record_type</code> 属性各取值含义：</p>
<ul>
<li><code>0</code> ：普通用户记录</li>
<li><code>1</code> ：目录项记录</li>
<li><code>2</code> ：最小记录</li>
<li><code>3</code> ：最大记录</li>
</ul>
<p>为数据页建立目录项，并将目录项放入数据页中的样子：</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/B%2Btree3.png" alt></p>
<p>页 <code>33</code>  存储更高级的目录项，页 <code>30</code> 、<code>32</code> 存储普通的<code>目录项</code> ,其余的数据页存储普通的用户记录，随着表中记录的增加目录的层级会逐渐增加。当根据主键值查找用户记录时，从上而下主要分为三步：</p>
<ul>
<li>确定<code>目录项记录</code>页</li>
<li>通过<code>目录项记录</code>页确定用户记录真实所在的页。</li>
<li>在真实存储用户记录的页中定位到具体的记录。</li>
</ul>
<p><code>目录项记录</code>与普通 <code>用户记录</code> 都使用同样的数据页存储，页的组成结构相同，都会为主键值生成 <code>页目录</code> ，从而在使用主键值查找时可使用二分法加快查询速度。 </p>
<p><code>目录项记录</code> 与普通 <code>用户记录</code> 的区别</p>
<ul>
<li>目录项记录 <code>record_type</code> 值为 <code>1</code>，普通用户记录 <code>record_type</code> 值为<code>0</code></li>
<li>目录项记录只有<code>主键值</code>、<code>页号</code>、如果是二级索引，还包括该索引所对应的列，用户记录由用户自定义，还包含<code>InnoDB</code> 添加的隐藏列。</li>
<li>存储<code>目录项记录</code>的页中的主键值最小的<code>目录项记录</code>的<code>min_rec_mask</code>值为<code>1</code>，其余别的记录的<code>min_rec_mask</code>值都是<code>0</code>。</li>
</ul>
<h2 id="MyISAM索引"><a href="#MyISAM索引" class="headerlink" title="MyISAM索引"></a>MyISAM索引</h2><p><code>InnoDB</code> 存储引擎中，索引即数据，<code>聚簇索引</code>那棵B+树的叶子节点中包含了所有完整的用户记录。而 <code>MyISAM</code> 索引方案虽仍使用树形结构，但是将索引和数据分开进行存储。</p>
<ul>
<li><p>表中的记录按照记录的插入顺序单独存储在<code>数据文件</code> 中。该文件并不划分为若干个数据页，所有的数据都在存储在该文件中，可以通过行号而快速访问到一条记录。同时 <code>MyISAM</code> 也需要记录头信息存储额外的数据。</p>
<p>记录使用<code>MyISAM</code>作为存储引擎在存储空间中的表示：</p>
</li>
</ul>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/B%2Btree2.png" alt></p>
<ul>
<li><code>索引</code> 信息另外存储到<code>索引文件</code>中。<code>MyISAM</code>会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是<code>主键值 + 行号</code>的组合。查找时需先通过 <code>索引</code> 找到相应的行号，再通过行号进行<code>回表</code> 操作找到相应的记录。<code>MyISAM</code> 中建立的所有索引都是二级索引。</li>
<li>如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和<code>InnoDB</code>中的索引差不多，不过在叶子节点处存储的是<code>相应的列 + 行号</code>。</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL是怎么运行的</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看磁盘容量、文件大小</title>
    <url>/blog/2019/10/18/Linux-view-space/</url>
    <content><![CDATA[<h2 id="查看磁盘使用情况"><a href="#查看磁盘使用情况" class="headerlink" title="查看磁盘使用情况"></a>查看磁盘使用情况</h2><p><code>df</code> 命令用于查看 <code>Linux</code> 服务器的文件系统的磁盘占用情况，默认单位KB。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询磁盘使用情况</span></span><br><span class="line"><span class="string">df</span> <span class="bullet">-h</span></span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/view-space0.png" alt></p>
<p>执行结果各列含义：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Filesystem</span>         <span class="string">磁盘分区</span></span><br><span class="line"><span class="string">Size</span>			   <span class="string">磁盘分区的大小</span></span><br><span class="line"><span class="string">Used</span>        	   <span class="string">已使用空间</span></span><br><span class="line"><span class="string">Avail</span>          	   <span class="string">可使用空间</span></span><br><span class="line"><span class="string">Use%</span>               <span class="string">已使用空间占百分比</span></span><br><span class="line"><span class="string">Mounted</span> <span class="string">on</span>         <span class="string">挂载点</span></span><br></pre></td></tr></table></figure>

<p><code>df</code> 命令的参数使用说明：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="string">a或--all</span>                      <span class="string">包含全部的文件系统；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">h或--human-readable</span>           <span class="string">以可读性较高的方式来显示信息；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">H或--si</span>                       <span class="string">与-h参数相同，但在计算时是以1000</span> <span class="string">Bytes为换算单位而非1024</span> <span class="string">Bytes；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">i或--inodes</span>                   <span class="string">显示inode的信息；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">k或--kilobytes</span>                <span class="string">指定区块大小为1024字节；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">l或--local</span>                    <span class="string">仅显示本地端的文件系统；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">m或--megabytes</span>                <span class="string">指定区块大小为1048576字节；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">P或--portability</span>              <span class="string">使用POSIX的输出格式；</span></span><br><span class="line"><span class="bullet">-</span><span class="string">T或--print-type</span>               <span class="string">显示文件系统的类型；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-no-sync</span>                      <span class="string">在取得磁盘使用信息前，不要执行sync指令，此为预设值；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-sync</span>                         <span class="string">在取得磁盘使用信息前，先执行sync指令；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-help</span>                         <span class="string">显示帮助；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-version</span>                      <span class="string">显示版本信息。</span></span><br><span class="line"><span class="bullet">-</span><span class="string">t&lt;文件系统类型&gt;</span>                 <span class="string">仅显示指定文件系统类型的磁盘信息；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-type=&lt;文件系统类型&gt;</span>         </span><br><span class="line"><span class="bullet">-</span><span class="string">x&lt;文件系统类型&gt;</span>                 <span class="string">不要显示指定文件系统类型的磁盘信息；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-block-size=&lt;区块大小&gt;</span>          <span class="string">以指定的区块大小来显示区块数目；</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-exclude-type=&lt;文件系统类型&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看文件和目录大小"><a href="#查看文件和目录大小" class="headerlink" title="查看文件和目录大小"></a>查看文件和目录大小</h2><p><code>du</code> 命令用于查看文件和目录大小</p>
<p>查看目录总大小，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看/data目录的总大小</span></span><br><span class="line"><span class="comment">#直接执行</span></span><br><span class="line"><span class="string">du</span> <span class="bullet">-sh</span> <span class="string">/data</span></span><br><span class="line"><span class="comment">#先进入/data目录下，再进行查看</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/data</span></span><br><span class="line"><span class="string">du</span> <span class="bullet">-sh</span></span><br></pre></td></tr></table></figure>

<p>查看 <code>/data</code> 目录下各个子目录的大小，包括子目录的子目录，但不包含 <code>/data</code> 下文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">du</span> <span class="bullet">-h</span></span><br></pre></td></tr></table></figure>

<p>如果要看 <code>/data</code> 目录下各个子目录的大小，包括子目录的子目录，且包含/data下文件，可以用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h *</span><br></pre></td></tr></table></figure>

<p>查看 <code>/data</code> 目录下各个子目录的大小，不包括子目录的子目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure>

<p>如果要看/data目录下各个子目录及子目录下文件的大小，需要使用-a参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -ah</span><br></pre></td></tr></table></figure>

<p><code>du</code> 命令参数使用说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a或-all                       输出所有文件的磁盘用量，不仅仅是目录</span><br><span class="line">-b或-bytes                     显示目录或文件大小时，以byte为单位。</span><br><span class="line">-c或--total                    除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</span><br><span class="line">-k或--kilobytes                以KB(1024bytes)为单位输出。</span><br><span class="line">-m或--megabytes                以MB为单位输出。</span><br><span class="line">-s或--summarize                仅显示总计，只列出最后加总的值。</span><br><span class="line">-h或--human-readable           以K，M，G为单位，提高信息的可读性。</span><br><span class="line">-x或--one-file-xystem          以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</span><br><span class="line">-L&lt;符号链接&gt;或                  显示选项中所指定符号链接的源文件大小。</span><br><span class="line">--dereference&lt;符号链接&gt; </span><br><span class="line">-S或--separate-dirs            显示个别目录的大小时，并不含其子目录的大小。</span><br><span class="line">-X&lt;文件&gt;或                      在&lt;文件&gt;指定目录或文件。</span><br><span class="line">--exclude-from=&lt;文件&gt; </span><br><span class="line">--exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</span><br><span class="line">-D或--dereference-args 显示指定符号链接的源文件大小。</span><br><span class="line">-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。</span><br><span class="line">-l或--count-links 重复计算硬件链接的文件。</span><br></pre></td></tr></table></figure>

<p>排序命令</p>
<p><code>sort</code> 可以用于将文件内容排序并输出，也可将某些查询命令的执行结果排序后输出</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">du</span> <span class="bullet">-sxh</span> <span class="string">/dir/*</span> <span class="string">| sort -rh | head -5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">du</span></span><br><span class="line"><span class="string">-s：仅显示总计</span></span><br><span class="line"><span class="string">-x：以一开始的文件系统为准，忽略其他不同文件系统的目录</span></span><br><span class="line"><span class="string">-h：以可读形式显示文件大小</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sort</span></span><br><span class="line"><span class="string">-r：倒序排序</span></span><br><span class="line"><span class="string">-h：以可读数字进行比较</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">head</span></span><br><span class="line"><span class="string">-n：打印文本的前n行</span></span><br></pre></td></tr></table></figure>

<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><strong>问题现象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">告警信息:Filesystem % Filesystem Space Used &gt; 90%  for 5 min.,当前值:90.06</span><br><span class="line">告警对象:data</span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong></p>
<p>告警显示 <code>/data</code> 下文件系统空间使用率大于90%持续5分钟，我们首先需要查找出是否有哪些大文件占用了过多的磁盘空间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询磁盘使用情况</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/view-space0.png" alt></p>
<p>多次执行查找最大文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ du -sxh /data/* | sort -rh | head -5</span><br><span class="line">339G	/data/mysql</span><br><span class="line">243G	/data/backup</span><br><span class="line">4.0K	/data/backup.sh</span><br><span class="line"></span><br><span class="line">$ du -sxh /data/mysql/* | sort -rh | head -5</span><br><span class="line">267G	/data/mysql/cosmo_im_1004</span><br><span class="line">1.1G	/data/mysql/mysql-binlog.000944</span><br><span class="line">1.1G	/data/mysql/mysql-binlog.000943</span><br><span class="line">1.1G	/data/mysql/mysql-binlog.000942</span><br><span class="line">1.1G	/data/mysql/mysql-binlog.000941</span><br><span class="line"></span><br><span class="line">$ du -sxh /data/mysql/cosmo_im_1004/* | sort -rh | head -5</span><br><span class="line">231G	/data/mysql/cosmo_im_1004/bns_pm_pokayoke.ibd</span><br><span class="line">3.8G	/data/mysql/cosmo_im_1004/bns_pm_scanscehistory.ibd</span><br><span class="line">3.5G	/data/mysql/cosmo_im_1004/bns_pm_scanhistory_month.ibd</span><br><span class="line">3.4G	/data/mysql/cosmo_im_1004/bns_io_pm_pokayoke.ibd</span><br><span class="line">3.0G	/data/mysql/cosmo_im_1004/bns_pm_operation.ibd</span><br></pre></td></tr></table></figure>

<p>最终，确定最大文件是 <code>/data/mysql/cosmo_im_1004/bns_pm_pokayoke.ibd</code></p>
]]></content>
  </entry>
  <entry>
    <title>InnoDB数据页结构</title>
    <url>/blog/2019/10/16/InnoDB-Date-Page-Structure/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>页</code> 是 <code>InnoDB</code> 管理存储空间的基本单位，一个页的大小一般是 <code>16KB</code>，InnoDB为了不同的目的而设计了不同类型的列，其中用于存放记录的页叫做 <code>数据页</code>，官方称这种存放记录的页为索引（<code>index</code>）页。</p>
<h2 id="数据页的划分"><a href="#数据页的划分" class="headerlink" title="数据页的划分"></a>数据页的划分</h2><p>一个 <code>InnoDB</code> 数据页大致被分为7个部分：</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/InnoDB_page_data1.png" alt></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">中文名</th>
<th align="center">占用空间大小</th>
<th align="center">简单描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>File Header</code></td>
<td align="center">文件头部</td>
<td align="center"><code>38</code>字节</td>
<td align="center">页的一些通用信息</td>
</tr>
<tr>
<td align="center"><code>Page Header</code></td>
<td align="center">页面头部</td>
<td align="center"><code>56</code>字节</td>
<td align="center">数据页专有的一些信息</td>
</tr>
<tr>
<td align="center"><code>Infimum + Supremum</code></td>
<td align="center">最小记录和最大记录</td>
<td align="center"><code>26</code>字节</td>
<td align="center">两个虚拟的行记录</td>
</tr>
<tr>
<td align="center"><code>User Records</code></td>
<td align="center">用户记录</td>
<td align="center">不确定</td>
<td align="center">实际存储的行记录内容</td>
</tr>
<tr>
<td align="center"><code>Free Space</code></td>
<td align="center">空闲空间</td>
<td align="center">不确定</td>
<td align="center">页中尚未使用的空间</td>
</tr>
<tr>
<td align="center"><code>Page Directory</code></td>
<td align="center">页面目录</td>
<td align="center">不确定</td>
<td align="center">页中的某些记录的相对位置</td>
</tr>
<tr>
<td align="center"><code>File Trailer</code></td>
<td align="center">文件尾部</td>
<td align="center"><code>8</code>字节</td>
<td align="center">校验页是否完整</td>
</tr>
</tbody></table>
<h3 id="User-Record"><a href="#User-Record" class="headerlink" title="User Record"></a>User Record</h3><p><code>记录</code> 按照指定的<code>行格式</code>存储到 <code>User Records</code> 的部分，但最初生成页时没有 <code>User Records</code> 部分，每插入一条记录，会从<code>Free Space</code> 中申请一个记录大小的空间划分至 <code>User Records</code>  部分。</p>
<p><strong>记录在页中的储存</strong></p>
<p>每个记录的头信息中都有一个<code>next_record</code>属性，从而使页中的所有记录串联成一个<code>单链表</code>。链表的头为<code>infimum</code> 记录（<strong>最小记录</strong>），尾为 <code>Supermum</code> 记录（<strong>最大记录</strong>）。</p>
<ul>
<li><code>next_record</code>:  表示按照主键值从小到大的顺序，从当前记录到下一条真实记录的<strong>地址偏移量</strong>。并且规定 <code>infimum</code> 记录（即<strong>最小记录</strong>）的下一条记录是本页中主键值最小的用户记录，主键值最大的用户记录的下一条记录是<code>Superemum</code> 记录。</li>
</ul>
<p>指定<code>c1</code>列为主键，行格式为<code>compact</code> 的表中记录行格式示意图：</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/InnoDB_page_data1.png" alt></p>
<p>以箭头代表 <code>next_record</code> 中的地址偏移量，记录的存储示意图:</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/InnoDB_page_data2.png" alt></p>
<h3 id="Page-Directory页目录"><a href="#Page-Directory页目录" class="headerlink" title="Page Directory页目录"></a>Page Directory页目录</h3><p>为了方便记录的查找，<code>InnoDB</code>设计了页目录<code>Page Directory</code>。</p>
<p><strong>页目录的制作过程：</strong></p>
<ul>
<li><p><code>InnoDB</code> 将页中所有正常的记录划分为若干个组。</p>
</li>
<li><p>每个组的最后一条记录的头信息中的 <code>n_owned</code> 表示该记录拥有的记录数，即该组内共拥有多少条记录。</p>
</li>
<li><p>每个组的最后一个记录的地址偏移量作为一个 <code>槽</code>，存储在靠近页尾部的地方，存放在<code>Page Directory</code> 中</p>
</li>
</ul>
<p><strong>每个分组记录条数的规定：</strong></p>
<ul>
<li>最小记录所在分组记录条数范围：1条</li>
<li>最大记录所在分组记录条数范围：1-8条</li>
<li>其余分组记录条数范围：4-8条</li>
</ul>
<p><strong>页中根据主键查找记录步骤：</strong></p>
<ul>
<li>通过二分法确定记录所在的槽</li>
<li>通过记录的 <code>next_record</code> 属性遍历该槽所在组中的所有的记录。</li>
</ul>
<h3 id="Page-Header页面头部"><a href="#Page-Header页面头部" class="headerlink" title="Page Header页面头部"></a>Page Header页面头部</h3><p><code>Page Header</code> 是<code>页</code> 结构的第二个部分，占固定的 <code>56</code> 个字节，专门存储各种状态信息。</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">占用空间大小</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>PAGE_N_DIR_SLOTS</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">在页目录中的槽数量</td>
</tr>
<tr>
<td align="center"><code>PAGE_HEAP_TOP</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">还未使用的空间最小地址，也就是说从该地址之后就是<code>Free Space</code></td>
</tr>
<tr>
<td align="center"><code>PAGE_N_HEAP</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">本页中的记录的数量（包括最小和最大记录以及标记为删除的记录）</td>
</tr>
<tr>
<td align="center"><code>PAGE_FREE</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">第一个已经标记为删除的记录地址（各个已删除的记录通过<code>next_record</code>也会组成一个单链表，这个单链表中的记录可以被重新利用）</td>
</tr>
<tr>
<td align="center"><code>PAGE_GARBAGE</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">已删除记录占用的字节数</td>
</tr>
<tr>
<td align="center"><code>PAGE_LAST_INSERT</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">最后插入记录的位置</td>
</tr>
<tr>
<td align="center"><code>PAGE_DIRECTION</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">记录插入的方向</td>
</tr>
<tr>
<td align="center"><code>PAGE_N_DIRECTION</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">一个方向连续插入的记录数量</td>
</tr>
<tr>
<td align="center"><code>PAGE_N_RECS</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">该页中记录的数量（不包括最小和最大记录以及被标记为删除的记录）</td>
</tr>
<tr>
<td align="center"><code>PAGE_MAX_TRX_ID</code></td>
<td align="center"><code>8</code>字节</td>
<td align="center">修改当前页的最大事务ID，该值仅在二级索引中定义</td>
</tr>
<tr>
<td align="center"><code>PAGE_LEVEL</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">当前页在B+树中所处的层级</td>
</tr>
<tr>
<td align="center"><code>PAGE_INDEX_ID</code></td>
<td align="center"><code>8</code>字节</td>
<td align="center">索引ID，表示当前页属于哪个索引</td>
</tr>
<tr>
<td align="center"><code>PAGE_BTR_SEG_LEAF</code></td>
<td align="center"><code>10</code>字节</td>
<td align="center">B+树叶子段的头部信息，仅在B+树的Root页定义</td>
</tr>
<tr>
<td align="center"><code>PAGE_BTR_SEG_TOP</code></td>
<td align="center"><code>10</code>字节</td>
<td align="center">B+树非叶子段的头部信息，仅在B+树的Root页定义</td>
</tr>
</tbody></table>
<h3 id="File-Header文件头部"><a href="#File-Header文件头部" class="headerlink" title="File Header文件头部"></a>File Header文件头部</h3><p><code>Page Header</code>是专门针对<code>数据页</code>记录的各种状态信息。<code>File Header</code>针对各种类型的页都通用，描述了一些针对各种页都通用的信息，占固定的 <code>38</code> 个字节。</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">占用空间大小</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>FIL_PAGE_SPACE_OR_CHKSUM</code></td>
<td align="center"><code>4</code>字节</td>
<td align="center">页的校验和（checksum值）</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_OFFSET</code></td>
<td align="center"><code>4</code>字节</td>
<td align="center">页号</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_PREV</code></td>
<td align="center"><code>4</code>字节</td>
<td align="center">上一个页的页号</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_NEXT</code></td>
<td align="center"><code>4</code>字节</td>
<td align="center">下一个页的页号</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_LSN</code></td>
<td align="center"><code>8</code>字节</td>
<td align="center">页面被最后修改时对应的日志序列位置（英文名是：Log Sequence Number）</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_TYPE</code></td>
<td align="center"><code>2</code>字节</td>
<td align="center">该页的类型</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_FILE_FLUSH_LSN</code></td>
<td align="center"><code>8</code>字节</td>
<td align="center">仅在系统表空间的一个页中定义，代表文件至少被刷新到了对应的<code>LSN</code>值</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</code></td>
<td align="center"><code>4</code>字节</td>
<td align="center">页属于哪个表空间</td>
</tr>
</tbody></table>
<ul>
<li><code>FIL_PAGE_TYPE</code></li>
</ul>
<p><code>FIL_PAGE_TYPE</code> 表示当前 <code>页</code>  的类型，我们说的存储数据的数据页的页类型为<code>FIL_PAGE_INDEX</code>。</p>
<table>
<thead>
<tr>
<th align="center">类型名称</th>
<th align="center">十六进制</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>FIL_PAGE_TYPE_ALLOCATED</code></td>
<td align="center">0x0000</td>
<td align="center">最新分配，还没使用</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_UNDO_LOG</code></td>
<td align="center">0x0002</td>
<td align="center">Undo日志页</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_INODE</code></td>
<td align="center">0x0003</td>
<td align="center">段信息节点</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_IBUF_FREE_LIST</code></td>
<td align="center">0x0004</td>
<td align="center">Insert Buffer空闲列表</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_IBUF_BITMAP</code></td>
<td align="center">0x0005</td>
<td align="center">Insert Buffer位图</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_TYPE_SYS</code></td>
<td align="center">0x0006</td>
<td align="center">系统页</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_TYPE_TRX_SYS</code></td>
<td align="center">0x0007</td>
<td align="center">事务系统数据</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_TYPE_FSP_HDR</code></td>
<td align="center">0x0008</td>
<td align="center">表空间头部信息</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_TYPE_XDES</code></td>
<td align="center">0x0009</td>
<td align="center">扩展描述页</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_TYPE_BLOB</code></td>
<td align="center">0x000A</td>
<td align="center">BLOB页</td>
</tr>
<tr>
<td align="center"><code>FIL_PAGE_INDEX</code></td>
<td align="center">0x45BF</td>
<td align="center">索引页，也就是我们所说的<code>数据页</code></td>
</tr>
</tbody></table>
<ul>
<li><code>FIL_PAGE_PREV</code>和<code>FIL_PAGE_NEXT</code></li>
</ul>
<p><code>FIL_PAGE_PREV</code>和<code>FIL_PAGE_NEXT</code>分别代表本页的上一个和下一个页的页号,这样通过建立一个双向链表将许多页串联起来，无需这些页在物理上真正连续。并不是所有页都有这两个属性，但数据页是有这两个属性的，所以所有数据页会组成一个双向链表。</p>
<h3 id="File-Trailer文件尾部"><a href="#File-Trailer文件尾部" class="headerlink" title="File Trailer文件尾部"></a>File Trailer文件尾部</h3><p>通用于所有类型的页，用于检测一个页是否完整（即将数据同步至磁盘或内存时有没有发生只同步一半的情况）。<code>File Trailer</code> 部分由 <code>8</code> 个字节组成，可分为两个部分：</p>
<ul>
<li><p>前4个字节：页的校验和</p>
<p>这个部分与<code>File Header</code>中的校验和相应，两者不同代表同步中间出现问题。</p>
</li>
<li><p>后4个字节：页面被最后修改时对应的日志序列位置（LSN）</p>
<p>这个部分也是为了校验页的完整性的，首部和尾部的<code>LSN</code>值校验不成功，说明同步的过程中出现了问题。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL是怎样运行的</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL字符集</title>
    <url>/blog/2019/10/11/MySQL-character-set/</url>
    <content><![CDATA[<p>简介</p>
<p>字符集：计算机底层是以二进制数进行计算和存储的，而我们要在数据库存储的数据则多是字符串的形式。为了将字符串存储至计算机中就需要建立字符与二进制数据的映射关系。将字符映射成一个二进制数据的过程称为<strong>编码</strong>，将二进制数据映射成字符的过程称为<strong>解码</strong>。<strong>字符集</strong>就是为了描述某个字符范围的<strong>编码规则</strong>而抽象出的概念。</p>
<p>比较规则：为了比较两个字符的大小而制定的规则，同一种字符集可以有许多种不同的比较规则。</p>
<p>常用字符集：</p>
<ul>
<li><p><code>ASCII</code>字符集</p>
<p>共收录128个字符，包括空格、标点符号、数字、大小写字母和一些不可见字符，可用一个字节进行编码。</p>
</li>
<li><p><code>ISO 8859-1</code>字符集</p>
<p>别名 <code>latin1</code> ,共收录256个字符，在<code>ASCII</code>字符集的基础上又扩充了128个西欧常用字符(包括德法两国的字母)，</p>
</li>
<li><p><code>utf8</code>字符集</p>
<p>收录地球上能想到的所有字符，而且还在不断扩充。该字符集兼容<code>ASCII</code>字符集，采用<code>变长编码</code>方式，编码一个字符需要使用1～4个字节，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;L&apos; -&gt;  01001100（十六进制：0x4C）</span><br><span class="line">&apos;啊&apos; -&gt;  111001011001010110001010（十六进制：0xE5958A）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士： 其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查哈～ MySQL中并不区分字符集和编码方案的概念，所以后边唠叨的时候把utf8、utf16、utf32都当作一种字符集对待。</p>
</blockquote>
</li>
</ul>
<p>对于同一个字符，不同字符集也可能有不同的编码方式。比如对于汉字<code>&#39;我&#39;</code>来说，<code>ASCII</code>字符集中根本没有收录这个字符，<code>utf8</code>和<code>gb2312</code>字符集对汉字<code>我</code>的编码方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utf8编码：111001101000100010010001 (3个字节，十六进制表示是：0xE68891)</span><br><span class="line">gb2312编码：1100111011010010 (2个字节，十六进制表示是：0xCED2)</span><br></pre></td></tr></table></figure>

<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容 <code>ASCII</code> 字符集，采用变长编码方式，编码一个字符需要使用 <code>1～4</code> 个字节，比方说这样：</p>
]]></content>
  </entry>
  <entry>
    <title>pt-archiver</title>
    <url>/blog/2019/09/26/pt-archiver/</url>
    <content><![CDATA[<h2 id="pt-archiver简介"><a href="#pt-archiver简介" class="headerlink" title="pt-archiver简介"></a>pt-archiver简介</h2><p><code>pt-archiver</code> 是 <code>Percona</code> 官方提供的归档工具，用于归档大型表中的记录到另一个表或文件。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>​    工作上需要删除或者归档一张大表时，用<code>pt-archiver</code>可以很好的满足要求，其不仅可以归档数据，还有删除、导出到文件等功能。并且在主从架构当中，可以兼顾从库（一个或则多个）进行归档，避免归档、删除数据时候压力太大，造成从库的延迟。该工具可以在低影响，正向性的情况下小批量小批量的将旧数据取出并归档，而不会影响OLTP查询。也可以将数据插入到另一个表中，两表不必位于同一服务器上。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>归档到操作系统文件</li>
<li>归档到同实例不同库下的表（<strong>tips</strong>：归档操作前，目标表要存在）</li>
<li>归档到不同实例下的表（<strong>tips</strong>：归档操作前，目标表要存在）</li>
</ul>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#至少需要指定--dest,--file,--purge 其中的一个。</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-dest</span>              <span class="string">指定要归档到的，兼容DSN选项</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-purge</span>             <span class="string">清除而不是归档，删除source数据库的相关匹配记录。</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-where</span> <span class="string">'id&lt;3000'</span>	<span class="string">设置操作条件</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-limit</span> <span class="number">10000</span>	    <span class="string">每次取1000行数据给pt-archive处理</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-txn-size</span> <span class="number">1000</span>	    <span class="string">设置1000行为一个事务提交一次</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-progress</span> <span class="number">5000</span>	    <span class="string">每处理5000行输出一次处理信息</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-statistics</span>	    <span class="string">结束的时候给出统计信息：开始的时间点，结束的时间点，查询的行数，归档的行数，删除的行数，以及各个阶段消耗的总的时间和比例，便于以此进行优化。只要不加上--quiet，默认情况下pt-archive都会输出执行过程的</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-file</span>              <span class="string">要归档到的文件，使用'/路径/文件名'的格式，如：--file</span> <span class="string">'/var/log/archive/%Y-%m-%d-%D.%t'</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-charset=UTF8</span>      <span class="string">指定字符集为UTF8</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-bulk-delete</span>       <span class="string">批量删除source上的旧数据</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-local</span>             <span class="string">不把optimize或analyze操作写入到binlog里面（防止造成主从延迟巨大）</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-no-delete</span>         <span class="string">不删除原来的数据，若不指定此参数，所有处理完成后，都会清理原表中的数据</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-statistics</span>        <span class="string">收集并打印时间统计信息。</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-dry-run</span>           <span class="string">打印查询并退出而不做任何事情。</span></span><br></pre></td></tr></table></figure>

<p>注：批量操作和单条操作提交性能有近10倍的差距。</p>
<h2 id="pt-archiver使用"><a href="#pt-archiver使用" class="headerlink" title="pt-archiver使用"></a>pt-archiver使用</h2><p><strong>注意：</strong> 归档的表大小写敏感，表必须至少有一个索引（否则报错：Cannot find an ascendable index in table ）。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>1、将表数据导出到文件中，不删除源数据（–no-delete，默认删除）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt-archiver --source u=root,p=Haier@123,h=127.0.0.1,P=3306,D=employees,t=test --file=/tmp/date --where=&quot;id&lt;10&quot; --no-delete --no-safe-auto-increment --progress=100 --statistics</span><br></pre></td></tr></table></figure>

<p>2、按条件删除表数据，不导出和迁移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt-archiver --source u=root,p=Haier@123,h=127.0.0.1,P=3306,D=employees,t=new_test --purge --where=&quot;id=1&quot; --no-safe-auto-increment --progress=100 --statistics</span><br></pre></td></tr></table></figure>

<p>2、指定条件归档，源表删除，批量（每1000个插入提交一次）,如果源表不删除，加上–no-delete即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将matomo_log_link_visit_action表中的数据安条件归档至matomo_log_link_visit_action_history表中</span></span><br><span class="line"><span class="string">pt-archiver</span> <span class="bullet">--source</span> <span class="string">h=10.138.228.231,P=3306,u=sre,p='xxx',D=matomo,t=matomo_log_link_visit_action</span> <span class="bullet">--charset=utf8</span> <span class="bullet">--dest</span> <span class="string">h=10.138.228.231,P=3306,u=sre,p='xxx',D=matomo,t=matomo_log_link_visit_action_history</span> <span class="bullet">--where</span> <span class="string">"server_time &lt; '2019-01-01'"</span> <span class="bullet">--limit</span> <span class="number">1000</span> <span class="bullet">--commit-each</span> <span class="bullet">--bulk-insert</span> <span class="bullet">--no-version-check</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># h=10.138.228.231               -- 数据库实例地址</span></span><br><span class="line"><span class="comment"># P=3306                         -- 数据库实例端口</span></span><br><span class="line"><span class="comment"># u=sre                          -- 数据库实例用户</span></span><br><span class="line"><span class="comment"># p=xxx                          -- 数据库实例用户密码</span></span><br><span class="line"><span class="comment"># D=matomo                       -- 数据库实例数据库</span></span><br><span class="line"><span class="comment"># t=matomo_log_link_visit_action -- 数据库实例表名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --source                       -- 指定要被归档的数据源</span></span><br><span class="line"><span class="comment"># --charset=utf8                 -- 使用的字符集，需与表字符集一致</span></span><br><span class="line"><span class="comment"># --file                         -- 指定目标操作系统文件名</span></span><br><span class="line"><span class="comment"># --dest                         -- 指定归档到的目标表</span></span><br><span class="line"><span class="comment"># --where "id &gt; 3008"            -- 指定 where 过滤条件，过滤出要归档的数据</span></span><br><span class="line"><span class="comment"># --limit 1000                   -- 每条语句读取和归档的数据行数，默认是 1</span></span><br><span class="line"><span class="comment"># --commit-each                  -- 每次获取和归档数据后，commit提交</span></span><br><span class="line"><span class="comment"># --no-version-check             -- 不做版本检查</span></span><br><span class="line"><span class="comment"># --bulk-insert                  -- 批量插入数据，会自动启用 --bulk-delete --commit-each，每次插入行数通过--limit 选项指定</span></span><br><span class="line"><span class="comment"># --statistics                   -- 显示 pt-archiver 本次操作的统计信息。</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>pt-query-digest</title>
    <url>/blog/2019/09/26/pt-query-digest/</url>
    <content><![CDATA[<h2 id="pt-query-digest简介"><a href="#pt-query-digest简介" class="headerlink" title="pt-query-digest简介"></a>pt-query-digest简介</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><code>pt-query-digest</code>提供慢日志分析功能，可以统计出查询执行时间、次数、占比等，并把分析结果输出到文件中，然后借助分析结果找出问题进行优化。</p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt-query-digest [OPTIONS] [FILES] [DSN]</span><br><span class="line">--create-review-table    #当使用--review参数把分析结果输出到表中时，如果没有表就自动创建。</span><br><span class="line">--create-history-table   #当使用--history参数把分析结果输出到表中时，如果没有表就自动创建。</span><br><span class="line">--filter                 #对输入的慢查询按指定的字符串进行匹配过滤后再进行分析</span><br><span class="line">--limit                  #限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%位置截止。</span><br><span class="line">--host                   #mysql服务器地址</span><br><span class="line">--user                   #mysql用户名</span><br><span class="line">--password               #mysql用户密码</span><br><span class="line">--history                #将分析结果保存到表中，分析结果比较详细，下次再使用--history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。</span><br><span class="line">--review                 #将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用--review时，如果存在相同的语句分析，就不会记录到数据表中。</span><br><span class="line">--output                 #分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-anon，一般使用report，以便于阅读。</span><br><span class="line">--since                  #从什么时间开始分析，值为字符串，可以是指定的某个”yyyy-mm-dd [hh:mm:ss]”格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。</span><br><span class="line">--until                  #截止时间，配合—since可以分析一段时间内的慢查询。</span><br></pre></td></tr></table></figure>

<h2 id="pt-query-digest使用"><a href="#pt-query-digest使用" class="headerlink" title="pt-query-digest使用"></a>pt-query-digest使用</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>分析慢查询日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt-query-digest  slow.log &gt; slow_report.log</span><br></pre></td></tr></table></figure>

<p>分析最近12个小时内的查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt-query-digest --since=12h  slow.log &gt; slow_report.log</span><br></pre></td></tr></table></figure>

<p> 分析最近指定范围内的查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt-query-digest dzspdb-slow.log --since &apos;2019-08-25 10:00:00&apos; --until &apos;2019-09-25 10:00:00&apos; &gt; dzsp_slow_report.log</span><br></pre></td></tr></table></figure>

<h3 id="输出结果分析"><a href="#输出结果分析" class="headerlink" title="输出结果分析"></a>输出结果分析</h3><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>总体统计结果</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">执行日志分析的用户时间、系统时间、占用物理内存大小，占用虚拟内存大小</span></span><br><span class="line"><span class="comment">#7.7s user time, 90ms system time, 47.24M rss, 241.67M vsz</span></span><br><span class="line"><span class="string">工具执行时间</span></span><br><span class="line"><span class="comment">#Current date: Fri Sep 27 09:51:51 2019</span></span><br><span class="line"><span class="string">运行pt-query-digest的主机名</span></span><br><span class="line"><span class="comment">#Hostname: console</span></span><br><span class="line"><span class="string">被分析的文件</span></span><br><span class="line"><span class="comment">#Files: slow_query.log</span></span><br><span class="line"><span class="string">total：语句总数量、unique:唯一语句的数量、QPS:每秒查询率、concurrency:并发数</span></span><br><span class="line"><span class="comment"># Overall: 7.61k total, 891 unique, 0.00 QPS, 0.02x concurrency __________</span></span><br><span class="line"><span class="string">查询执行的时间范围</span></span><br><span class="line"><span class="comment"># Time range: 2018-12-21T14:35:34 to 2019-09-27T07:08:57</span></span><br><span class="line">     <span class="string">属性</span>              <span class="string">总计</span>     <span class="string">最小</span>     <span class="string">最大</span>    <span class="string">平均</span>     <span class="number">95</span><span class="string">%</span>  <span class="string">标准方差</span>   <span class="string">中值</span></span><br><span class="line"><span class="comment"># Attribute          total     min     max     avg     95%  stddev  median</span></span><br><span class="line"><span class="comment"># ============     ======= ======= ======= ======= ======= ======= =======</span></span><br><span class="line"><span class="comment"># Exec time        515373s      5s   6210s     68s    246s    216s     14s</span></span><br><span class="line"><span class="comment"># Lock time           808s       0    163s   106ms     5ms      3s   761us</span></span><br><span class="line"><span class="comment"># Rows sent        152.88M       0  15.14M  20.57k   1.39k 291.76k    0.99</span></span><br><span class="line"><span class="comment"># Rows examine     182.52G       0 867.98M  24.55M  72.18M  44.34M   3.68M</span></span><br><span class="line"><span class="comment"># Query size        30.21M       6  66.00k   4.06k  18.47k   5.67k  793.42</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Exec</span> <span class="string">time</span>          <span class="string">语句执行时间</span></span><br><span class="line"><span class="string">Lock</span> <span class="string">time</span>          <span class="string">锁占用时间</span> </span><br><span class="line"><span class="string">Rows</span> <span class="string">sent</span>          <span class="string">发送到客户端的行数</span></span><br><span class="line"><span class="string">Rows</span> <span class="string">examine</span>       <span class="string">select语句扫描行数</span></span><br><span class="line"><span class="string">Query</span> <span class="string">size</span>         <span class="string">查询的字符数</span></span><br><span class="line"><span class="string">unique</span>             <span class="string">唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询</span></span><br><span class="line"><span class="number">95</span><span class="string">%</span>                <span class="string">把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值</span></span><br><span class="line"><span class="string">median</span>             <span class="string">中位数，把所有值从小到大排列，位置位于中间那个数</span></span><br></pre></td></tr></table></figure>

<h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>查询分组统计结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Profile</span><br><span class="line"># Rank Query ID                    Response time     Calls R/Call    V/M   Item</span><br><span class="line"># ==== =========================== ================= ===== ========= ===== =====</span><br><span class="line">#    1 0xFFF66E9B3D962FA319C806... 211420.4504 41.0%   260  813.1556 25.32 ROLLBACK</span><br><span class="line">#    2 0x73AFBACFEBF3942B3B02FB...  30241.2515  5.9%   156  193.8542  0.26 INSERT SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT UNION SELECT d_etl_odsgvs_faglflext_all tdmetl.odsgvs_faglflext_all</span><br><span class="line">#    3 0xE1EA5439ED76CBFAA1C5A3...  24517.0767  4.8%     4 6129.2692  1.79 SELECT v_gvs_zgvs_bseg_edw</span><br><span class="line">#    4 0xE562308914915E2720E128...  21322.3718  4.1%  1282   16.6321  8.55 SELECT tdmetl.gvs_zgvs_bseg_edw</span><br><span class="line">#    5 0x0159EC63419857F0EC9D5B...  17472.3139  3.4%    71  246.0889  1.03 SELECT </span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">Rank            所有语句的排名，默认按查询时间降序排列，通过--order-by指定</span><br><span class="line">Query ID        语句的ID，（去掉多余空格和文本字符，计算hash值）</span><br><span class="line">Response        总的响应时间，单位s</span><br><span class="line">time            该查询在本次分析中总的时间占比</span><br><span class="line">calls           执行次数，即本次分析总共有多少条这种类型的查询语句</span><br><span class="line">R/Call          平均每次执行的响应时间</span><br><span class="line">V/M             响应时间Variance-to-mean(方差/平均值)的比率</span><br><span class="line">Item            查询对象</span><br></pre></td></tr></table></figure>

<h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><p>每一种查询的详细统计结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Query 1: 0.00 QPS, 0.05x concurrency, ID 0xFFF66E9B3D962FA319C8068B5C1997CD at byte 3105049</span><br><span class="line"># This item is included in the report because it matches --limit.</span><br><span class="line"># Scores: V/M = 25.32</span><br><span class="line"># Time range: 2019-02-15T18:37:47 to 2019-04-03T21:18:48</span><br><span class="line"># Attribute    pct   total     min     max     avg     95%  stddev  median</span><br><span class="line"># ============ === ======= ======= ======= ======= ======= ======= =======</span><br><span class="line"># Count          3     260</span><br><span class="line"># Exec time     41 211420s    322s   1078s    813s   1013s    143s    793s</span><br><span class="line"># Lock time      0       0       0       0       0       0       0       0</span><br><span class="line"># Rows sent      0       0       0       0       0       0       0       0</span><br><span class="line"># Rows examine   0       0       0       0       0       0       0       0</span><br><span class="line"># Query size     0   2.03k       8       8       8       8       0       8</span><br><span class="line"># String:</span><br><span class="line"># Databases    tdmetl</span><br><span class="line"># Hosts        10.138.225.51 (140/53%), 10.138.225.43 (69/26%)... 3 more</span><br><span class="line"># Users        tdmsetldev</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   1us</span><br><span class="line">#  10us</span><br><span class="line"># 100us</span><br><span class="line">#   1ms</span><br><span class="line">#  10ms</span><br><span class="line"># 100ms</span><br><span class="line">#    1s</span><br><span class="line">#  10s+  ################################################################</span><br><span class="line">rollback\G</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">查询的详细统计结果，最上面的表格列出了执行次数、最大、最小、平均、95%等各项目的统计。</span><br><span class="line">ID：查询的ID号，和查询分组统计结果的Query ID对应</span><br><span class="line">Databases：数据库名</span><br><span class="line">Users：各个用户执行的次数（占比）</span><br><span class="line">Query_time distribution ：查询时间分布, 长短体现区间占比</span><br><span class="line">Tables：查询中涉及到的表，此例中未涉及</span><br><span class="line">Explain： SQL语句  此例中未涉及</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>pt-slave-restart</title>
    <url>/blog/2019/09/26/pt-slave-restart/</url>
    <content><![CDATA[<h2 id="pt-slave-restart简介"><a href="#pt-slave-restart简介" class="headerlink" title="pt-slave-restart简介"></a>pt-slave-restart简介</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><code>pt-slave-restart</code>是一个在MySQL主从复制出错后，可以监控跳过特定错误并自动重启主从复制的工具。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><code>pt-slave-restart</code>监控一个或者多个MySQL主从复制的slave，并试图跳过引起错误的语句。它以指数变化的休眠时间智能地检查 slave。你可以指定要跳过的错误，然后运行slave一直到一个确定的binlog位置。</p>
<p><code>pt-slave-restart</code>一旦检测到slave有错误就会打印一行信息。默认情况下该信息包括：timestamp、connection information、relay_log_file、relay_log_pos、last_errno。可以使用<code>--verbose</code>选项添加更多信息，也可以使用<code>--quiet</code>选项阻止所有输出。</p>
<p><strong>sleep</strong></p>
<p><code>pt-slave-restart</code> 在检测slave的过程中智能的进行休眠，所以当前的休眠时间是会改变的，设定策略：</p>
<ul>
<li>初始的sleep 时间通过<code>--sleep</code>给出。</li>
<li>若检测发现错误，将sleep时间改成之前的一半。</li>
<li>若检测没有发现错误，将sleep时间改成之前的两倍。</li>
<li>通过<code>--min-sleep</code>和<code>--max-sleep</code>参数限定sleep时间的下界和上界。</li>
<li>一旦检测到错误，<code>pt-slave-restart</code>假定接下来很可能发生另一个错误,因此它将比较当前的sleep时间和初始的sleep时间，选取更小的值作为新的sleep时间。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从Percona Toolkit 2.2.8版本起，pt-slave-restart开始支持由MySQL 5.6.5版本引入的GTID复制（保证了每个在主库上提交的事务在集群中有一个唯一的ID）。</span><br><span class="line">注意：</span><br><span class="line">当采用多线程复制（slave_parallel_workers &gt; 0）时，pt-slave-restart不能跳过事务。pt-slave-restart不能确定GTID事件是哪个特定slave线程执行失败的事务。</span><br><span class="line">默认行为是跳过来自master的下一个事务。由于每个服务器都有它自己的UUID，因此写可以来自不同的服务器。</span><br><span class="line">参考–master-uuid。</span><br></pre></td></tr></table></figure>

<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">-host=xxx</span> <span class="bullet">--user=xxx</span> <span class="bullet">--password=xxx</span>   <span class="comment">#连接实例信息，缩写-h xxx -u xxx -p xxx</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-port</span>               <span class="comment">#连接的端口号，缩写 -P</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-help</span>               <span class="comment">#显示帮助并退出</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-always</span>             <span class="comment">#永不停止slave线程，启用后pt-slave-restart将不允许手动停止从服务器</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-ask-pass</span>           <span class="comment">#替换`-p`命令，不显示密码输入</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-error-numbers</span>      <span class="comment">#指定要跳过哪些错误，可用`,`进行分隔</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-error-text</span>         <span class="comment">#根据错误信息进行匹配跳过</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-log`</span>               <span class="comment">#输出到文件</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-recurse</span>            <span class="comment">#在主端执行，监控从端</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-runtime</span>  <span class="string">`</span>         <span class="comment">#工具执行多长时间后退出：默认秒， m=minute,h=hours,d=days</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-slave-user</span>         <span class="comment">#从库账号，在主库运行时使用</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-slave-password`</span>    <span class="comment">#从库密码，在主库运行时使用</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-skip-count</span>         <span class="comment">#一次跳过错误的个数，默认为1</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-master-uuid</span>        <span class="comment">#级联复制的时候，指定跳过上级或者上上级事务的错误</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-until-master</span>       <span class="comment">#到达指定的master_log_pos,file位置后停止，格式：”file:pos“</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-until-relay</span>        <span class="comment">#和上面一样，但根据relay_log的位置来停止</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-sleep</span>              <span class="comment">#检查slave间隔的初始sleep秒数，默认为1</span></span><br></pre></td></tr></table></figure>

<h2 id="pt-slave-restart使用"><a href="#pt-slave-restart使用" class="headerlink" title="pt-slave-restart使用"></a>pt-slave-restart使用</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#跳过指定错误</span></span><br><span class="line"><span class="string">pt-slave-restart</span> <span class="bullet">--user=root</span> <span class="bullet">--ask-pass</span> <span class="string">socket=/data/mysql/3304/tmp/mysql3304.sock</span>  <span class="bullet">--error-numbers=1062</span></span><br><span class="line"><span class="comment">#后台跳过错误</span></span><br><span class="line"><span class="string">nohup</span> <span class="string">./pt-slave-restart</span> <span class="bullet">-usre</span> <span class="bullet">-p'sre@@p$i'</span>  <span class="string">&gt; myout.file 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SQL概述</title>
    <url>/blog/2019/09/26/MySQL-SQL/</url>
    <content><![CDATA[<h3 id="SQL发展历史"><a href="#SQL发展历史" class="headerlink" title="SQL发展历史"></a>SQL发展历史</h3><ul>
<li>1974年—–由Boyce和Chamberlin提出，当时称SEQUEL。</li>
<li>1979年—–ORACLE公司首先提供商用的SQL，IBM公司在DB2 和SQL/DS数据库系统中也实现了SQL。</li>
<li>1986年—–美国国家标准化组织ANSI宣布采用SQL作为数据库工业标准（ANSI X3. 135-1986），后为国际标准化组织（ISO）采纳为国际标准。</li>
<li>1989年—–美国ANSI采纳在ANSI X3.135-1989报告中定义的关系数据库管理系统的SQL标准语言，称为ANSI SQL 89， 该标准替代ANSI X3.135-1986版本。</li>
<li>目前，所有主要的关系数据库管理系统支持某些形式的SQL， 大部分数据库打算遵守ANSI SQL89标准。</li>
</ul>
<h3 id="SQL特点"><a href="#SQL特点" class="headerlink" title="SQL特点"></a>SQL特点</h3><p><strong>优势：</strong></p>
<ul>
<li>SQL语言集数据查询、数据操纵、数据定义和数据控制功能于一体。</li>
<li>面向集合的描述性非过程化语言。</li>
<li>功能强，效率高，类似自然语言，简单易学易维护。</li>
<li>自含式语言，又是嵌入式语言。可独立使用，也可嵌入到宿主语言中。</li>
</ul>
<p><strong>劣势：</strong></p>
<p>由于<code>SQL</code>是非过程性语言，即大多数语句都是独立执行的，与上下文无关，而绝大部分应用都是一个完整的过程，所以用<code>SQL</code>完全实现这些功能是很困难的。解决方案：</p>
<ul>
<li>扩充<code>SQL</code>，在<code>SQL</code>中引入过程性结构；</li>
<li>把<code>SQL</code>嵌入到高级语言中，以便一起完成一个完整的应用。</li>
</ul>
<h3 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h3><p><code>SQL</code>语言共分为四大类：数据查询语言<code>DQL</code>，数据操纵语言<code>DML</code>，数据定义语言<code>DDL</code>，数据控制语言<code>DCL</code>。</p>
<h4 id="数据查询语言DQL-Data-Query-Language"><a href="#数据查询语言DQL-Data-Query-Language" class="headerlink" title="数据查询语言DQL(Data Query Language)"></a>数据查询语言DQL(Data Query Language)</h4><p>数据查询语言DQL基本结构是由<code>SELECT</code>子句，<code>FROM</code>子句，<code>WHERE</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#子句组成的查询块：</span><br><span class="line">SELECT &lt;字段名表&gt;</span><br><span class="line">FROM &lt;表或视图名&gt;</span><br><span class="line">WHERE &lt;查询条件&gt;</span><br></pre></td></tr></table></figure>

<h4 id="数据操纵语言DML-Data-Manipulation-Language"><a href="#数据操纵语言DML-Data-Manipulation-Language" class="headerlink" title="数据操纵语言DML(Data Manipulation Language)"></a>数据操纵语言DML(Data Manipulation Language)</h4><p>数据操纵语言<code>DML</code>主要有三种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 插入：INSERT</span><br><span class="line">2) 更新：UPDATE</span><br><span class="line">3) 删除：DELETE</span><br></pre></td></tr></table></figure>

<h4 id="数据定义语言DDL-Data-Definition-Language"><a href="#数据定义语言DDL-Data-Definition-Language" class="headerlink" title="数据定义语言DDL(Data Definition Language)"></a>数据定义语言DDL(Data Definition Language)</h4><p>数据定义语言<code>DDL</code>用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建表/视图/索引/同义词/簇</span><br><span class="line">CREATE TABLE/VIEW/INDEX/SYN/CLUSTER</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><code>DDL</code>操作是隐性提交的！不能<code>rollback</code></p>
<h4 id="数据控制语言DCL-Data-Control-Language"><a href="#数据控制语言DCL-Data-Control-Language" class="headerlink" title="数据控制语言DCL(Data Control Language)"></a>数据控制语言DCL(Data Control Language)</h4><p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授权</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">MySQLGRANT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回退到某一点，</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">ROLLBACK</span> <span class="string">[WORK]</span> <span class="string">TO</span> <span class="string">[SAVEPOINT]：</span></span><br><span class="line"><span class="comment">#回滚--ROLLBACK，回滚命令使数据库状态回到上次最后提交的状态。</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">ROLLBACK;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line"><span class="string">COMMIT</span> <span class="string">[WORK]</span></span><br></pre></td></tr></table></figure>

<p>在数据库的插入、删除和修改操作时，只有当事务在提交到数据库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看到所做的事情，别人只有在最后提交完成后才可以看到。</p>
<p><strong>提交数据类型</strong></p>
<p>提交数据有三种类型：显式提交、隐式提交及自动提交</p>
<p>显式提交</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用COMMIT命令直接完成的提交为显式提交。</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">COMMIT;；</span></span><br></pre></td></tr></table></figure>

<p>隐式提交</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL命令间接完成的提交为隐式提，命令包含：</span></span><br><span class="line"><span class="string">ALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，</span></span><br><span class="line"><span class="string">DROP，EXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME</span></span><br></pre></td></tr></table></figure>

<p>自动提交</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当AUTOCOMMIT设置为ON时，在插入、修改、删除语句执行后，系统将自动进行提交。</span></span><br><span class="line"><span class="comment">#设置AUTOCOMMIT为ON:</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">SET</span> <span class="string">AUTOCOMMIT</span> <span class="string">ON；</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MySQL常见问题</title>
    <url>/blog/2019/09/26/MySQL-common-errors/</url>
    <content><![CDATA[<h2 id="插入数据库报错"><a href="#插入数据库报错" class="headerlink" title="插入数据库报错"></a>插入数据库报错</h2><h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>执行包含中文的插入语句报错</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向employees的test表中插入数据</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">insert</span> <span class="string">into</span> <span class="string">test(name,age,address)</span> <span class="string">values('xujinliang',32,'山东省青岛市');</span></span><br><span class="line"><span class="comment">#报错信息</span></span><br><span class="line"><span class="string">ERROR</span> <span class="number">1366</span> <span class="string">(HY000):</span> <span class="string">Incorrect</span> <span class="string">string</span> <span class="attr">value:</span> <span class="string">'\xE5\xB1\xB1\xE4\xB8\x9C...'</span> <span class="string">for</span> <span class="string">column</span> <span class="string">'address'</span> <span class="string">at</span> <span class="string">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>查看<code>test</code>表的字符集</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mysql&gt;</span> <span class="string">show</span> <span class="string">create</span> <span class="string">table</span> <span class="string">test;</span></span><br><span class="line"><span class="string">| Table | Create Table                                                                   </span></span><br><span class="line"><span class="string">| test  | CREATE TABLE `test` (</span></span><br><span class="line"><span class="string">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">  `name` char(20) CHARACTER SET latin1 NOT NULL,</span></span><br><span class="line"><span class="string">  `age` tinyint(3) unsigned NOT NULL DEFAULT '0',</span></span><br><span class="line"><span class="string">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="string">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="string">  `address` varchar(50) CHARACTER SET latin1 DEFAULT NULL,</span></span><br><span class="line"><span class="string">  PRIMARY KEY (`id`)</span></span><br><span class="line"><span class="string">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 |</span></span><br></pre></td></tr></table></figure>

<p><code>address</code>字段的默认字符集为<code>latin1</code></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>将 <code>address</code>字段的字符集修改为<code>utf8</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ALTER</span> <span class="string">TABLE</span> <span class="string">test</span> <span class="string">CHANGE</span> <span class="string">address</span> <span class="string">address</span> <span class="string">VARCHAR(50)</span> <span class="string">CHARACTER</span> <span class="string">SET</span> <span class="string">utf8</span> <span class="string">COLLATE</span> <span class="string">utf8_general_ci;</span></span><br></pre></td></tr></table></figure>

<p>重新执行插入语句</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mysql&gt;</span> <span class="string">insert</span> <span class="string">into</span> <span class="string">test(name,age,address)</span> <span class="string">values('xujinliang',32,'山东省青岛市');</span></span><br><span class="line"><span class="string">Query</span> <span class="string">OK,</span> <span class="number">1</span> <span class="string">row</span> <span class="string">affected</span> <span class="string">(0.00</span> <span class="string">sec)</span></span><br></pre></td></tr></table></figure>

<p>插入成功。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>MySQL</code>插入中文字符到数据库报错：ERROR 1366 (HY000): Incorrect string value: ‘\xE5\xB1\xB1\xE4\xB8\x9C…’ for column </p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><strong>创建数据库和数据表时设置数据库的默认编码`utf8</strong>`</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line"><span class="string">CREATE</span> <span class="string">DATABASE</span> <span class="string">test</span> <span class="string">DEFAULT</span> <span class="string">CHARACTER</span> <span class="string">SET</span> <span class="string">utf8</span> <span class="string">COLLATE</span> <span class="string">utf8_general_ci;</span></span><br><span class="line"><span class="comment">#创建数据表</span></span><br><span class="line"><span class="string">CREATE</span> <span class="string">TABLE</span> <span class="string">`test`</span> <span class="string">(</span></span><br><span class="line">	<span class="string">`id`</span> <span class="string">BIGINT(20)</span> <span class="string">UNSIGNED</span> <span class="string">NOT</span> <span class="literal">NULL</span> <span class="string">AUTO_INCREMENT,</span></span><br><span class="line">	<span class="string">`name`</span> <span class="string">CHAR(20)</span> <span class="string">NOT</span> <span class="literal">NULL</span><span class="string">,</span></span><br><span class="line">	<span class="string">`age`</span> <span class="string">TINYINT(3)</span> <span class="string">UNSIGNED</span> <span class="string">NOT</span> <span class="literal">NULL</span> <span class="string">DEFAULT</span> <span class="string">'0'</span><span class="string">,</span></span><br><span class="line">	<span class="string">`gmt_create`</span> <span class="string">DATETIME</span> <span class="string">NOT</span> <span class="literal">NULL</span> <span class="string">DEFAULT</span> <span class="string">CURRENT_TIMESTAMP,</span></span><br><span class="line">	<span class="string">`gmt_modified`</span> <span class="string">DATETIME</span> <span class="string">NOT</span> <span class="literal">NULL</span> <span class="string">DEFAULT</span> <span class="string">CURRENT_TIMESTAMP</span> <span class="string">ON</span> <span class="string">UPDATE</span> <span class="string">CURRENT_TIMESTAMP,</span></span><br><span class="line">	<span class="string">`address`</span> <span class="string">VARCHAR(50)</span> <span class="literal">NULL</span> <span class="string">DEFAULT</span> <span class="literal">NULL</span><span class="string">,</span></span><br><span class="line">	<span class="string">PRIMARY</span> <span class="string">KEY</span> <span class="string">(`id`)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">ENGINE=InnoDB</span></span><br><span class="line"><span class="string">DEFAULT</span> <span class="string">CHARSET=latin1</span></span><br><span class="line"><span class="string">AUTO_INCREMENT=4;</span></span><br></pre></td></tr></table></figure>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><h5 id="查看修改字符集语句"><a href="#查看修改字符集语句" class="headerlink" title="查看修改字符集语句"></a>查看修改字符集语句</h5><p><strong>查看字符集：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看mysql的字符集</span></span><br><span class="line"><span class="string">show</span> <span class="string">variables</span> <span class="string">where</span> <span class="string">Variable_name</span> <span class="string">like</span> <span class="string">'%char%'</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某一个数据库字符集(enterprises为数据库)</span></span><br><span class="line"><span class="string">show</span> <span class="string">create</span> <span class="string">database</span> <span class="string">enterprises;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某一个数据表字符集：(employees为数据表)</span></span><br><span class="line"><span class="string">show</span> <span class="string">create</span> <span class="string">table</span> <span class="string">employees;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改字符集：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改mysql的字符集</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">character_set_client=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">character_set_connection=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">character_set_database=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">character_set_results=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">character_set_server=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">character_set_system=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">collation_connection=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">collation_database=utf8;</span></span><br><span class="line"><span class="string">mysql&gt;</span> <span class="string">set</span> <span class="string">collation_server=utf8;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据库enterprises的字符集：</span></span><br><span class="line"><span class="string">alter</span> <span class="string">database</span> <span class="string">enterprises</span> <span class="string">character</span> <span class="string">set</span> <span class="string">utf8;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据表employees的字符集：</span></span><br><span class="line"><span class="string">alter</span> <span class="string">table</span> <span class="string">employees</span> <span class="string">character</span> <span class="string">set</span> <span class="string">utf8;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改字段的字符集</span></span><br><span class="line"><span class="string">alter</span> <span class="string">table</span> <span class="string">test</span> <span class="string">change</span> <span class="string">address</span> <span class="string">address</span> <span class="string">varchar(50)</span> <span class="string">character</span> <span class="string">set</span> <span class="string">utf8</span> <span class="string">collate</span> <span class="string">utf8_general_ci;</span></span><br></pre></td></tr></table></figure>

<h5 id="MySQL中的字符集转换过程"><a href="#MySQL中的字符集转换过程" class="headerlink" title="MySQL中的字符集转换过程"></a>MySQL中的字符集转换过程</h5><p><code>MSQL Server</code>收到请求时将请求数据从<code>character_set_client</code>转换为<code>character_set_connection</code>；</p>
<p>进行内部操作前将请求数据从<code>character_set_connection</code>转换为内部操作字符集，其确定方法如下：</p>
<ul>
<li><p>使用每个<strong>数据字段</strong>的<code>CHARACTER SET</code>设定值；</p>
</li>
<li><p>若上述值不存在，则使用对应<strong>数据表</strong>的<code>DEFAULT CHARACTER SET</code>设定值(MySQL扩展，非SQL标准)；</p>
</li>
<li><p>若上述值不存在，则使用对应<strong>数据库</strong>的<code>DEFAULT CHARACTER SET</code>设定值；</p>
</li>
<li><p>若上述值不存在，则使用<code>character_set_server</code>设定值。</p>
</li>
</ul>
<h2 id="找不到mysql-sock文件"><a href="#找不到mysql-sock文件" class="headerlink" title="找不到mysql.sock文件"></a>找不到mysql.sock文件</h2><h3 id="问题现象-1"><a href="#问题现象-1" class="headerlink" title="问题现象"></a>问题现象</h3><p>使用<code>mysql</code>、<code>mysqladmin</code>、<code>mysqldump</code>等命令管理数据库时，报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/data/mysql-tdds/mysql.sock&apos; (2)</span><br></pre></td></tr></table></figure>

<h3 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h3><p>下面通过三种方式连接数据库，观察提示的错误信息</p>
<p>1、直接使用用户名和密码，不加主机主机名参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql-s init.d]# mysql -u root -p123456</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/data/mysql-tdds/mysql.sock&apos; (2)</span><br></pre></td></tr></table></figure>

<p>2、使用带了主机名 <code>localhost</code>参数的<code>mysql -h localhost</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql-s init.d]# mysql -h localhost -u root -p123456</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/data/mysql-tdds/mysql.sock&apos; (2)</span><br></pre></td></tr></table></figure>

<p>3、使用带了主机名<code>127.0.0.1</code>参数的<code>mysql -h 127.0.0.1</code> 命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql-s ~]# mysql -h 127.0.0.1 -u root -p123456</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</span><br></pre></td></tr></table></figure>

<p>　可以发现，前两种连接方式都报错： Can’t connect to local MySQL server through socket ‘/data/mysql-tdds/mysql.sock’。而第三种方式连接是不会产生标题中的错误的（这里报错是由于密码错误）。</p>
<p>​    当使用<code>localhost</code>作为主机名参数连接 <code>mysql</code> 服务端时 ( 未设置 -h 参数，服务器会默认使用 <code>localhost</code> 作为主机名)，<code>mysql</code> 客户端会认为是连接本机，会使用 UNIX socket 方式 （比 TCP/IP 方式使用 IP:端口 的效率更高），尝试以<code>socket</code>文件进行连接。此时根据<code>mysql</code> 的配置文件 <code>my.cnf</code>未找到相应的<code>socket</code>文件就会引发该错误。</p>
<p>​    当使用 <code>127.0.0.1</code> 作为主机名参数连接 <code>mysql</code> 服务端时，<code>mysql</code> 服务器接收到的来源主机是 <code>127.0.0.1</code>, 此时是通过  TCP/IP  方式使用 IP:端口  进行连接，所以未引发此错误。</p>
<p><strong>准备工作</strong></p>
<p>1、查看<code>mysql</code>服务是否在运行</p>
<p>​    因为<code>socket</code> 文件是由<code>mysql</code>服务运行时创建的，当报错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘***’ (2)时首先要确认<code>mysql</code> 服务是否正在运行中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、查看端口是否打开</span><br><span class="line">$ lsof -i:3306</span><br><span class="line">COMMAND     PID  USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME</span><br><span class="line">mysqld     2446 mysql   24u  IPv6    22257      0t0  TCP *:mysql (LISTEN)</span><br><span class="line"></span><br><span class="line">#2、mysqld服务是否正在运行</span><br><span class="line">$ service mysqld status</span><br><span class="line"> SUCCESS! MySQL running (2446)</span><br><span class="line"># 查看mysql进程是否存在</span><br><span class="line">$ ps -ef|grep mysqld</span><br></pre></td></tr></table></figure>

<p>2、确定<code>socket</code> 文件的正确位置</p>
<p>　如果<code>mysql</code>服务正常运行，则产生此错误的原因只剩下<code>socket</code>文件路径不正确了，我们可以查看 <code>mysql</code> 服务进程或使用<code>find</code>命令来确定<code>socket</code>文件的正确路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看mysql进程中是否显示有mysql的socket文件地址</span><br><span class="line">$ ps -ef|grep mysqld</span><br><span class="line">root      20688      1  0 14:27 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql3306/ --pid-file=/data/mysql3306//cosmoim-d-jt01.pid</span><br><span class="line">mysql     21290  20688 22 14:27 ?        00:01:51 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql3306 --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql3306/error.log --pid-file=/data/mysql3306//cosmoim-d-jt01.pid --socket=/data/mysql3306/mysql.sock --port=3306</span><br><span class="line"></span><br><span class="line">#使用find命令查看socket文件地址</span><br><span class="line">$ find / -name &apos;*.sock&apos;</span><br><span class="line">/data/mysql3306/mysql.sock</span><br></pre></td></tr></table></figure>

<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>　修改<code>MySQL</code>的配置文件，在配置文件中添加 <code>[client]</code> 选项和 <code>[mysqld]</code> 选项，并使这两个选项下的<code>socket</code>参数值所指向的<code>socket</code>文件路径完全一致。如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port                      = 3306</span><br><span class="line">socket                    = /data/mysql-tdds/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port                      = 3306</span><br><span class="line">socket                    = /data/mysql-tdds/mysql.sock</span><br></pre></td></tr></table></figure>

<p>修改完成后重启<code>mysql</code>服务,启动时使用<code>mysqld_safe</code> 启动，并指定参数文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  /usr/local/mysql-tdds/bin/mysqld_safe --defaults-file=/etc/my-tdds.cnf --user=mysql &amp;</span><br></pre></td></tr></table></figure>

<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>通过查看<code>mysql</code> 进程或<code>find</code> 命令查找到连接数据库时使用 -S 指定socket文件地址进行连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql-s init.d]# find / -name &apos;*.sock&apos;</span><br><span class="line">/tmp/mysql.sock</span><br><span class="line">[root@mysql-s init.d]# mysql -u root -pHaier@123 -S/tmp/mysql.sock</span><br></pre></td></tr></table></figure>

<h4 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h4><p>建立一个软连接将正确的<code>socket</code>文件，链接到提示错误的<code>socket</code>文件路径位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql-s mysql-tdds]# ls  /data/mysql-tdds/mysql.sock</span><br><span class="line">ls: 无法访问/data/mysql-tdds/mysql.sock: 没有那个文件或目录</span><br><span class="line">[root@mysql-s mysql-tdds]# ln -s /tmp/mysql.sock /data/mysql-tdds/mysql.sock</span><br><span class="line">[root@mysql-s mysql-tdds]# ls  /data/mysql-tdds/mysql.sock</span><br><span class="line">/data/mysql-tdds/mysql.sock</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>pt-online-schema-change</title>
    <url>/blog/2019/09/25/pt-online-schema-change/</url>
    <content><![CDATA[<h2 id="pt-online-schema-change简介"><a href="#pt-online-schema-change简介" class="headerlink" title="pt-online-schema-change简介"></a>pt-online-schema-change简介</h2><p><code>pt-online-schema-change</code>是<code>percona</code>公司开发的一个工具，可以在<code>percona-toolkit</code>包中找到，它可以在线修改表结构。<code>pt-online-schema-change</code>通过改进原生<code>ddl</code>的方式，达到不锁表在线修改表结构。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在线数据库的维护中，涉及到研发修改表结构的情况，修改一些小表影响很小，而修改大表时，往往影响业务的正常运转。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul>
<li>创建一个和要执行 <code>alter</code>操作的表一样的新的空表结构(是alter之前的结构)</li>
<li>在新表执行<code>alter table</code> 语句（速度应该很快）</li>
<li>在原表上加三个触发器，DELETE/UPDATE/INSERT，将原表中要执行的语句也在新表中执行</li>
<li>以一定块大小从原表拷贝数据到临时表，拷贝过程中通过原表上的触发器在原表进行的写操作都会更新到新建的临时表</li>
<li><code>Rename</code> 原表到old表中，在把临时表Rename为原表</li>
<li>如果有参考该表的外键，根据<code>alter-foreign-keys-method</code>参数的值，检测外键相关的表，做相应设置的处理</li>
<li>默认最后将旧原表删除</li>
</ul>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>pt-online-schema-change --help</code> 可以查看参数的使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--host=xxx --user=xxx --password=xxx   连接实例信息，缩写-h xxx -u xxx -p xxx</span><br><span class="line">--user=        连接mysql的用户名</span><br><span class="line">--password=    连接mysql的密码</span><br><span class="line">--host=        连接mysql的地址</span><br><span class="line">P=3306         连接mysql的端口号</span><br><span class="line">D=             连接mysql的库名</span><br><span class="line">t=             连接mysql的表名</span><br><span class="line">--alter        修改表结构的语句</span><br><span class="line">--dry-run      创建和修改新表，但不真正执行，可看到生成的执行句，了解其执行步骤与细节，和--print配合最佳</span><br><span class="line">--execute      执行修改表结构 ，--dry-run与--execute必须指定一个，二者相互排斥</span><br><span class="line">--charset=utf8 使用utf8编码，避免中文乱码</span><br><span class="line">--no-version-check  不检查版本，在阿里云服务器中一般加入此参数，否则会报错</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>--alter</code></p>
<p>结构变更语句，不需要 <code>ALTER TABLE</code>关键字。与原始ddl一样可以指定多个更改，用逗号分隔。</p>
<p>1、绝大部分情况下表上需要有主键或唯一索引，因为工具在运行当中为了保证新表也是最新的，需要旧表上创建 DELETE和UPDATE 触发器，同步到新表的时候有主键会更快。个别情况是，当alter操作就是在c1列上建立主键时，DELETE触发器将基于c1列。</p>
<p>2、子句不支持<code>rename</code> 去给表重命名。<code>RENAME INDEX old_index_name TO new_index_name</code></p>
<p>3、<code>alter</code>命令原表就不支持给索引重命名，需要先<code>drop</code>再<code>add</code>，在<code>pt-osc</code>也一样。<br>但给字段重命名，千万不要<code>drop-add</code>，整列数据会丢失，使用<code>change col1 col1_new type constraint</code>（保持类型和约束一致，否则相当于修改 <code>column type</code>，不能<code>online</code>）</p>
<p>4、子句如果是<code>add column</code>并且定义了<code>not null</code>，那么必须指定<code>default</code>值，否则会失败。</p>
<p>5、要删除外键（名<code>fk_foo</code>），使用工具的时候外键名要加下划线，比如<code>--alter &quot;DROP FOREIGN KEY _fk_foo&quot;</code></p>
</li>
</ul>
<h2 id="pt-online-schema-change使用"><a href="#pt-online-schema-change使用" class="headerlink" title="pt-online-schema-change使用"></a>pt-online-schema-change使用</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="添加表字段"><a href="#添加表字段" class="headerlink" title="添加表字段"></a>添加表字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加字段id</span><br><span class="line">[root@mysql-s ~]# pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1  --alter &quot;ADD COLUMN id int default 0&quot; D=employees,t=salaries --print --execute</span><br><span class="line">No slaves found.  See --recursion-method if host mysql-s has slaves.</span><br><span class="line">Not checking slave lag because no slaves were found and --check-slave-lag was not specified.</span><br><span class="line">Operation, tries, wait:</span><br><span class="line">  analyze_table, 10, 1</span><br><span class="line">  copy_rows, 10, 0.25</span><br><span class="line">  create_triggers, 10, 1</span><br><span class="line">  drop_triggers, 10, 1</span><br><span class="line">  swap_tables, 10, 1</span><br><span class="line">  update_foreign_keys, 10, 1</span><br><span class="line">Altering `employees`.`salaries`...</span><br><span class="line">Creating new table...                    #创建新表</span><br><span class="line">CREATE TABLE `employees`.`_salaries_new` (</span><br><span class="line">  `emp_no` int(11) NOT NULL,</span><br><span class="line">  `salary` int(11) NOT NULL,</span><br><span class="line">  `from_date` date NOT NULL,</span><br><span class="line">  `to_date` date NOT NULL,</span><br><span class="line">  `f_id` int(12) unsigned NOT NULL DEFAULT &apos;6&apos;,</span><br><span class="line">  PRIMARY KEY (`emp_no`,`from_date`),</span><br><span class="line">    CONSTRAINT `__salaries_ibfk_1` FOREIGN KEY (`emp_no`) REFERENCES `employees` (`emp_no`) ON DELETE CASCADE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">Created new table employees._salaries_new OK.</span><br><span class="line">Altering new table...                    #使用ddl修改表结构</span><br><span class="line">ALTER TABLE `employees`.`_salaries_new` ADD COLUMN id int default 0</span><br><span class="line">Altered `employees`.`_salaries_new` OK.</span><br><span class="line">2019-09-25T21:05:17 Creating triggers... #在原表上加三个触发器，DELETE/UPDATE/INSERT</span><br><span class="line">2019-09-25T21:05:17 Created triggers OK.   </span><br><span class="line">2019-09-25T21:05:17 Copying approximately 2837536 rows...  #分块拷贝数据到新表</span><br><span class="line">INSERT LOW_PRIORITY IGNORE INTO `employees`.`_salaries_new` (`emp_no`, `salary`, `from_date`, `to_date`, `f_id`) SELECT `emp_no`, `salary`, `from_date`, `to_date`, `f_id` FROM `employees`.`salaries` FORCE INDEX(`PRIMARY`) WHERE ((`emp_no` &gt; ?) OR (`emp_no` = ? AND `from_date` &gt;= ?)) AND ((`emp_no` &lt; ?) OR (`emp_no` = ? AND `from_date` &lt;= ?)) LOCK IN SHARE MODE /*pt-online-schema-change 40847 copy nibble*/</span><br><span class="line">SELECT /*!40001 SQL_NO_CACHE */ `emp_no`, `emp_no`, `from_date` FROM `employees`.`salaries` FORCE INDEX(`PRIMARY`) WHERE ((`emp_no` &gt; ?) OR (`emp_no` = ? AND `from_date` &gt;= ?)) ORDER BY `emp_no`, `from_date` LIMIT ?, 2 /*next chunk boundary*/</span><br><span class="line">2019-09-25T21:05:28 Copied rows OK.</span><br><span class="line">2019-09-25T21:05:28 Analyzing new table...</span><br><span class="line">2019-09-25T21:05:28 Swapping tables...       #交换新旧表</span><br><span class="line">RENAME TABLE `employees`.`salaries` TO `employees`.`_salaries_old`, `employees`.`_salaries_new` TO `employees`.`salaries`</span><br><span class="line">2019-09-25T21:05:28 Swapped original and new tables OK.</span><br><span class="line">2019-09-25T21:05:28 Dropping old table...   #删除旧表</span><br><span class="line">DROP TABLE IF EXISTS `employees`.`_salaries_old`</span><br><span class="line">2019-09-25T21:05:28 Dropped old table `employees`.`_salaries_old` OK.</span><br><span class="line">2019-09-25T21:05:28 Dropping triggers...</span><br><span class="line">DROP TRIGGER IF EXISTS `employees`.`pt_osc_employees_salaries_del`</span><br><span class="line">DROP TRIGGER IF EXISTS `employees`.`pt_osc_employees_salaries_upd`</span><br><span class="line">DROP TRIGGER IF EXISTS `employees`.`pt_osc_employees_salaries_ins`</span><br><span class="line">2019-09-25T21:05:28 Dropped triggers OK.</span><br><span class="line">Successfully altered `employees`.`salaries`.</span><br></pre></td></tr></table></figure>

<h4 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h4><p>修改表字段类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将id改为varchar类型</span><br><span class="line">pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1 --alter &quot;</span><br><span class="line">MODIFY COLUMN id varchar(11) NOT NULL DEFAULT &apos;0&apos;; &quot;  D=employees,t=salaries --print --execute</span><br></pre></td></tr></table></figure>

<p>修改表字段名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将id改为n_id</span><br><span class="line">pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1 --alter &quot;CHANGE id n_id varchar(12) NOT NULL &quot;  D=employees,t=salaries --print --execute</span><br><span class="line">报错：</span><br><span class="line">The tool should handle this correctly, but you should test it first because if it fails the renamed columns&apos; data will be lost!  Specify --no-check-alter to disable this check and perform the --alter.</span><br><span class="line"></span><br><span class="line">#解决：指定--no check alter以禁用此检查并执行--alter。</span><br><span class="line">pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1 --alter &quot;CHANGE id n_id varchar(12) NOT NULL &quot;  D=employees,t=salaries --print --execute --no-check-alter</span><br></pre></td></tr></table></figure>

<h4 id="添加删除索引"><a href="#添加删除索引" class="headerlink" title="添加删除索引"></a>添加删除索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加索引</span><br><span class="line">pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1  --alter &quot;ADD INDEX idx_n_id(n_id)&quot; D=employees,t=salaries --print --execute</span><br><span class="line">#删除索引</span><br><span class="line">pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1  --alter &quot;DROP INDEX idx_n_id&quot; D=employees,t=salaries --print --execute</span><br></pre></td></tr></table></figure>

<h4 id="修改主键"><a href="#修改主键" class="headerlink" title="修改主键"></a>修改主键</h4><p>思路：<br>1.先删除原表的主键<br>2.再添加<code>n_id</code> 列，并设置为主键<br>3.把原表的主键作为新表的<code>unique key</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用pt-osc去修改删除主键，务必同时添加原主键为 UNIQUE KEY，否则很有可能导致性能问题</span><br><span class="line">pt-online-schema-change --user=root --password=Haier@123 --host=127.0.0.1  --alter &quot;DROP PRIMARY KEY,add column n_id int(20) NOT NULL AUTO_INCREMENT primary key,add unique key uk_id_name(id,name)&quot; D=employees,t=new_test --print --execute --no-check-alter</span><br></pre></td></tr></table></figure>

<h3 id="报错案例"><a href="#报错案例" class="headerlink" title="报错案例"></a>报错案例</h3><p><strong>1、报错语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The table `db_name`.`table_name` has triggers.  This tool needs to create its own triggers, so the table cannot already have triggers.</span><br></pre></td></tr></table></figure>

<p>原表存在触发器，原表不能存在触发器，否则不适用。</p>
<p><strong>2、报错语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The tool should handle this correctly, but you should test it first because if it fails the renamed columns&apos; data will be lost!  Specify --no-check-alter to disable this check and perform the --alter.</span><br></pre></td></tr></table></figure>

<p>指定<code>--no check alter</code>以禁用此检查并执行<code>--alter</code>。</p>
<p><strong>3、报错语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The new table `employees`.`_new_test_new` does not have a PRIMARY KEY or a unique index which is required for the DELETE trigger.</span><br><span class="line">Please check you have at least one UNIQUE and NOT NULLABLE index.</span><br></pre></td></tr></table></figure>

<p>源表没有主键，无法创建<code>DELETE</code>触发器</p>
]]></content>
  </entry>
  <entry>
    <title>修改数据库名</title>
    <url>/blog/2019/09/24/mysql-DatabaseName/</url>
    <content><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>1、查看<code>MySQL</code>数据库进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps -ef|grep mysql</span><br></pre></td></tr></table></figure>

<p>记录下<code>socket</code>地址</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/20190924223130.png" alt></p>
<p>2、下载脚本<code>rename_db.sh</code> 至<code>tmp</code>目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /tmp</span><br><span class="line">$ wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/rename_db.sh</span><br></pre></td></tr></table></figure>

<p>给脚本赋权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod +x /tmp/rename_db.sh</span><br></pre></td></tr></table></figure>

<p>3、执行脚本，修改数据库名</p>
<p>将<code>user</code>数据库改名为<code>user-original</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./rename_db.sh -o users -n user-original -u root -p Haier@123 -s /data/mysql3100/mysql.sock</span><br><span class="line"># -o    修改前数据库名称</span><br><span class="line"># -n    修改后数据库名称</span><br><span class="line"># -u    连接MySQL数据库用户名</span><br><span class="line"># -p    连接MySQL数据库密码</span><br><span class="line"># -s    MySQL数据库socket地址</span><br><span class="line"># 注：选项参数的格式必须是-d val，而不能是中间没有空格的-dval。</span><br><span class="line"># 新的数据库中只有表，视图仍是原数据库名，需要重建试图。</span><br></pre></td></tr></table></figure>

<p>4、根据需要删除原数据库</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>1、创建需要改成新名的数据库。</p>
<p>2、mysqldump导出要改名的数据库。</p>
<p>3、删除原来的旧库。</p>
<p>这种方法是安全的，但是如果数据量大，会很耗时</p>
]]></content>
  </entry>
  <entry>
    <title>案例3 · 主从复制中断</title>
    <url>/blog/2019/09/20/case3-build-slave/</url>
    <content><![CDATA[<h2 id="binlog日志缺失"><a href="#binlog日志缺失" class="headerlink" title="binlog日志缺失"></a>binlog日志缺失</h2><h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/build-slave.png" alt></p>
<p><strong>登录从库查看主从状态</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 10.135.22.70</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3308</span><br><span class="line">                Connect_Retry: 10</span><br><span class="line">              Master_Log_File: mysql-bin.001935</span><br><span class="line">          Read_Master_Log_Pos: 6587</span><br><span class="line">               Relay_Log_File: relay-log.001487</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.001935</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table: test.%</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 6587</span><br><span class="line">              Relay_Log_Space: 107</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1236</span><br><span class="line">                Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &apos;Could not find first log file name in binary log index file&apos;</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br></pre></td></tr></table></figure>

<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>报错信息显示主从库信息不同步，从库中显示同步到主库的<code>binlog</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Master_Log_File: mysql-bin.001935</span><br></pre></td></tr></table></figure>

<p>查看主库的二进制日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show binary logs;</span><br><span class="line">+------------------+------------+</span><br><span class="line">| Log_name         | File_size  |</span><br><span class="line">+------------------+------------+</span><br><span class="line">| mysql-bin.001949 | 1073742073 |</span><br><span class="line">| mysql-bin.001950 | 1073742120 |</span><br><span class="line">| mysql-bin.001951 | 1073859355 |</span><br><span class="line">| mysql-bin.001952 | 1074054892 |</span><br><span class="line">| mysql-bin.001953 | 1075243641 |</span><br><span class="line">| mysql-bin.001954 | 1074801420 |</span><br><span class="line">| mysql-bin.001955 | 1075257243 |</span><br><span class="line">| mysql-bin.001956 |  619405162 |</span><br><span class="line">| mysql-bin.001957 | 1073742189 |</span><br><span class="line">| mysql-bin.001958 |  185824333 |</span><br><span class="line">+------------------+------------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>可以发现主库中无<code>mysql-bin.001935</code> ,主库<code>binlog</code>缺失，需要重新搭建从库。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、主从服务器，<a href="https://mino-yn.github.io/blog/2019/09/12/Master-slave-replication/">安装 Xtrabackup</a></p>
<p>2、配置<a href="https://mino-yn.github.io/blog/2019/08/23/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%88%E5%8D%95%E5%90%91%EF%BC%89/">主从互信</a></p>
<p>3、备份主库</p>
<p><strong>注意：</strong>要根据服务器的磁盘空间选择备份位置 ,防止占用过多磁盘空间，影响业务。这里选择<code>/home/data/backup</code>目录 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ innobackupex --defaults-file=/usr/local/mysqlmzjh/data/mzjh/my.cnf --socket=/tmp/mysql-mzjh.sock --user=&apos;sre&apos; --password=&apos;sre@@p$i&apos; --no-timestamp /home/data/backup</span><br></pre></td></tr></table></figure>

<p>4、传输至从库</p>
<p>一般可直接存放在MySQL数据文件目录下，注意磁盘空间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scp -r /home/data/backup/* root@10.135.22.71:/usr/local/mysqlmzjh/data/backup</span><br></pre></td></tr></table></figure>

<p>5、恢复数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysqladmin  -S /tmp/mysql-mzjh.sock -usre -p&apos;sre@@p$i&apos; shutdown</span><br><span class="line">$ innobackupex --apply-log /usr/local/mysqlmzjh/data/backup</span><br><span class="line">$ cd /usr/local/mysqlmzjh/data/</span><br><span class="line">$ mv mzjh mzjh_bak</span><br><span class="line">$ mkdir mzjh</span><br><span class="line">$ innobackupex --defaults-file=/usr/local/mysqlmzjh/data/my.cnf -usre -p&apos;sre@@p$i&apos; --copy-back /usr/local/mysqlmzjh/data/mzjh</span><br><span class="line">$ chown -R mysql:mysql mysql</span><br><span class="line">$ /usr/local/mysqlmzjh//bin/mysqld_safe --defaults-file==/usr/local/mysqlmzjh/data/mzjh/my.cnf --socket=/tmp/mysql-mzjh.sock --user=mysql &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>

<p>6、建立复制关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat xtrabackup_binlog_info</span><br><span class="line">mysql-binlog.000297	900834433</span><br><span class="line"></span><br><span class="line"># 配置同步</span><br><span class="line">CHANGE MASTER TO </span><br><span class="line">MASTER_HOST=&apos;10.135.22.70&apos;,</span><br><span class="line">MASTER_USER=&apos;repl&apos;,</span><br><span class="line">MASTER_PASSWORD=&apos;Changeme_123&apos;,</span><br><span class="line">MASTER_PORT=3308,</span><br><span class="line">MASTER_LOG_FILE=&apos;mysql-binlog.000297&apos;, </span><br><span class="line">MASTER_LOG_POS=900834433,</span><br><span class="line">MASTER_CONNECT_RETRY=10;</span><br><span class="line"></span><br><span class="line"># 开启同步</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line"></span><br><span class="line"># 主库检查参数</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.001958 | 32629730 |              |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line"></span><br><span class="line"># 从库检查参数</span><br><span class="line">show slave status\G</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<h2 id="主库空间问题，日志被截断"><a href="#主库空间问题，日志被截断" class="headerlink" title="主库空间问题，日志被截断"></a>主库空间问题，日志被截断</h2><h3 id="问题现象-1"><a href="#问题现象-1" class="headerlink" title="问题现象"></a>问题现象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 10.138.22.10</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.006130</span><br><span class="line">          Read_Master_Log_Pos: 733347710</span><br><span class="line">               Relay_Log_File: dzspdb2-relay-bin.014727</span><br><span class="line">                Relay_Log_Pos: 253</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.006130</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">                           .....</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1236</span><br><span class="line">                Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &apos;binlog truncated in the middle of event; consider out of disk space on master; the first event &apos;mysql-bin.006130&apos; at 733347710, the last event read from &apos;./mysql-bin.006130&apos; at 733347710, the last byte read from &apos;./mysql-bin.006130&apos; at 733347840.&apos;</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br></pre></td></tr></table></figure>

<h3 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h3><p>该错误和主库的空间和 <code>sync_binlog</code> 配置有关，当主库 <code>sync_binlog = N</code> 不等于 1 且磁盘空间满时，MySQL 每写 N 次 <code>binlog</code>，系统才会同步到磁盘，但是由于存储日志的磁盘空间满而导致 MySQL 没有将日志完全写入磁盘，<code>binlog event</code> 被截断，从库读取该 <code>binlog</code> 时就会报错 <code>binlog truncated in the middle of event</code>。</p>
<ul>
<li>当 <code>sync_binlog</code> 的数值为0，像操作系统刷其他文件的机制一样，<code>MySQL</code> 的不会同步到磁盘中去而是依赖操作系统来刷新二进制日志。</li>
<li>当 <code>sync_binlog = N（N&gt; 0）</code>时，<code>MySQL</code> 在每写 <code>n</code> 次二进制日志二进制日志时，会使用 <code>fdatasync ()</code> 函数将它的写二进制日志二进制日志同步到磁盘中去。</li>
</ul>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>在从库重新指向到主库下一个可用的 <code>binlog</code> 并且从初始化的位置开始：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">stop</span> <span class="string">slave;</span></span><br><span class="line"><span class="string">change</span> <span class="string">master</span> <span class="string">to</span> <span class="string">master_log_file</span> <span class="string">=</span> <span class="string">'mysql-bin.006131'</span><span class="string">,</span> <span class="string">master_log_pos</span> <span class="string">=</span> <span class="number">4</span><span class="string">;</span></span><br><span class="line"><span class="string">start</span> <span class="string">slave;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql.server启动脚本阅读</title>
    <url>/blog/2019/09/20/mysql-server/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>MySQL</code>在类<code>Unix</code>系统上安装时会包含一个<code>mysql.server</code>启动脚本，其主要作用就是为了方便启动和关闭 <code>mysql</code> 服务，只能使用默认的 <code>/etc/my.cnf</code> 配置文件。</p>
<p>调用<code>mysql.server</code>脚本启停<code>MySQL</code>服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; mysql.server start|stop</span><br></pre></td></tr></table></figure>

<p>使用上述命令时，<code>mysql.server</code> 启动脚本会先进入<code>MySQL</code>的注册目录，然后调用<code>mysqld_safe</code>命令来启停<code>MySQL</code>服务，但我们通常会将复制 <code>mysql.server</code> 文件放到 <code>/etc/init.d</code>目录下，并将其重命名为<code>mysqld</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>

<p>使用 <code>init.d</code> 启停MySQL服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysqld start|stop</span><br></pre></td></tr></table></figure>

<h2 id="脚本分析"><a href="#脚本分析" class="headerlink" title="脚本分析"></a>脚本分析</h2><p><code>mysql.server</code> 主要分为三大部分：</p>
<ul>
<li>变量初始化部分</li>
<li>函数声明部分</li>
<li>具体执行部分</li>
</ul>
<h3 id="变量初始化部分"><a href="#变量初始化部分" class="headerlink" title="变量初始化部分"></a>变量初始化部分</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 如果改写了basedir =  你必须同时改写datadir = 但这个可能会被MySQL配置文件的设置重写</span></span><br><span class="line"><span class="comment"># If you change base dir, you must also change datadir. These may get</span></span><br><span class="line"><span class="comment"># overwritten by settings in the MySQL configuration files.</span></span><br><span class="line"></span><br><span class="line"><span class="string">basedir=</span></span><br><span class="line"><span class="string">datadir=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default value, in seconds, afterwhich the script should timeout waiting</span></span><br><span class="line"><span class="comment"># for server start. </span></span><br><span class="line"><span class="comment"># Value here is overriden by value in my.cnf. </span></span><br><span class="line"><span class="comment"># 0 means don't wait at all</span></span><br><span class="line"><span class="comment"># Negative numbers mean to wait indefinitely</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 定义mysql服务启动的时间限制，如果在900s中没有启动成功，则该脚本会退出。</span></span><br><span class="line"><span class="comment">### 这里设置的值会被my.cnf 所覆盖</span></span><br><span class="line"><span class="comment">### 0代表无需等待</span></span><br><span class="line"><span class="comment">### 负数表示无期限的等待</span></span><br><span class="line"><span class="string">service_startup_timeout=900</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lock directory for RedHat / SuSE.</span></span><br><span class="line"><span class="comment">#系统关闭的过程(发出关闭信号，调动服务自身的进程)会检查/var/lock/subsys下的文件</span></span><br><span class="line"><span class="comment">#逐一关闭每个服务，若某一运行的服务在/var/lock/subsys下无相应选项，则系统关闭时会像杀死普通进程一样杀死该服务，通过查看/etc/rc.d/init.d下的脚本，可以发现每个服务操纵自己时都会去查看/var/lock/subsys下相应的服务</span></span><br><span class="line"><span class="comment">#很多程序需要判断是否当前已经有一个实例在运行，该目录是让程序判断是否有实例运行的标志，</span></span><br><span class="line"><span class="comment">#如：xinetd,如果存在该文件，则表示已经有xinetd在运行了，否则就是没有。当然程序中还需相应判断措施来真正确定是否有实例运行</span></span><br><span class="line"><span class="comment">#通常与该目录配套的还有/var/run 目录，用于存放对应实例的PID，/var/lock/subsys 与 /var/run 两个目录结合可以方便的判断</span></span><br><span class="line"><span class="comment">#很多服务是否在运行，运行的相关信息等。</span></span><br><span class="line"><span class="string">lockdir='/var/lock/subsys'</span></span><br><span class="line"><span class="string">lock_file_path="$lockdir/mysql"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following variables are only set for letting mysql.server find things.</span></span><br><span class="line"><span class="comment">#以下变量的设置只是为了让 mysql.server 找到相应文件</span></span><br><span class="line"><span class="comment">#设置一些默认值</span></span><br><span class="line"><span class="comment">#判断basedir和datadir</span></span><br><span class="line"><span class="comment">#mysqld_pid_file_path 指定pid文件的路径 </span></span><br><span class="line"><span class="comment">#-z string 判断字符串是否为空</span></span><br><span class="line"><span class="comment">#如果basedir没有显示设置，则默认为/usr/local/mysql，这也是为什么很多mysql安装教程都推荐将mysql相关文件放到/usr/local/mysql下。</span></span><br><span class="line"><span class="comment">#如果datadir没有显示设置，则默认为$basedir/data。</span></span><br><span class="line"><span class="string">Set</span> <span class="string">some</span> <span class="string">defaults</span></span><br><span class="line"><span class="string">mysqld_pid_file_path=</span></span><br><span class="line"><span class="string">if</span> <span class="string">test</span> <span class="bullet">-z</span> <span class="string">"$basedir"</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line">  <span class="string">basedir=/usr/local/mysql</span></span><br><span class="line">  <span class="string">bindir=/usr/local/mysql/bin</span></span><br><span class="line">  <span class="string">if</span> <span class="string">test</span> <span class="bullet">-z</span> <span class="string">"$datadir"</span></span><br><span class="line">  <span class="string">then</span></span><br><span class="line">    <span class="string">datadir=/usr/local/mysql/data</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">sbindir=/usr/local/mysql/bin</span></span><br><span class="line">  <span class="string">libexecdir=/usr/local/mysql/bin</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line">  <span class="string">bindir="$basedir/bin"</span></span><br><span class="line">  <span class="string">if</span> <span class="string">test</span> <span class="bullet">-z</span> <span class="string">"$datadir"</span></span><br><span class="line">  <span class="string">then</span></span><br><span class="line">    <span class="string">datadir="$basedir/data"</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">sbindir="$basedir/sbin"</span></span><br><span class="line">  <span class="string">libexecdir="$basedir/libexec"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datadir_set is used to determine if datadir was set (and so should be</span></span><br><span class="line"><span class="comment"># *not* set inside of the --basedir= handler.)</span></span><br><span class="line"><span class="comment">#datadir_set 用于确定是否建立了data 目录</span></span><br><span class="line"><span class="string">datadir_set=</span></span><br></pre></td></tr></table></figure>

<h3 id="函数声明部分"><a href="#函数声明部分" class="headerlink" title="函数声明部分"></a>函数声明部分</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use LSB init script functions for printing messages, if possible</span></span><br><span class="line"><span class="comment">### 如果可能，使用LSB init脚本函数打印消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 定义log_success_msg()和log_failure_msg()函数 </span></span><br><span class="line"><span class="comment">### 首先，判断/lib/lsb/init-functions文件是否存在，如果存在，则使定义在init-functions文件中的所有shell函数在当前脚本中生效。</span></span><br><span class="line"><span class="comment">### 如果没有，则定义两个函数，一个用于打印成功日志，一个是打印错误日志。</span></span><br><span class="line"><span class="comment">### 在RHCS 6.7中，该文件并不存在，已被/etc/init.d/functions所替代。</span></span><br><span class="line"><span class="string">lsb_functions="/lib/lsb/init-functions"</span></span><br><span class="line"><span class="string">if</span> <span class="string">test</span> <span class="bullet">-f</span> <span class="string">$lsb_functions</span> <span class="string">;</span> <span class="string">then</span></span><br><span class="line">  <span class="string">.</span> <span class="string">$lsb_functions</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line">  <span class="string">log_success_msg()</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">" SUCCESS! $@"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">log_failure_msg()</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">" ERROR! $@"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####传递参数</span></span><br><span class="line"><span class="comment">### 将第一个参数传递给mode，剩下的参数传递给other_args</span></span><br><span class="line"></span><br><span class="line"><span class="string">PATH="/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin"</span></span><br><span class="line"><span class="string">export</span> <span class="string">PATH</span></span><br><span class="line"></span><br><span class="line"><span class="string">mode=$1</span>    <span class="comment"># start or stop  启动或停止</span></span><br><span class="line"></span><br><span class="line"><span class="string">[</span> <span class="string">$#</span> <span class="bullet">-ge</span> <span class="number">1</span> <span class="string">]</span> <span class="string">&amp;&amp;</span> <span class="string">shift</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">other_args="$*"</span>   <span class="comment"># uncommon, but needed when called from an RPM upgrade action</span></span><br><span class="line">                  <span class="comment"># 不常见，但在RPM升级操作调用时会被需要</span></span><br><span class="line">           <span class="comment"># Expected: "--skip-networking --skip-grant-tables"  预期：跳过网络，跳过授权表</span></span><br><span class="line">           <span class="comment"># They are not checked here, intentionally, as it is the resposibility</span></span><br><span class="line">           <span class="comment"># of the "spec" file author to give correct arguments only.</span></span><br><span class="line"></span><br><span class="line"><span class="string">case</span> <span class="string">`echo</span> <span class="string">"testing\c"</span><span class="string">`,`echo</span> <span class="bullet">-n</span> <span class="string">testing`</span> <span class="string">in</span></span><br><span class="line">    <span class="string">*c*,-n*)</span> <span class="string">echo_n=</span>   <span class="string">echo_c=</span>     <span class="string">;;</span></span><br><span class="line">    <span class="string">*c*,*)</span>   <span class="string">echo_n=-n</span> <span class="string">echo_c=</span>     <span class="string">;;</span></span><br><span class="line">    <span class="string">*)</span>       <span class="string">echo_n=</span>   <span class="string">echo_c='\c'</span> <span class="string">;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 解析配置文件中的参数 ,该函数之后会涉及</span></span><br><span class="line"><span class="comment">### 主要涉及如下参数：--basedir，--datadir，--pid-file，--service-startup-timeout。</span></span><br><span class="line"><span class="string">parse_server_arguments()</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">for</span> <span class="string">arg</span> <span class="string">do</span></span><br><span class="line">    <span class="string">case</span> <span class="string">"$arg"</span> <span class="string">in</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">-basedir=*)</span>  <span class="string">basedir=`echo</span> <span class="string">"$arg"</span> <span class="string">| sed -e 's/^[^=]*=//'`</span></span><br><span class="line"><span class="string">                    bindir="$basedir/bin"</span></span><br><span class="line"><span class="string">		    if test -z "$datadir_set"; then</span></span><br><span class="line"><span class="string">		      datadir="$basedir/data"</span></span><br><span class="line"><span class="string">		    fi</span></span><br><span class="line"><span class="string">		    sbindir="$basedir/sbin"</span></span><br><span class="line"><span class="string">		    libexecdir="$basedir/libexec"</span></span><br><span class="line"><span class="string">        ;;</span></span><br><span class="line"><span class="string">      --datadir=*)  datadir=`echo "$arg" | sed -e 's/^[^=]*=//'`</span></span><br><span class="line"><span class="string">		    datadir_set=1</span></span><br><span class="line"><span class="string">	;;</span></span><br><span class="line"><span class="string">      --pid-file=*) mysqld_pid_file_path=`echo "$arg" | sed -e 's/^[^=]*=//'` ;;</span></span><br><span class="line"><span class="string">      --service-startup-timeout=*) service_startup_timeout=`echo "$arg" | sed -e 's/^[^=]*=//'` ;;</span></span><br><span class="line"><span class="string">    esac</span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### wait_for_pid函数</span></span><br><span class="line"><span class="string">### 在利用mysqld_safe启动mysql实例后，会调用该参数</span></span><br><span class="line"><span class="string">### wait_for_pid created "$!" "$mysqld_pid_file_path"; return_value=$?</span></span><br><span class="line"><span class="string">### 因为第一个参数是created，所以会执行test -s "$pid_file_path" &amp;&amp; i='' &amp;&amp; break命令。</span></span><br><span class="line"><span class="string">### -s file 如果文件的长度不为零，则为真</span></span><br><span class="line"><span class="string">### 该命令的意思是如果pid文件存在，则将变量i设置为空，并退出while循环。</span></span><br><span class="line"><span class="string">wait_for_pid () &#123;</span></span><br><span class="line"><span class="string">  verb="$1"           # created | removed</span></span><br><span class="line"><span class="string">  pid="$2"            # process ID of the program operating on the pid-file</span></span><br><span class="line"><span class="string">  pid_file_path="$3" # path to the PID file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  i=0</span></span><br><span class="line"><span class="string">  avoid_race_condition="by checking again"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  while test $i -ne $service_startup_timeout ; do</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    case "$verb" in</span></span><br><span class="line"><span class="string">      'created')</span></span><br><span class="line"><span class="string">        # wait for a PID-file to pop into existence.</span></span><br><span class="line"><span class="string">        test -s "$pid_file_path" &amp;&amp; i='' &amp;&amp; break</span></span><br><span class="line"><span class="string">        ;;</span></span><br><span class="line"><span class="string">      'removed')</span></span><br><span class="line"><span class="string">        # wait for this PID-file to disappear</span></span><br><span class="line"><span class="string">        test ! -s "$pid_file_path" &amp;&amp; i='' &amp;&amp; break</span></span><br><span class="line"><span class="string">        ;;</span></span><br><span class="line"><span class="string">      *)</span></span><br><span class="line"><span class="string">        echo "wait_for_pid () usage: wait_for_pid created|removed pid pid_file_path"</span></span><br><span class="line"><span class="string">        exit 1</span></span><br><span class="line"><span class="string">        ;;</span></span><br><span class="line"><span class="string">    esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # if server isn't running, then pid-file will never be updated</span></span><br><span class="line"><span class="string">    if test -n "$pid"; then</span></span><br><span class="line"><span class="string">      if kill -0 "$pid" 2&gt;/dev/null; then</span></span><br><span class="line"><span class="string">        :  # the server still runs</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        # The server may have exited between the last pid-file check and now.  </span></span><br><span class="line"><span class="string">        if test -n "$avoid_race_condition"; then</span></span><br><span class="line"><span class="string">          avoid_race_condition=""</span></span><br><span class="line"><span class="string">          continue  # Check again.</span></span><br><span class="line"><span class="string">        fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # there's nothing that will affect the file.</span></span><br><span class="line"><span class="string">        log_failure_msg "The server quit without updating PID file ($pid_file_path)."</span></span><br><span class="line"><span class="string">        return 1  # not waiting any more.</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo $echo_n ".$echo_c"</span></span><br><span class="line"><span class="string">    i=`expr $i + 1`</span></span><br><span class="line"><span class="string">    sleep 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  if test -z "$i" ; then</span></span><br><span class="line"><span class="string">    log_success_msg</span></span><br><span class="line"><span class="string">    return 0</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    log_failure_msg</span></span><br><span class="line"><span class="string">    return 1</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="主体执行部分"><a href="#主体执行部分" class="headerlink" title="主体执行部分"></a>主体执行部分</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get arguments from the my.cnf file,</span></span><br><span class="line"><span class="comment"># the only group, which is read from now on is [mysqld]</span></span><br><span class="line"><span class="comment">### 从my.cnf文件中获取参数，</span></span><br><span class="line"><span class="comment">### 从现在开始唯一读取的组是[mysqld]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 判断my_print_defaults的位置</span></span><br><span class="line"><span class="comment">### 它判断$bindir（通常指的是$basedir/bin）目录下是否存在该可执行文件，。</span></span><br><span class="line"><span class="string">if</span> <span class="string">test</span> <span class="bullet">-x</span> <span class="string">"$bindir/my_print_defaults"</span><span class="string">;</span>  <span class="string">then</span></span><br><span class="line">  <span class="string">print_defaults="$bindir/my_print_defaults"</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Try to find basedir in /etc/my.cnf</span></span><br><span class="line">  <span class="comment">### 判断/etc/my.cnf是否存在并且可读，如果是，则判断该配置文件中是否指定了basedir参数，</span></span><br><span class="line">  <span class="comment">### 如果指定了，则取出该参数的值，并判断该值对应的目录中是否存在bin/my_print_defaults可执行文件</span></span><br><span class="line">  <span class="string">conf=/etc/my.cnf</span></span><br><span class="line">  <span class="string">print_defaults=</span></span><br><span class="line">  <span class="string">if</span> <span class="string">test</span> <span class="bullet">-r</span> <span class="string">$conf</span></span><br><span class="line">  <span class="string">then</span></span><br><span class="line">    <span class="string">subpat='^[^=]*basedir[^=]*=\(.*\)$'</span></span><br><span class="line">    <span class="string">dirs=`sed</span> <span class="bullet">-e</span> <span class="string">"/$subpat/!d"</span> <span class="bullet">-e</span> <span class="string">'s//\1/'</span> <span class="string">$conf`</span></span><br><span class="line">    <span class="string">for</span> <span class="string">d</span> <span class="string">in</span> <span class="string">$dirs</span></span><br><span class="line">    <span class="string">do</span></span><br><span class="line">      <span class="string">d=`echo</span> <span class="string">$d</span> <span class="string">| sed -e 's/[ 	]//g'`</span></span><br><span class="line"><span class="string">      if test -x "$d/bin/my_print_defaults"</span></span><br><span class="line"><span class="string">      then</span></span><br><span class="line"><span class="string">        print_defaults="$d/bin/my_print_defaults"</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  #如果在上述目录中实在没发现my_print_defaults文件，</span></span><br><span class="line"><span class="string">  #索性就将print_defaults设置为"my_print_defaults"，寄希望于该命令在当前的PATH环境中。</span></span><br><span class="line"><span class="string">  # Hope it's in the PATH ... but I doubt it</span></span><br><span class="line"><span class="string">  test -z "$print_defaults" &amp;&amp; print_defaults="my_print_defaults"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Read defaults file from 'basedir'.   If there is no defaults file there</span></span><br><span class="line"><span class="string"># check if it's in the old (depricated) place (datadir) and read it from there</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">### 从'basedir'读取默认文件。如果没有默认文件，检查它是否在旧的(已删除的)位置(datadir)，并从那里读取它</span></span><br><span class="line"><span class="string">### 查找默认的配置文件</span></span><br><span class="line"><span class="string">### -r file 如果文件可读，则为真</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">extra_args=""</span></span><br><span class="line"><span class="string">if test -r "$basedir/my.cnf"</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">  extra_args="-e $basedir/my.cnf"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 解析配置文件中的参数</span></span><br><span class="line"><span class="string">### my_print_defaults的用法如下：</span></span><br><span class="line"><span class="string">### my_print_defaults --defaults-file=example.cnf client mysql</span></span><br><span class="line"><span class="string">### 即读取配置文件中，client和mysql部分的参数配置，</span></span><br><span class="line"><span class="string">### 具体在本脚本中，是读取mysqld，server，mysql_server，mysql.server四个部分的配置参数。</span></span><br><span class="line"><span class="string">parse_server_arguments `$print_defaults $extra_args mysqld server mysql_server mysql.server`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Set pid file if not given   </span></span><br><span class="line"><span class="string"># 若未给出，设置pid file的路径</span></span><br><span class="line"><span class="string">### -z string 判断字符串是否为空</span></span><br><span class="line"><span class="string">### 如果--pid-file没有在读取到的配置文件中设置或者脚本刚开始的mysqld_pid_file_path参数没有设置，</span></span><br><span class="line"><span class="string">### 则pid file默认设置在datadir下，以主机名.pid命名。</span></span><br><span class="line"><span class="string">### 如果该参数设置了，还需要进一步判断</span></span><br><span class="line"><span class="string">### 如果该参数中带有斜杠，则代表给定的值带有路径，可直接使用。</span></span><br><span class="line"><span class="string">### 如果该参数中没带路径，则代表给定的值只是pid的文件名，可将其设在datadir下。</span></span><br><span class="line"><span class="string">if test -z "$mysqld_pid_file_path"</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">  mysqld_pid_file_path=$datadir/`hostname`.pid</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  case "$mysqld_pid_file_path" in</span></span><br><span class="line"><span class="string">    /* ) ;;</span></span><br><span class="line"><span class="string">    * )  mysqld_pid_file_path="$datadir/$mysqld_pid_file_path" ;;</span></span><br><span class="line"><span class="string">  esac</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### mysql.server start选项</span></span><br><span class="line"><span class="string">### 首先，切换到$basedir中</span></span><br><span class="line"><span class="string">### 其次，判断$basedir/bin中的mysqld_safe是否是可执行文件，如果是，则启动mysqld实例，如果不是，则报错退出。</span></span><br><span class="line"><span class="string">### 启动流程实现过程</span></span><br><span class="line"><span class="string">### 首先，执行$bindir/mysqld_safe --datadir="$datadir" --pid-file="$mysqld_pid_file_path" $other_args &gt;/dev/null 2&gt;&amp;1 &amp;命令，启动mysqld实例。</span></span><br><span class="line"><span class="string">### 可以发现，sqld_safe其实是在basedir中执行的，包括mysql初始化脚本mysql_install_db，也建议在basedir中执行，具体可参考：</span></span><br><span class="line"><span class="string">### 分析MariaDB初始化脚本mysql_install_db</span></span><br><span class="line"><span class="string">### 然后通过wait_for_pid函数进行判断，具体可见下文对于wait_for_pid函数的分析</span></span><br><span class="line"><span class="string">### 判断完毕后，</span></span><br><span class="line"><span class="string">### 查看$lockdir目录是否可写，可写的话，则在目录上创建一个文件。</span></span><br><span class="line"><span class="string">case "$mode" in</span></span><br><span class="line"><span class="string">  'start')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Start daemon</span></span><br><span class="line"><span class="string">    # Safeguard (relative paths, core dumps..)</span></span><br><span class="line"><span class="string">    cd $basedir</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo $echo_n "Starting MySQL"</span></span><br><span class="line"><span class="string">    if test -x $bindir/mysqld_safe</span></span><br><span class="line"><span class="string">    then</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # Give extra arguments to mysqld with the my.cnf file. This script</span></span><br><span class="line"><span class="string">      # may be overwritten at next upgrade.</span></span><br><span class="line"><span class="string">      $bindir/mysqld_safe --datadir="$datadir" --pid-file="$mysqld_pid_file_path" $other_args &gt;/dev/null &amp;</span></span><br><span class="line"><span class="string">      wait_for_pid created "$!" "$mysqld_pid_file_path"; return_value=$?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # Make lock for RedHat / SuSE</span></span><br><span class="line"><span class="string">      if test -w "$lockdir"</span></span><br><span class="line"><span class="string">      then</span></span><br><span class="line"><span class="string">        touch "$lock_file_path"</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      exit $return_value</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      log_failure_msg "Couldn't find MySQL server ($bindir/mysqld_safe)"</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 服务脚本stop选项</span></span><br><span class="line"><span class="string">  'stop')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Stop daemon. We use a signal here to avoid having to know the</span></span><br><span class="line"><span class="string">    # root password.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if test -s "$mysqld_pid_file_path"</span></span><br><span class="line"><span class="string">    then</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # signal mysqld_safe that it needs to stop</span></span><br><span class="line"><span class="string">      touch "$mysqld_pid_file_path.shutdown"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      mysqld_pid=`cat "$mysqld_pid_file_path"`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      if (kill -0 $mysqld_pid 2&gt;/dev/null)</span></span><br><span class="line"><span class="string">      then</span></span><br><span class="line"><span class="string">        echo $echo_n "Shutting down MySQL"</span></span><br><span class="line"><span class="string">        kill $mysqld_pid</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # mysqld should remove the pid file when it exits, so wait for it.</span></span><br><span class="line"><span class="string">        wait_for_pid removed "$mysqld_pid" "$mysqld_pid_file_path"; return_value=$?</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        log_failure_msg "MySQL server process #$mysqld_pid is not running!"</span></span><br><span class="line"><span class="string">        rm "$mysqld_pid_file_path"</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # Delete lock for RedHat / SuSE</span></span><br><span class="line"><span class="string">      if test -f "$lock_file_path"</span></span><br><span class="line"><span class="string">      then</span></span><br><span class="line"><span class="string">        rm -f "$lock_file_path"</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">      exit $return_value</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      log_failure_msg "MySQL server PID file could not be found!"</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ### 服务脚本restart选项</span></span><br><span class="line"><span class="string">  ### 首先，先执行stop操作，如果stop操作成功的话，则继续执行start操作。</span></span><br><span class="line"><span class="string">  ### 如果stop操作失败的话，则会输出"Failed to stop running server, so refusing to try to start."信息，并退出脚本。</span></span><br><span class="line"><span class="string">  'restart')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Stop the service and regardless of whether it was</span></span><br><span class="line"><span class="string">    # running or not, start it again.</span></span><br><span class="line"><span class="string">    if $0 stop  $other_args; then</span></span><br><span class="line"><span class="string">      $0 start $other_args</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      log_failure_msg "Failed to stop running server, so refusing to try to start."</span></span><br><span class="line"><span class="string">      exit 1</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   ### 服务脚本reload选项</span></span><br><span class="line"><span class="string">   ### 首先，判断pid文件的长度是否为0、</span></span><br><span class="line"><span class="string">   ### 如果pid文件的长度为0，则输出"MySQL PID file could not be found!"。</span></span><br><span class="line"><span class="string">   ### 如果不为0，则将该文件中的值设置为mysqld_pid变量的值。</span></span><br><span class="line"><span class="string">   ### 然后对该进程执行kill -HUP操作。</span></span><br><span class="line"><span class="string">   ### pid 是进程标识。如果想要更改配置而不需停止并重新启动服务，请使用该命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。</span></span><br><span class="line"><span class="string">   ### 根据约定，当您发送一个挂起信号（信号 1 或 HUP）时，大多数服务器进程（所有常用的进程）都会进行复位操作并重新加载它们的配置文件。</span></span><br><span class="line"><span class="string">  'reload'|'force-reload')</span></span><br><span class="line"><span class="string">    if test -s "$mysqld_pid_file_path" ; then</span></span><br><span class="line"><span class="string">      read mysqld_pid &lt;  "$mysqld_pid_file_path"</span></span><br><span class="line"><span class="string">      kill -HUP $mysqld_pid &amp;&amp; log_success_msg "Reloading service MySQL"</span></span><br><span class="line"><span class="string">      touch "$mysqld_pid_file_path"</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      log_failure_msg "MySQL PID file could not be found!"</span></span><br><span class="line"><span class="string">      exit 1</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ### 首先，判断pid文件长度是否为0，如果不是，则读取该文件中的值，并判断pid对应的进程是否运行正常，</span></span><br><span class="line"><span class="string">  ### 如果运行正常，则输出"MySQL running"</span></span><br><span class="line"><span class="string">  ### 如果不正常，则输出"MySQL is not running, but PID file exists"</span></span><br><span class="line"><span class="string">  ### 如果pid文件的长度为0，则试图通过mysqld的启动命令来获取其pid，</span></span><br><span class="line"><span class="string">  ### 这个时候，可能存在一个mysqld程序启动了多个实例，这会导致pid_count=`echo $mysqld_pid | wc -w`大于1。</span></span><br><span class="line"><span class="string">  ### 这个时候，会输出"Multiple MySQL running but PID file could not be found"信息，并退出脚本。</span></span><br><span class="line"><span class="string">  ### 如果mysqld_pid为空，则会继续判断"$lock_file_path"是否存在，如果存在，</span></span><br><span class="line"><span class="string">  ### 则会输出"MySQL is not running, but lock file ($lock_file_path) exists"信息。</span></span><br><span class="line"><span class="string">  ### 如果"$lock_file_path"不存在，则会输出"MySQL is not running"信息。</span></span><br><span class="line"><span class="string">  ### 如果mysqld_pid等于1，则会输出"MySQL is running but PID file could not be found"信息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  'status')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # First, check to see if pid file exists</span></span><br><span class="line"><span class="string">    if test -s "$mysqld_pid_file_path" ; then </span></span><br><span class="line"><span class="string">      read mysqld_pid &lt; "$mysqld_pid_file_path"</span></span><br><span class="line"><span class="string">      if kill -0 $mysqld_pid 2&gt;/dev/null ; then </span></span><br><span class="line"><span class="string">        log_success_msg "MySQL running ($mysqld_pid)"</span></span><br><span class="line"><span class="string">        exit 0</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        log_failure_msg "MySQL is not running, but PID file exists"</span></span><br><span class="line"><span class="string">        exit 1</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      # Try to find appropriate mysqld process</span></span><br><span class="line"><span class="string">      mysqld_pid=`pidof $libexecdir/mysqld`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # test if multiple pids exist</span></span><br><span class="line"><span class="string">      pid_count=`echo $mysqld_pid | wc -w`</span></span><br><span class="line"><span class="string">      if test $pid_count -gt 1 ; then</span></span><br><span class="line"><span class="string">        log_failure_msg "Multiple MySQL running but PID file could not be found ($mysqld_pid)"</span></span><br><span class="line"><span class="string">        exit 5</span></span><br><span class="line"><span class="string">      elif test -z $mysqld_pid ; then </span></span><br><span class="line"><span class="string">        if test -f "$lock_file_path" ; then </span></span><br><span class="line"><span class="string">          log_failure_msg "MySQL is not running, but lock file ($lock_file_path) exists"</span></span><br><span class="line"><span class="string">          exit 2</span></span><br><span class="line"><span class="string">        fi </span></span><br><span class="line"><span class="string">        log_failure_msg "MySQL is not running"</span></span><br><span class="line"><span class="string">        exit 3</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        log_failure_msg "MySQL is running but PID file could not be found"</span></span><br><span class="line"><span class="string">        exit 4</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">    *)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # usage</span></span><br><span class="line"><span class="string">      ### 服务脚本其它选项</span></span><br><span class="line"><span class="string">      ### 如果脚本的第一个参数不是上述几个选项，则会输出Usage信息。</span></span><br><span class="line"><span class="string">      basename=`basename "$0"`</span></span><br><span class="line"><span class="string">      echo "Usage: $basename  &#123;start|stop|restart|reload|force-reload|status&#125;  [ MySQL server options ]"</span></span><br><span class="line"><span class="string">      exit 1</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit 0</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mysql install</title>
    <url>/blog/2019/09/18/mysql-install/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数据库托管流程</title>
    <url>/blog/2019/09/17/MySQL-Trusteeship/</url>
    <content><![CDATA[<h4 id="接入堡垒机"><a href="#接入堡垒机" class="headerlink" title="接入堡垒机"></a>接入堡垒机</h4><ol>
<li><p>首先登录至目标服务器（加入托管的数据库所在服务器），若无法登录需先申请登录目标服务器的特权账号。</p>
</li>
<li><p>配置从跳板机到目标服务器的<a href="https://mino-yn.github.io/blog/2019/08/23/ssh免密登录（单向）/">免密登录</a>。</p>
</li>
<li><p>提供目标服务器的ip和备注信息，将服务器加入堡垒机</p>
</li>
</ol>
<h4 id="设置MySQL用户"><a href="#设置MySQL用户" class="headerlink" title="设置MySQL用户"></a>设置MySQL用户</h4><ol>
<li><p>通过堡垒机登录需要托管的MySQL数据库</p>
</li>
<li><p>创建MySQL用户：sre 、hdm</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建用户sre，赋予全局权限</span><br><span class="line">CREATE USER &apos;hdm&apos;@&apos;%&apos; IDENTIFIED BY PASSWORD &apos;*14533888C6CA3952B3957903FF7E69469C7E3A2B&apos;;</span><br><span class="line">GRANT SHOW DATABASES, PROCESS, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;hdm&apos;@&apos;%&apos;;</span><br><span class="line">GRANT SELECT ON *.* TO &apos;hdm&apos;@&apos;%&apos;;</span><br><span class="line"></span><br><span class="line">#创建用户hdm，用于接入阿里云HDM</span><br><span class="line">CREATE USER &apos;sre&apos;@&apos;%&apos; IDENTIFIED BY PASSWORD &apos;*66CC8D8F94978869E17ABDA6FD2E1A5D817E619E&apos;;</span><br><span class="line">GRANT all privileges on *.* to &apos;sre&apos;@&apos;%&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<h4 id="接入HDM"><a href="#接入HDM" class="headerlink" title="接入HDM"></a>接入HDM</h4><p>将目标服务器的<a href="https://mino-yn.github.io/blog/2019/09/09/HDM/">数据库实例接入HDM</a>，方便对数据库状态进行监控</p>
]]></content>
  </entry>
  <entry>
    <title>使用Xtrabackup搭建MySQL主从</title>
    <url>/blog/2019/09/12/Master-slave-replication/</url>
    <content><![CDATA[<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>1.主从，<a href="https://mino-yn.github.io/blog/2019/09/11/Xtrabackup/">安装 XtraBackup</a></p>
<p>2.<a href="https://mino-yn.github.io/blog/2019/08/23/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%88%E5%8D%95%E5%90%91%EF%BC%89/">配置主从互信</a></p>
<p>3.主库，全备数据并传输到从服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#备份主库：</span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=Haier@123 --no-timestamp /data/backup</span><br><span class="line"></span><br><span class="line">#传输到从库：</span><br><span class="line">scp -r /data/backup/* root@10.133.7.19:/data/backup</span><br></pre></td></tr></table></figure>

<p>4.从库，恢复全备数据</p>
<ul>
<li>主库和从库的数据库版本需一致</li>
<li>MySQL配置文件内容尽可能保持一致</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#停止MySQL服务</span><br><span class="line">mysqladmin -uroot -pHaier@123 shutdown</span><br><span class="line"></span><br><span class="line">#备份上应用日志，一般没有看到报错且最后显示 OK 就没有问题</span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log /data/backup </span><br><span class="line"></span><br><span class="line">#将原MySQL数据目录改名</span><br><span class="line">mv mysql mysql_bak</span><br><span class="line"></span><br><span class="line">#重建Mysql数据目录</span><br><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">#恢复数据,将备份还原到 my.cnf 指定的 datadir 中，不指定 --defaults-file，默认 /etc/my.cnf</span><br><span class="line">innobackupex --copy-back /data/backup</span><br><span class="line"></span><br><span class="line">#对新目录进行授权</span><br><span class="line">chown -R mysql:mysql mysql</span><br><span class="line"></span><br><span class="line">#重启MySQL服务，如果MySQL数据库启动失败，查看确认新的数据目录权限用户是否为mysql</span><br><span class="line">/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>

<h4 id="时间预估"><a href="#时间预估" class="headerlink" title="时间预估"></a>时间预估</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件大小：185 GB</span><br><span class="line">备份时间：25 min</span><br><span class="line">传输时间：30 min   ---以100MB/s的传输速度为基准</span><br><span class="line">恢复时间：1h 10 min</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.159.39.80 -&gt; 10.199.96.192</span><br><span class="line">文件大小：227G</span><br><span class="line">备份时间：32min</span><br><span class="line">传输时间：35min</span><br><span class="line">恢复时间：26min</span><br></pre></td></tr></table></figure>

<h3 id="搭建主从关系"><a href="#搭建主从关系" class="headerlink" title="搭建主从关系"></a>搭建主从关系</h3><p>从库，建立复制关系</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@GPCMS-DB-M</span> <span class="string">backup]#</span> <span class="string">cat</span> <span class="string">xtrabackup_binlog_info</span></span><br><span class="line"><span class="string">mysql-binlog.000297</span>	<span class="number">900834433</span></span><br><span class="line"></span><br><span class="line"><span class="string">CHANGE</span> <span class="string">MASTER</span> <span class="string">TO</span> <span class="string">MASTER_HOST='10.133.7.18',</span></span><br><span class="line"><span class="string">MASTER_USER='repl',</span></span><br><span class="line"><span class="string">MASTER_PASSWORD='Changeme_123',</span></span><br><span class="line"><span class="string">MASTER_PORT=3306,</span></span><br><span class="line"><span class="string">MASTER_LOG_FILE='mysql-binlog.000297',</span> <span class="string">MASTER_LOG_POS=900834433,</span></span><br><span class="line"><span class="string">MASTER_CONNECT_RETRY=10;</span></span><br><span class="line"></span><br><span class="line"><span class="string">MySQL</span> <span class="string">[(none)]&gt;</span> <span class="string">start</span> <span class="string">slave;</span></span><br><span class="line"><span class="string">Query</span> <span class="string">OK,</span> <span class="number">0</span> <span class="string">rows</span> <span class="string">affected</span> <span class="string">(0.00</span> <span class="string">sec)</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Percona XtraBackup安装实践</title>
    <url>/blog/2019/09/11/Xtrabackup/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Percona XtraBackup 是开源免费的 MySQL 数据库热备份软件，它能对 InnoDB 和 XtraDB 存储引擎的数据库非阻塞地备份（对于 MyISAM 的备份 同样需要加表锁）。XtraBackup 支持所有的 Percona Server、MySQL、MariaDB 和 Drizzle。</p>
<p><strong>物理备份</strong></p>
<p><strong>XtraBackup优势 ：</strong></p>
<p>1、无需停止数据库进行 InnoDB 热备，备份过程中不会锁表，不影响现有业务。</p>
<p>2、增量备份 MySQL。</p>
<p>3、流压缩到传输到其它服务器。</p>
<p>4、能比较容易地创建主从同步。</p>
<p>5、备份MySQL时不会增大服务器负载。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>Xtrabackup</code> 包括两个工具: <code>xtrabackup</code>、<code>innobackupex</code>  ，其主要区别如下:</p>
<ul>
<li>xtrabackup: 只能备份innodb和xtradb两种引擎的表，不能备份myisam引擎的表</li>
<li>innobackupex: 是一个封装了xtrabackup的Perl脚本，支持同时备份innodb和myisam，但在对myisam备份时需要加一个全局的读锁。还有就是myisam不支持增量备份。</li>
</ul>
<h3 id="全库备份过程"><a href="#全库备份过程" class="headerlink" title="全库备份过程"></a>全库备份过程</h3><p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Xtrabackup4.png" alt></p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/Xtrabackup5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 首先会启动一个xtrabackup_log后台检测的进程，实时检测mysql redo的变化，一旦发现redo有新的日志写入，立刻将日志写入到日志文件xtrabackup_log中</span><br><span class="line"></span><br><span class="line">2 复制innodb的数据文件和系统表空间文件idbdata1到对应的以默认时间戳为备份目录的地方</span><br><span class="line"></span><br><span class="line">3 复制结束后，执行flush table with read lock操作</span><br><span class="line"></span><br><span class="line">4 复制.frm .myd .myi文件</span><br><span class="line"></span><br><span class="line">5 并且在这一时刻获得binary log 的位置</span><br><span class="line"></span><br><span class="line">6 将表进行解锁unlock tables</span><br><span class="line"></span><br><span class="line">7 停止xtrabackup_log进程</span><br></pre></td></tr></table></figure>

<h3 id="全库恢复的过程"><a href="#全库恢复的过程" class="headerlink" title="全库恢复的过程"></a>全库恢复的过程</h3><p>这一阶段会启动xtrabackup内嵌的innodb实例，将xtrabackup日志xtrabackup_Log进行回放，将提交的事务信息变更应用到innodb数据或表空间，同时回滚未提交的事务。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Xtrabackup6.png" alt></p>
<h2 id="安装实践"><a href="#安装实践" class="headerlink" title="安装实践"></a>安装实践</h2><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1）下载 Percona-XtraBackup，采用从阿里云oss下载的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/Percona-XtraBackup-2.4.12-el7-x86_64-bundle.tar    #本地上传</span><br><span class="line">tar xvf Percona-XtraBackup-2.4.12-el7-x86_64-bundle.tar</span><br><span class="line">- percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class="line">- percona-xtrabackup-24-debuginfo-2.4.12-1.el7.x86_64.rpm</span><br><span class="line">- percona-xtrabackup-test-24-2.4.12-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>2）rpm 方式安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>报错信息：提示缺少依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warning: percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID cd2efd2a: NOKEY</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">	libev.so.4()(64bit) is needed by percona-xtrabackup-24-2.4.12-1.el7.x86_64</span><br><span class="line">	perl(DBD::mysql) is needed by percona-xtrabackup-24-2.4.12-1.el7.x86_64</span><br><span class="line">	perl(Digest::MD5) is needed by percona-xtrabackup-24-2.4.12-1.el7.x86_64</span><br><span class="line">	rsync is needed by percona-xtrabackup-24-2.4.9-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/libev-4.15-1.el6.x86_64.rpm</span><br><span class="line">yum -y install perl-DBD-MySQL</span><br><span class="line">yum -y install perl-Digest-MD5</span><br><span class="line">yum -y install rsync perl l perl-Digest-MD5</span><br><span class="line">rpm -ivh libev-4.15-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><p>通过建立执行脚本<code>install_xtrabackup.sh</code> 进行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Install XtraBackup</span><br><span class="line">cd /usr/local/src</span><br><span class="line">wget http://10.190.177.9:8085/Percona-XtraBackup-2.4.12-el7-x86_64-bundle.tar</span><br><span class="line">tar xvf Percona-XtraBackup-2.4.12-el7-x86_64-bundle.tar</span><br><span class="line"></span><br><span class="line">wget http://10.190.177.9:8085/libev-4.15-1.el6.x86_64.rpm</span><br><span class="line">yum -y install perl-DBD-MySQL</span><br><span class="line">yum -y install perl-Digest-MD5</span><br><span class="line">rpm -ivh libev-4.15-1.el6.x86_64.rpm</span><br><span class="line">rpm -ivh percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">xtrabackup --version</span><br></pre></td></tr></table></figure>

<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><p>使用<code>yum</code> 命令安装依赖包<code>percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</code>时报错</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">yum</span> <span class="bullet">-y</span> <span class="string">install</span> <span class="string">percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/xtrabackup1.png" alt></p>
<p>报错提示<code>mariadb-libs</code> 与之前安装的 MySQL 发生冲突，查看 MySQL 安装包目录</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/xtrabackup2.png" alt></p>
<p>检查后发现报错是由MySQL组件未安装完全导致的，之前安装MySQL时是通过 RPM 包的方式，为了省事只安装了部分组件便直接使用，未安装 MySQL 的<code>shared</code> 和<code>embedded</code> 组件。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h4><p>为了方便，将未安装的 MySQL 组件安装上</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/xtrabackup3.png" alt></p>
<p>将报错的<code>yum</code>命令重新执行，查看xtrabackup版本</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/0.png" alt></p>
<p>安装成功</p>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><h4 id="问题现象-1"><a href="#问题现象-1" class="headerlink" title="问题现象"></a>问题现象</h4><p>执行<code>rpm</code> 命令安装xtrabackup时报错冲突。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/xtrabackup_5.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#搜索指定rpm包是否安装</span><br><span class="line">rpm -qa |grep xtrabackup</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/xtrabackup_6.png" alt></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>服务器上安装过<code>Percona XtraBackup2.2</code>, 但从mysql5.7开始，必须使用xtrabackup2.4以上版本才能完成备份,老的版本执行会报错，已不适用。将老版本卸载后重新安装.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e 要删除的软件包</span><br></pre></td></tr></table></figure>

<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><h4 id="问题现象-2"><a href="#问题现象-2" class="headerlink" title="问题现象"></a>问题现象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hop02 src]# rpm -ivh percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpmwarning: percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID cd2efd2a: NOKEYerror: Failed dependencies:	libc.so.6(GLIBC_2.14)(64bit) is needed by percona-xtrabackup-24-2.4.12-1.el7.x86_64	libstdc++.so.6(GLIBCXX_3.4.15)(64bit) is needed by percona-xtrabackup-24-2.4.12-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法</strong>：</h4><p>查看操作系统版本，<code>CentOS 6</code> 下载 <code>el6</code> 的安装包即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat /etc/redhat-releaseCentOS release 6.5 (Final)$ wget http://devops-files.oss-cn-qingdao.aliyuncs.com/percona-xtrabackup-24-2.4.12-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips：不要轻易在真实生产环境中直接安装，因为升级的过程中比较容易出现系统出错。</p>
</blockquote>
]]></content>
      <tags>
        <tag>XtraBackup</tag>
      </tags>
  </entry>
  <entry>
    <title>案例2 · CPU利用率过高</title>
    <url>/blog/2019/09/11/case-2/</url>
    <content><![CDATA[<h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>CPU异常告警：CPU 利用率连续 15 分钟超过了 90%，达到 96.75885416666917%，请求协助排查原因。</p>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>1）连接上服务器，使用 <code>top</code> 命令动态，查看 CPU 状态发现 CPU 使用率长时间处于异常过高的状态。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/case2-1.png" alt></p>
<p>2）使用 <code>show processlist</code> 查看数据库线程，未发现有锁占用和大量线程阻塞的情况。</p>
<p>3）查看数据库日志未发现明显异常。</p>
<p>4）重新查看数据库线程，发现有许多查询都处于 <code>creating sort index</code> 的状态，通过客户端抽取其 SQL 语句，都是如下类似的查询结构：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">SELECT</span></span><br><span class="line"> <span class="string">material</span> <span class="string">AS</span> <span class="string">material_code,</span></span><br><span class="line"> <span class="string">material_t2</span> <span class="string">AS</span> <span class="string">module_code,</span></span><br><span class="line"> <span class="string">material_name_t2</span> <span class="string">AS</span> <span class="string">description,</span></span><br><span class="line"> <span class="string">quantity_t2</span> <span class="string">AS</span> <span class="string">consumption_unit,</span></span><br><span class="line"> <span class="string">unitofmeasure_t2</span> <span class="string">AS</span> <span class="string">component_unit</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">pc_tf_bom_dtl</span></span><br><span class="line"><span class="string">WHERE</span> <span class="string">material='0060122449'</span> <span class="string">AND</span> <span class="string">plant='null'</span></span><br><span class="line"><span class="string">ORDER</span> <span class="string">BY</span> <span class="string">bom_level</span></span><br></pre></td></tr></table></figure>

<p>除了material编号发生变化，其余部分相同。</p>
<p>查看pc_tf_bom_dtl 表的结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `pc_tf_bom_dtl` (</span><br><span class="line">	`id` BIGINT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">	`material` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;物料号&apos;,</span><br><span class="line">	`material_name` VARCHAR(256) NULL DEFAULT NULL COMMENT &apos;物料描述&apos;,</span><br><span class="line">	`plant` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;工厂编码&apos;,</span><br><span class="line">	`plant_name` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;工厂名称	&apos;,</span><br><span class="line">	`material_t2` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;子件号&apos;,</span><br><span class="line">	`material_name_t2` VARCHAR(256) NULL DEFAULT NULL COMMENT &apos;子件物料描述&apos;,</span><br><span class="line">	`quantity_t2` DECIMAL(32,10) NULL DEFAULT NULL COMMENT &apos;耗用数量&apos;,</span><br><span class="line">	`unitofmeasure_t2` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;bom单位&apos;,</span><br><span class="line">	`bom_level` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;编码&apos;,</span><br><span class="line">	`lv` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;层级&apos;,</span><br><span class="line">	`partnumber` VARCHAR(40) NULL DEFAULT NULL COMMENT &apos;二三级物料的父项物料&apos;,</span><br><span class="line">	`src_etl_date` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;数据源取数时间&apos;,</span><br><span class="line">	`trg_etl_date` VARCHAR(32) NULL DEFAULT NULL COMMENT &apos;落数时间&apos;,</span><br><span class="line">	`dl_etl_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;dl层数据落地时间&apos;,</span><br><span class="line">	`etl_dbs_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;创建日期&apos;,</span><br><span class="line">	PRIMARY KEY (`id`)</span><br><span class="line">)</span><br><span class="line">COLLATE=&apos;utf8_general_ci&apos;</span><br><span class="line">ENGINE=InnoDB</span><br><span class="line">AUTO_INCREMENT=27303502</span><br></pre></td></tr></table></figure>

<p>分析上述SQL查询语句的执行逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WHERE material=&apos;0060122449&apos; AND plant=&apos;null&apos;</span><br></pre></td></tr></table></figure>

<p>因为数据量很大，虽然这条语句的目的是只查询物料编号为：0060122449的相关信息，但实际却需要查询大量的数据，而且最后还需进行排序，所以是非常低效的。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>增添</strong>一个对material字段的<strong>索引</strong></p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/case2-2.png" alt></p>
<p>重新查看CPU利用率，发现MySQL CPU利用率很快的下降恢复正常。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/case2-3.png" alt></p>
]]></content>
      <tags>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL实例接入阿里云HDM</title>
    <url>/blog/2019/09/09/HDM/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于内网限制，需要通过搭建代理服务器 <a href="http://www.squid-cache.org/" target="_blank" rel="noopener"><strong>Squid</strong></a> 进行访问。</p>
<p>公司一般出于安全考虑， 在同一局域网中只有一台机器可以访问外网，运维进行了整体的限制， 但是在后面的工作中，需要在机器上安装一些软件，及命令，所以其他的机器需要访问外网来简化工作， 但又不能打乱原有运维的设置，所以需要在能访问外网的机器上做个代理。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="接入HDM"><a href="#接入HDM" class="headerlink" title="接入HDM"></a>接入HDM</h3><p><strong>服务器可以访问外网</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在opt目录下操作</span><br><span class="line">cd /opt</span><br><span class="line">           </span><br><span class="line">#执行部署命令，下载install-dbgateway</span><br><span class="line">sudo wget -O install-dbgateway http://hdm-dbgateway-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/DBGateway/install-dbgateway &amp;&amp; sudo /bin/bash install-dbgateway --id idc_zqSS2oMpeyKubndD --token 3E24C01713C83B7328F9A2F4C411078DC820E63FAFBC058F6635FAC5B0B4B7F2 --endpoint master-hdm-cn-hangzhou.aliyuncs.com --region default --native</span><br></pre></td></tr></table></figure>

<p><strong>服务器不可访问外网</strong></p>
<p>若直接执行部署命令失败，说明该服务器不可以访问外网，需要通过搭建代理服务器 <a href="http://www.squid-cache.org/" target="_blank" rel="noopener"><strong>Squid</strong></a> 进行访问。</p>
<p>代理服务器：10.133.0.53:3128已搭建完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在opt目录下操作</span><br><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">#查看dbgateway进程是否存在</span><br><span class="line">ps -ef|grep dbgateway  </span><br><span class="line"></span><br><span class="line"># 增加代理</span><br><span class="line">echo  &quot;</span><br><span class="line">http_proxy=10.133.0.53:3128</span><br><span class="line">https_proxy=10.133.0.53:3128</span><br><span class="line">ssl_proxy=10.133.0.53:3128</span><br><span class="line">tls_proxy=10.133.0.53:3128</span><br><span class="line">ftp_proxy=10.133.0.53:3128</span><br><span class="line">tcp_proxy=10.133.0.53:3128</span><br><span class="line">export http_proxy</span><br><span class="line">export https_proxy</span><br><span class="line">export ssl_proxy</span><br><span class="line">export ftp_proxy</span><br><span class="line">export tcp_proxy</span><br><span class="line">export tls_proxy&quot; &gt;&gt; /etc/profile ;  source /etc/profile</span><br><span class="line"></span><br><span class="line"># 修改wget代理配置文件</span><br><span class="line">echo &quot;</span><br><span class="line">https_proxy=http://10.133.0.53:3128/</span><br><span class="line">http_proxy=http://10.133.0.53:3128/</span><br><span class="line">ftp_proxy=http://10.133.0.53:3128/&quot; &gt;&gt; /etc/wgetrc ;  source /etc/wgetrc</span><br><span class="line"></span><br><span class="line"># 下载install-dbgateway</span><br><span class="line">sudo wget -O install-dbgateway http://hdm-dbgateway-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/DBGateway/install-dbgateway &amp;&amp; sudo /bin/bash install-dbgateway --id idc_zqSS2oMpeyKubndD --token 3E24C01713C83B7328F9A2F4C411078DC820E63FAFBC058F6635FAC5B0B4B7F2 --endpoint master-hdm-cn-hangzhou.aliyuncs.com --region default --native</span><br><span class="line"></span><br><span class="line"># 修改install-dbgateway</span><br><span class="line">注释以下代码</span><br><span class="line">curl -v --connect-timeout 3 --silent $&#123;endpoint&#125;:80 --output -</span><br><span class="line">if [ $? != 0 -a $? != 52 ]; then</span><br><span class="line">       echo &quot;Error! Can not connect to $&#123;endpoint&#125;:80, please check your network environment.&quot;</span><br><span class="line">       exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 完成接入</span><br><span class="line">sudo /bin/bash install-dbgateway --id idc_zqSS2oMpeyKubndD --token 3E24C01713C83B7328F9A2F4C411078DC820E63FAFBC058F6635FAC5B0B4B7F2 --endpoint master-hdm-cn-hangzhou.aliyuncs.com --region default --native</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 配置代理</span><br><span class="line">echo  &quot;</span><br><span class="line">http_proxy=http://qd-aliyun-proxy.haier.net:3128</span><br><span class="line">https_proxy=http://qd-aliyun-proxy.haier.net:3128</span><br><span class="line">ssl_proxy=http://qd-aliyun-proxy.haier.net:3128</span><br><span class="line">tls_proxy=http://qd-aliyun-proxy.haier.net:3128</span><br><span class="line">ftp_proxy=http://qd-aliyun-proxy.haier.net:3128</span><br><span class="line">tcp_proxy=http://qd-aliyun-proxy.haier.net:3128</span><br><span class="line">export http_proxy</span><br><span class="line">export https_proxy</span><br><span class="line">export ssl_proxy</span><br><span class="line">export ftp_proxy</span><br><span class="line">export tcp_proxy</span><br><span class="line">export tls_proxy&quot; &gt;&gt; /etc/profile ;  source /etc/profile</span><br><span class="line"></span><br><span class="line"># 配置wget代理</span><br><span class="line">echo &quot;</span><br><span class="line">https_proxy=http://qd-aliyun-proxy.haier.net:3128/</span><br><span class="line">http_proxy=http://qd-aliyun-proxy.haier.net:3128/</span><br><span class="line">ftp_proxy=http://qd-aliyun-proxy.haier.net:3128/&quot; &gt;&gt; /etc/wgetrc ;  source /etc/wgetrc</span><br><span class="line"></span><br><span class="line"># 下载install-dbgateway</span><br><span class="line">sudo wget -O install-dbgateway http://hdm-dbgateway-cn-qingdao.vpc100-oss-cn-qingdao.aliyuncs.com/DBGateway/install-dbgateway &amp;&amp; sudo /bin/bash install-dbgateway --id vpc-m5e6olft3vnne1ug6rdcd --token 3359FC7C28FB5B29459803F85B808D6D37B16B64FB2D56F485E632868E3C5798 --endpoint master-hdm-inner.cn-qingdao.aliyuncs.com --region cn-qingdao --native</span><br><span class="line"></span><br><span class="line"># 修改install-dbgateway</span><br><span class="line">注释以下代码</span><br><span class="line">curl -v --connect-timeout 3 --silent $&#123;endpoint&#125;:80 --output -</span><br><span class="line">if [ $? != 0 -a $? != 52 ]; then</span><br><span class="line">       echo &quot;Error! Can not connect to $&#123;endpoint&#125;:80, please check your network environment.&quot;</span><br><span class="line">       exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 安装完成</span><br><span class="line">sudo /bin/bash install-dbgateway --id vpc-m5e6olft3vnne1ug6rdcd --token 3359FC7C28FB5B29459803F85B808D6D37B16B64FB2D56F485E632868E3C5798 --endpoint master-hdm-inner.cn-qingdao.aliyuncs.com --region cn-qingdao --native</span><br></pre></td></tr></table></figure>

<p>查看dbgateway进程是否启动，若出现如下进程说明接入成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep dbgateway</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HDM1.png" alt></p>
<p>安装成功后，HDM会每隔10秒自动发现部署在主机上的数据库网关（DBGateway）“的主机，并自动进行数据库实例发现。</p>
<p><strong>查看部署的数据库网关</strong></p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HDM3.png" alt></p>
<h3 id="授权验证"><a href="#授权验证" class="headerlink" title="授权验证"></a>授权验证</h3><p>该步骤主要是输入数据库账号和密码，帮助集中式DBGateway通过数据库账号和密码以只读的方式获取数据库监控数据。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/HDM2.png" alt></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="判断-DBGateway-进程是否存活"><a href="#判断-DBGateway-进程是否存活" class="headerlink" title="判断 DBGateway 进程是否存活"></a>判断 DBGateway 进程是否存活</h3><p>只用于判断 DBGateway 进程是否存活，无法判断其是否正常工作。</p>
<p><strong>方法一</strong>：在HDM产品页面，DBGateway管理子界面上当前状态显示为“正常”即表示 DBGateway 进程存活。</p>
<p><strong>方法二</strong>：在DBGateway所在服务器上执行以下命令判断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/opt/dbgateway/bin/dbgateway-manager -d status</span><br></pre></td></tr></table></figure>

<p>进程存活输出样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DBGateway is running.</span><br></pre></td></tr></table></figure>

<p>进程不存在输出样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DBGateway is dead.</span><br></pre></td></tr></table></figure>

<h3 id="重启-DBGateway"><a href="#重启-DBGateway" class="headerlink" title="重启 DBGateway"></a>重启 DBGateway</h3><p>重启方式一：在HDM产品页面DBGateway管理功能中，选择对应的DBGateway，“管理” -&gt; “重启”</p>
<p>条件：DBGateway 进程存在</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/restart-dbgateway.png" alt></p>
<p>重启方式二：手工直接在DBGateway所在的服务器上执行以下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/opt/dbgateway/bin/dbgateway-manager -d restart</span><br></pre></td></tr></table></figure>

<h3 id="显示IP有误"><a href="#显示IP有误" class="headerlink" title="显示IP有误"></a>显示IP有误</h3><p>在 <code>dbgateway.conf</code> 文件中添加 <code>gateway.local.ip=</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/dbgateway/conf/</span><br><span class="line">vi dbgateway.conf</span><br><span class="line">gateway.local.ip = 实际IP</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>数据库监控入门</title>
    <url>/blog/2019/09/09/database-monitoring/</url>
    <content><![CDATA[<h2 id="Prometheus-Grafana"><a href="#Prometheus-Grafana" class="headerlink" title="Prometheus+Grafana"></a>Prometheus+Grafana</h2><h3 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h3><p>是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)，prometheus是一个监控采集与数据存储框架（监控server端），具体采集什么数据依赖于具体的exporter。</p>
<h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana:"></a>Grafana:</h3><p>一个高颜值的监控绘图程序，也是一个可视化面板（Dashboard），grafana的厉害之处除了高颜值，还支持多种数据源（支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源）、支持灵活丰富的dashboard配置选项。</p>
<p>通过Grafana可以将Prometheus中存储的数据进行可视化，很优美的进行展示。</p>
<h2 id="Prometheus介绍"><a href="#Prometheus介绍" class="headerlink" title="Prometheus介绍"></a>Prometheus介绍</h2><h3 id="什么是Prometheus"><a href="#什么是Prometheus" class="headerlink" title="什么是Prometheus"></a>什么是Prometheus</h3><p>Prometheus是一个开源监控系统，其前身是SoundCloud的警告工具包。</p>
<p>若想实现对于服务器或数据库的监控，首先我们需要获取到想要进行监控的相关数据。这里需要先了解一个小工具：node_exporter</p>
<p>举个例子，如果你有一台服务器，你想要获取它运行时的参数，比如当前的CPU负载、系统负载、内存消耗、硬盘使用量、网络IO等，那么你就可以在服务器上运行一个<code>node_exporter</code>，它能帮你收集好这些参数，并且暴露出一个HTTP接口，以便你访问查询。</p>
<p>通过使用node_exporter我们可以获取到该服务器的许多系统参数，如果我们为您只想监控这一台服务器，或只需要某个特定的参数我们可以自行编写代码访问这个接口，匹配出想要的指标和值即可。但是，如果有很多台服务器，而且想要综合多台进行对比分析，更有甚者，希望将指标绘制成图表，或者说保留历史数据，以便查询过去某个时间点的服务器的运行状态，那么这将会变得很麻烦。<code>Prometheus</code>就是用来解决这个问题的。</p>
<p>我们想要获取所有服务器上的node_exporter暴露出来的数据，就必须有个程序去定时访问这些接口。如果想要增加或者修改这些接口，那么就需要有个配置文件来记录这些服务器的地址。如果想要访问历史的某个时间点的数据，那么就必须按照<strong>时间顺序</strong>存储获取到的<strong>指标和值</strong>。如果想要将值绘制成图，也需要有代码去查询、计算和渲染。最后，你可能还希望：当服务器的某个指标超过一定的阈值时，向指定的接口发出告警信息。这一切都可以使用Prometheus来解决</p>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/Prometheus.png" alt="Prometheus 架构图"></p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter 。</p>
<h4 id="三大套件"><a href="#三大套件" class="headerlink" title="三大套件"></a>三大套件</h4><ul>
<li>Prometheus Server 主程序，负责数据采集和存储，抓取、聚合、查询方面提供PromQL查询语言的支持。</li>
<li>Alertmanager 警告管理器，主要用来实现报警功能。</li>
<li>Push Gateway 主要是实现接收由Client push过来的指标数据，在指定的时间间隔，由主程序来抓取。</li>
</ul>
<h3 id="服务过程："><a href="#服务过程：" class="headerlink" title="服务过程："></a>服务过程：</h3><p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/p.png" alt></p>
<ul>
<li>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。Prometheus支持通过配置文件、文本文件、Zookeeper、Consul、DNS SRV Lookup等方式指定抓取目标。Prometheus采用PULL的方式进行监控，即服务器可以直接通过目标PULL数据或者间接地通过中间网关来Push数据。</li>
<li>Prometheus在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</li>
<li>Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。Prometheus还提供HTTP API的查询方式，自定义所需要的输出。</li>
<li>PushGateway支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</li>
<li>Alertmanager是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</li>
</ul>
<h2 id="Grafana-1"><a href="#Grafana-1" class="headerlink" title="Grafana"></a>Grafana</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>prometheus官方的dashboard不怎么给力，为了将采集的数据更好的可视化，目前将Grafana集成了进去。Grafana可以自定义数据源，并且保存多个dashboard，针对不同的系统可以使用不同的dashboard来进行监控。</p>
<p>Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。它主要有以下六大特点：</p>
<ul>
<li>展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式；</li>
</ul>
<ul>
<li>数据源：Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB等；</li>
</ul>
<ul>
<li>通知提醒：以可视方式定义最重要指标的警报规则，Grafana将不断计算并发送通知，在数据达到阈值时通过Slack、PagerDuty等获得通知；</li>
</ul>
<ul>
<li>混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源；</li>
</ul>
<ul>
<li>注释：使用来自不同数据源的丰富事件注释图表，将鼠标悬停在事件上会显示完整的事件元数据和标记；</li>
</ul>
<ul>
<li>过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>案例1 · 数据库连接失败</title>
    <url>/blog/2019/09/09/MySQL%20connection%20failed/</url>
    <content><![CDATA[<h2 id="数据库连接失败"><a href="#数据库连接失败" class="headerlink" title="数据库连接失败"></a>数据库连接失败</h2><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>1）HeidiSQL是否能够连上数据库 ？</p>
<p>2）登录服务器，查看 <code>mysqld</code> 进程是否存在，如果进程不存在，可能是服务器断电导致进程未自启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh haieradmin@10.138.40.223 -p 18022</span><br><span class="line">$ ssh haieradmin@10.138.16.192$ </span><br><span class="line">ssh haieradmin@x.x.x.x (ssh root@x.x.x.x)  &apos;Haier,123/Haier@123/Changeme_123&apos;</span><br><span class="line">$ ps -ef | grep mysqld</span><br><span class="line">root      64511  64440  0 10:27 pts/2    00:00:00 grep --color=auto mysqld</span><br><span class="line">root      79355      1  0 Aug31 ?        00:00:00 /bin/sh/usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</span><br><span class="line">mysql     79981  79355 99 Aug31 ?        2-01:38:14 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/error.log --pid-file=/data/mysql/mysql.pid --socket=/data/mysql/mysql.sock --port=3306</span><br></pre></td></tr></table></figure>

<p>3）登录<code>mysql</code>，查看线程状态，查看是否有锁占用，或者线程大量阻塞情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -S /data/mysql/mysql.sock -usre -p&apos;sre@@p$i&apos;</span><br><span class="line">mysql&gt; show processlist;</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li>如果是因为断电导致的进程未自启动，启动 <code>mysql</code> 进程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /etc/init.d</span><br><span class="line">$ ./mysqld stop/start</span><br><span class="line">$ cd /usr/local/mysql/support-files</span><br><span class="line">$ ./mysql.server stop/start</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是因为有锁占用或线程大量阻塞，删除正在执行的锁表线程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 杀掉ID为1的线程, 关闭连接</span><br><span class="line">kill id; </span><br><span class="line"># 查询出时间大于10的线程, 复制查询结果，批量执行</span><br><span class="line">select concat(&apos;kill &apos;, id, &apos;;&apos;) from information_schema.processlist where time &gt; 10;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>MySQL运维工具Percona Toolkit</title>
    <url>/blog/2019/09/06/Percona%20Toolkit/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Percona Toolkit包含多种用于 MySQL 数据库管理的工具，是一组高级命令行工具的集合，使用 Perl 语言编写和执行。</p>
<p>通过使用Percona Toolkit可以查看当前服务的摘要信息，磁盘检测，分析慢查询日志，查找重复索引，实现表同步等等</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载解压安装包"><a href="#下载解压安装包" class="headerlink" title="下载解压安装包"></a>下载解压安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/percona-toolkit-3.0.13-el7-x86_64-bundle.tar</span><br><span class="line"># tar xvf percona-toolkit-3.0.13-el7-x86_64-bundle.tar</span><br><span class="line">- percona-toolkit-3.0.13-1.el7.x86_64.rpm</span><br><span class="line">- percona-toolkit-debuginfo-3.0.13-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rpm -ivh percona-toolkit-3.0.13-1.el7.x86_64.rpm</span><br><span class="line">warning: percona-toolkit-3.0.13-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID 8507efa5: NOKEY</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">	perl(DBD::mysql) &gt;= 1.0 is needed by percona-toolkit-3.0.13-1.el7.x86_64</span><br><span class="line">	perl(IO::Socket::SSL) is needed by percona-toolkit-3.0.13-1.el7.x86_64</span><br><span class="line">	perl(Digest::MD5) is needed by percona-toolkit-3.0.13-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="安装提示所需要的安装包"><a href="#安装提示所需要的安装包" class="headerlink" title="安装提示所需要的安装包"></a>安装提示所需要的安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum -y install perl-DBD-MySQL</span><br><span class="line"># yum -y install perl-Digest-MD5</span><br><span class="line"># yum -y install perl-IO-Socket-SSL</span><br><span class="line"># yum -y install perl-TermReadKey</span><br><span class="line"># rpm -ivh percona-toolkit-3.0.13-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">通过下面的命令确认是否安装成功：</span><br><span class="line"># pt-archiver --help</span><br><span class="line"># pt-table-checksum --help</span><br><span class="line">Usage: pt-archiver [OPTIONS] --source DSN --where WHERE     #命令提示可以正常显示，则说明pt工具已经正常安装和使用了。</span><br></pre></td></tr></table></figure>

<h3 id="工具汇总"><a href="#工具汇总" class="headerlink" title="工具汇总"></a>工具汇总</h3><table>
<thead>
<tr>
<th align="left">工具命令</th>
<th align="left">工具作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pt-align</td>
<td align="left">对齐其他工具的输出</td>
</tr>
<tr>
<td align="left"><strong>pt-archiver</strong></td>
<td align="left">将表数据归档到另一个表或文件中</td>
</tr>
<tr>
<td align="left">pt-config-diff</td>
<td align="left">比较配置文件和参数</td>
</tr>
<tr>
<td align="left">pt-deadlock-logger</td>
<td align="left">提取和记录mysql死锁信息</td>
</tr>
<tr>
<td align="left">pt-diskstats</td>
<td align="left">查看系统磁盘状态</td>
</tr>
<tr>
<td align="left">pt-duplicate-key-checker</td>
<td align="left">列出并删除重复的索引和外键</td>
</tr>
<tr>
<td align="left">pt-fifo-split</td>
<td align="left">模拟切割文件并输出</td>
</tr>
<tr>
<td align="left">pt-find</td>
<td align="left">查找表并执行命令</td>
</tr>
<tr>
<td align="left">pt-fingerprint</td>
<td align="left">将查询转成密文</td>
</tr>
<tr>
<td align="left">pt-fk-error-logger</td>
<td align="left">提取和记录外键信息</td>
</tr>
<tr>
<td align="left">pt-heartbeat</td>
<td align="left">监控mysql复制延迟</td>
</tr>
<tr>
<td align="left">pt-index-usage</td>
<td align="left">分析日志中索引使用情况，并出报告</td>
</tr>
<tr>
<td align="left">pt-ioprofile</td>
<td align="left">查询进程IO并打印一个IO活动表</td>
</tr>
<tr>
<td align="left">pt-kill</td>
<td align="left">Kill掉符合条件的sql</td>
</tr>
<tr>
<td align="left">pt-mext</td>
<td align="left">并行查看status样本信息</td>
</tr>
<tr>
<td align="left">pt-mongodb-query-digest</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">pt-mongodb-summary</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">pt-mysql-summary</td>
<td align="left">对mysql配置和status进行汇总</td>
</tr>
<tr>
<td align="left">pt-online-schema-change</td>
<td align="left">在线修改表结构</td>
</tr>
<tr>
<td align="left">pt-pmp</td>
<td align="left">为查询结果跟踪，并汇总跟踪结果</td>
</tr>
<tr>
<td align="left">pt-query-digest</td>
<td align="left">分析查询日志，并产生报告</td>
</tr>
<tr>
<td align="left">pt-secure-collect</td>
<td align="left">收集、打包、加密数据</td>
</tr>
<tr>
<td align="left">pt-show-grants</td>
<td align="left">规范化和打印权限</td>
</tr>
<tr>
<td align="left">pt-sift</td>
<td align="left">浏览由pt-stalk创建的文件</td>
</tr>
<tr>
<td align="left">pt-slave-delay</td>
<td align="left">设定从落后主的时间</td>
</tr>
<tr>
<td align="left">pt-slave-find</td>
<td align="left">查找和打印所有mysql复制层级关系</td>
</tr>
<tr>
<td align="left">pt-slave-restart</td>
<td align="left">监控salve错误，并尝试重启salve</td>
</tr>
<tr>
<td align="left">pt-stalk</td>
<td align="left">出现问题时，收集诊断数据</td>
</tr>
<tr>
<td align="left">pt-summary</td>
<td align="left">收集和显示系统概况</td>
</tr>
<tr>
<td align="left">pt-table-checksum</td>
<td align="left">校验主从复制一致性</td>
</tr>
<tr>
<td align="left">pt-table-sync</td>
<td align="left">高效同步表数据</td>
</tr>
<tr>
<td align="left">pt-table-usage</td>
<td align="left">分析日志中查询并分析表使用情况</td>
</tr>
<tr>
<td align="left">pt-upgrade</td>
<td align="left">在多个服务器上执行查询，并比较不同</td>
</tr>
<tr>
<td align="left">pt-variable-advisor</td>
<td align="left">分析参数，并提出建议</td>
</tr>
<tr>
<td align="left">pt-visual-explain</td>
<td align="left">格式化执行计划</td>
</tr>
</tbody></table>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="pt-archiver"><a href="#pt-archiver" class="headerlink" title="pt-archiver"></a>pt-archiver</h3><p>pt-archiver 是 Percona 官方提供的归档工具，用于归档大型表中的记录到另一个表或文件。</p>
<p>将数据根据条件进行归档可以减少数据量。</p>
<p><strong>功能描述</strong></p>
<ul>
<li>归档到操作系统文件</li>
<li>归档到同实例不同库下的表（<strong>tips</strong>：归档操作前，目标表要存在）</li>
<li>归档到不同实例下的表（<strong>tips</strong>：归档操作前，目标表要存在）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将10.138.228.231的matomo数据库下matomo_log_link_visit_action表的数据按条件归档matomo_log_link_visit_action_history表中</span><br><span class="line">pt-archiver --source h=10.138.228.231,P=3306,u=sre,p=&apos;xxx&apos;,D=matomo,t=matomo_log_link_visit_action --charset=utf8 --dest h=10.138.228.231,P=3306,u=sre,p=&apos;xxx&apos;,D=matomo,t=matomo_log_link_visit_action_history --where &quot;server_time &lt; &apos;2019-01-01&apos;&quot; --limit 1000 --commit-each --bulk-insert --no-version-check</span><br><span class="line"></span><br><span class="line"># h=10.138.228.231               -- 数据库实例地址</span><br><span class="line"># P=3306                         -- 数据库实例端口</span><br><span class="line"># u=sre                          -- 数据库实例用户</span><br><span class="line"># p=xxx                          -- 数据库实例用户密码</span><br><span class="line"># D=matomo                       -- 数据库实例数据库</span><br><span class="line"># t=matomo_log_link_visit_action -- 数据库实例表名称</span><br><span class="line"></span><br><span class="line"># --source                       -- 指定要被归档的数据源</span><br><span class="line"># --charset=utf8                 -- 使用的字符集，需与表字符集一致</span><br><span class="line"># --file                         -- 指定目标操作系统文件名</span><br><span class="line"># --dest                         -- 指定归档到的目标表</span><br><span class="line"># --where &quot;id &gt; 3008&quot;            -- 指定 where 过滤条件，过滤出要归档的数据</span><br><span class="line"># --limit 1000                   -- 每条语句读取和归档的数据行数，默认是 1</span><br><span class="line"># --commit-each                  -- 每次获取和归档数据后，commit提交</span><br><span class="line"># --no-version-check             -- 不做版本检查</span><br><span class="line"># --bulk-insert                  -- 批量插入数据，会自动启用 --bulk-delete --commit-each，每次插入行数通过--limit 选项指定</span><br><span class="line"># --statistics                   -- 显示 pt-archiver 本次操作的统计信息。</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>事务</title>
    <url>/blog/2019/09/02/MySQL-Transaction/</url>
    <content><![CDATA[<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是一组DML（insert、delete、update）语句的集合，是逻辑上的一组操作。MySQL数据库InnoDB存储引擎支持事务，MyISAM不支持。MySQL的事务默认是自提交式的</p>
<h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性是指事务中包含的<strong>操作要么全部成功，要么全部失败回滚</strong>。事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。保证数据库是一致的。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>一致性指事务前后<strong>数据的完整性</strong>必须保持一致。一致性关注数据的可见性，中间状态的数据对外部不可见，只有最初状态和最终状态的数据对外可见。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>
<p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>持久性指一个事务一旦被提交了，其对数据的修改就是<strong>永久</strong>的，即使系统发生故障也不会丢失提交事务的操作。</p>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>数据库的隔离级别有四种，由低到高分别为Read uncommitted(读未提交)、Read committed(读已提交)、Repeatable read(可重复读)、Serializable(序列化)，用来限定事务内外的哪些改变是可见的，哪些是不可见的。</p>
<p>注意：大多数数据库默认的事务隔离级别是<strong>Read committed</strong>，比如Sql Server , Oracle。但<strong>Mysql</strong>的默认隔离级别是<strong>Repeatable read。</strong></p>
<p>MySQL通过 show variables like ‘%tx_isolation%’ 命令查看当前数据库的隔离级别。</p>
<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/MySQL-Transaction1.png" alt></p>
<h3 id="读未提交（Read-uncommitted）"><a href="#读未提交（Read-uncommitted）" class="headerlink" title="读未提交（Read uncommitted）"></a>读未提交（Read uncommitted）</h3><p>一个事务可以读取到其他事务未提交的数据变化，这种读取其他会话还未提交的事务，叫作<strong>脏读</strong>现象。</p>
<p><strong>举例：</strong></p>
<p>小A的工资是3000,但是发工资时,老板按错了数字,按成了30000元（老板事务）,但是事务还没有提交,就在这个时候,小A去查询了工资（小A事务开启）,以为涨工资了非常开心,但老板发现不对,及时回滚数据,再重新改成3000进行提交。</p>
<p><strong>分析：</strong>小A最终获得的工资仍为3000，其看到的是老板还未提交事务时的数据，这是<strong>脏读现象</strong>。</p>
<p><strong>解决方案：读已提交能解决脏读问题。</strong></p>
<h3 id="读已提交（Read-committed）"><a href="#读已提交（Read-committed）" class="headerlink" title="读已提交（Read committed）"></a>读已提交（Read committed）</h3><p>一个事务要等另一个事务提交后才可以读取数据，这种读取也叫做<strong>不可重复读。</strong></p>
<p><strong>举例：</strong></p>
<p>小A去商场购物(卡余额3000元),当他准备进行买单时(小A事务开启),收费系统检测到小A的卡主有3000元可以支付,就在这时,小A的女朋友需要把钱全部转出去充当家用,并提交(女朋友事务在小A前),当收费系统准备扣款时,再检测卡里的金额，发现已经没钱了,结果小A购物失败….</p>
<p><strong>分析：</strong>事务A对数据进行更新操作时,事务B的读操作需要等待事务A更新操作提交完成后,才能读取数据,可以解决脏读问题。但是在本场景中,在收费系统这一个事务范围,两次相同的查询,却获取到了不同的结果,这就是不可重复读(两次执行一样查询,结果却不同)。</p>
<p><strong>解决方案</strong>：<strong>可重复读能解决不可重复读问题。</strong></p>
<h3 id="可重复读（Repeatable-read）"><a href="#可重复读（Repeatable-read）" class="headerlink" title="可重复读（Repeatable read）"></a>可重复读（Repeatable read）</h3><p>在事务开启进行读数据时<strong>,不允许修改</strong>操作。</p>
<p><strong>举例：</strong></p>
<p>小A去购物(卡里余额3000元),当他准备买单时(事务开启,不允许其他事务更新操作),收费系统检测他卡中余额3000元,他的女朋友又想转出这3000元作为家用,但是转出失败(无法更新修改)，收费系统扣款成功,小A顺利完成了购物。</p>
<p><strong>分析：</strong>可重复读能够<strong>解决不可重读</strong>问题,但是可重复读对应的是修改(Update)操作,还是可能<strong>中途会出现插入(Insert)操作,</strong>会产生出<strong>幻读</strong>问题.</p>
<p><strong>举例：</strong></p>
<p>小A去查询消费记录(事务开启),发现消费了1000元,卡中还剩2000元，这时老板发工资了，新增了3000元(老板事务insert了一条记录并提交)，小A打印消费清单时(事务提交)，发现清单上的余额是5000元,跟之前的查询的记录不对,这就是幻读.</p>
<p><strong>幻读：</strong>指的是一个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行(phantom row)</p>
<h3 id="序列化（Serializable）"><a href="#序列化（Serializable）" class="headerlink" title="序列化（Serializable）"></a>序列化（Serializable）</h3><p>Serializable 是<strong>最高的事务隔离级别</strong>，每个读数据行加表级共享锁，每次写数据时加表级排他锁。</p>
<p>在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p>
<h2 id="事务操作命令"><a href="#事务操作命令" class="headerlink" title="事务操作命令"></a>事务操作命令</h2><p><strong>1. 查看数据库引擎是否支持事务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/MySQL-Transaction2.png" alt></p>
<p><strong>2.查看Mysql默认储存引擎</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &apos;%storage_engine%&apos;;</span><br></pre></td></tr></table></figure>

<p><img src="https://mino-yn.oss-cn-qingdao.aliyuncs.com/blog/MySQL-Transaction3.png" alt></p>
<p><strong>3.创建事务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//开启事务</span><br><span class="line">start transaction;          //两者等价</span><br><span class="line">begin;</span><br></pre></td></tr></table></figure>

<p><strong>4.提交事务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//提交</span><br><span class="line">commit                      //二者等价</span><br><span class="line">commit work</span><br><span class="line"></span><br><span class="line">//提交后开启一个新事务</span><br><span class="line">commit and chain</span><br></pre></td></tr></table></figure>

<p><strong>5.回滚事务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//回滚</span><br><span class="line">rollback;                   //两者等价</span><br><span class="line">rollback work;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的配置文件</title>
    <url>/blog/2019/08/29/my-cnf/</url>
    <content><![CDATA[<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>my.cnf是数据库的配置文件，my.cnf文件就是把在命令行上启动MySQL时后面的参数用my.cnf配置好，使得在下载启动时无需再命令上加参数。</p>
<p>MySQL的很多性能优化工作、主从复制等都是在调整参数以适应不同时期不同数量级的数据，因此理解my.cnf中的参数非常重要，只有理解了参数设置，才能对数据库进行某些方面的调优工作。</p>
<p>my.cnf文件，分为Client section 和 Server section两块</p>
<h3 id="Client-section"><a href="#Client-section" class="headerlink" title="Client section"></a>Client section</h3><p>配置MySQL客户端参数，常见参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]             #客户端设置，客户端默认的连接参数</span><br><span class="line">port                      = 3306                       #连接服务器默认端口            </span><br><span class="line">socket                    = /data/mysql/mysql.sock     #用于本地连接的套接字文件，与服务端配置相同</span><br><span class="line">default-character-set     = utf8mb4                #编码</span><br></pre></td></tr></table></figure>

<h3 id="Server-section"><a href="#Server-section" class="headerlink" title="Server section"></a>Server section</h3><p>可以通过 show variables like ‘%参数名%’ 来查看MySQL数据库中的参数。</p>
<p>MySQL Server端核心参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innodb_buffer_pool                   #缓存被访问过的表和索引文件，一般设置为物理内存的50%-80%</span><br><span class="line">innodb_buffer_pool_instance          #把innodb_buffer_pool划分为多个实例，提高并发性</span><br><span class="line">innodb_buffer_pool_load_at_startup   #开启这两个参数后可将热数据快速加载回来 </span><br><span class="line">innodb_buffer_pool_dump_at_shutdown </span><br><span class="line">innodb_data_file_path                #指定系统表空间文件的路径和ibdata1文件的大小，建议1G</span><br><span class="line">innodb_thread_concurrency            #InnoDB内核最大并发线程数，默认为0，代表不受限制</span><br><span class="line">max_connections                      #MySQL数据库的最大连接数	</span><br><span class="line">expire_logs_days                     #binlog的过期时间，单位：天</span><br><span class="line">slow_query_log                       #慢查询日志的开关，生产环境需开启慢查询</span><br><span class="line">long_query_time                      #慢查询时间，单位：秒  SQL语句超过该参数所设时间，将被记录至慢查询日志</span><br><span class="line">server-id                            #标识MySQL主从结构中的唯一标识，搭建主从环境时，两台机器的server-id不能一样</span><br><span class="line">binlog_format                        #二进制日志格式，Binlog格式：statement、row、mixed 生产环境建议使用row</span><br><span class="line">lower_case_table_names               #表名是否区分大小写，0:区分 1:不区分，以小写储存</span><br></pre></td></tr></table></figure>

<h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><p>MySQL数据库将参数分为两类：1、动态参数  2、静态参数</p>
<h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>在MySQL实例的运行过程中，可以对动态参数进行在线修改，可通过 set global 或 set session 两个命令进行设置</p>
<p><strong>global：</strong> 全局参数，用global进行修改，退出当前会话后仍然生效，但重启数据库，参数仍会失效。</p>
<p><strong>session：</strong> 只针对当前会话生效，退出后设置的参数立即失效。</p>
<h4 id="静态参数："><a href="#静态参数：" class="headerlink" title="静态参数："></a>静态参数：</h4><p>在线无法修改参数，只能将需要修改的参数写到配置文件中，重启数据库才可以</p>
<h3 id="my-cnf"><a href="#my-cnf" class="headerlink" title="my.cnf"></a>my.cnf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]     #客户端设置，客户端默认的连接参数</span><br><span class="line">port                      = 3306                     #连接服务器默认端口            </span><br><span class="line">socket                    = /data/mysql/mysql.sock   #用于本地连接的套接字文件，与服务端配置相同</span><br><span class="line"></span><br><span class="line">[mysqld]     #服务端基本设置</span><br><span class="line">port                      = 3306                     #指定MySQL开放的端口</span><br><span class="line">socket                    = /data/mysql/mysql.sock   #套接字文件</span><br><span class="line">pid_file                  = /data/mysql/mysql.pid    #pid文件所在目录</span><br><span class="line">basedir                   = /usr/local/mysql         #MySQL的安装目录</span><br><span class="line">datadir                   = /data/mysql              #MySQL数据文件存放目录</span><br><span class="line">character_set_server      = utf8                     #服务端默认编码</span><br><span class="line"></span><br><span class="line"># LOG        #日志设置</span><br><span class="line">slow_query_log            = 1                        #慢查询日志的开关</span><br><span class="line">long_query_time           = 5                        #慢查询时间</span><br><span class="line">log_error                 = /data/mysql/error.log    #错误日志路径</span><br><span class="line">slow_query_log_file       = /data/mysql/slow.log     #慢查询日志路径</span><br><span class="line"></span><br><span class="line"># INNODB</span><br><span class="line">innodb_data_home_dir      = /data/mysql              #innodb引擎的共享表空间数据文件根目录</span><br><span class="line">innodb_buffer_pool_size   = 10240M                   #缓存被访问过的表和索引文件，位于主内存中</span><br><span class="line">innodb_log_file_size      = 1G                       #Redo log日志的大小</span><br><span class="line">innodb_data_file_path     = ibdata1:1G:autoextend    #指定innodb共享表空间文件的路径和ibdatal文件的大小</span><br><span class="line"></span><br><span class="line"># OTHER</span><br><span class="line">max_connections           = 3000                     #MySQL数据库的最大连接数</span><br><span class="line">interactive_timeout       = 600                      #服务器关闭交互式连接前等待活动的时间</span><br><span class="line">wait_timeout              = 600                      #服务器关闭非交互式连接前等待活动的时间</span><br><span class="line">lower_case_table_names    = 1                        #表名是否区分大小写，0区分大小写，1不区分。默认：0 </span><br><span class="line">log_timestamps            = SYSTEM                   #控制 error log、slow_log、genera log等记录日志的显示时间为系统时间</span><br><span class="line">explicit_defaults_for_timestamp = 1                  #未指定timestamp列为not null时允许向timestamp列插入null值</span><br><span class="line">skip-ssl                                             #关闭ssl功能</span><br><span class="line">skip-name-resolve                                    #禁用DNS解析</span><br><span class="line"></span><br><span class="line"># REPLICATION</span><br><span class="line">server-id                 = 3306100                  #用于表示MySQL主从关系的唯一标识，搭建主从环境时，两台机器的server-id不能一样</span><br><span class="line">log-bin                   = /data/mysql/mysql-bin    #二进制文件路径</span><br><span class="line">sync_binlog               = 0                        #MySQL不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。</span><br><span class="line">max_binlog_size           = 1024M                    #最大二进制日志文件大小</span><br><span class="line">binlog-format             = row                      #二进制日志的格式，有statement、row、mixed三种，生产环境使用row格式更安全，不会出现跨库复制丢数据的情况</span><br><span class="line">expire_logs_days          = 15                       #binlog的过期时间，单位为天</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/blog/2019/08/29/MySQL%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="认识索引"><a href="#认识索引" class="headerlink" title="认识索引"></a>认识索引</h2><p>索引<strong>是一个排序的列表</strong>，列表中存储着<strong>索引的值</strong>和包含这个值的<strong>数据所在行的物理地址</strong>，索引就好比书的<strong>目录页</strong>，在数据十分庞大的时候，索引可以大大加快查询的速度。因为使用索引后可以不用扫描全表来定位某行的数据，而是先通过<strong>索引表</strong>（是一个文件，需要占据物理空间）找到该行数据对应的<strong>物理地址</strong>然后访问相应的数据。</p>
<p><strong>对于InnoDB存储引擎：</strong></p>
<ul>
<li>.frm 后缀的文件存储的是表结构。</li>
<li>.ibd后缀的文件存放索引文件和数据(需要开启<code>innodb_file_per_table</code>参数)</li>
</ul>
<p>当对一张表建立索引时，索引文件的大小也会改变，当数据表中的数据因为增删改操作发生变化时，索引文件也会变化，但这个过程是由MySQL进行自动维护实现的，无需人为介入。这也是为什么不恰当的索引会影响MySQL性能的原因。</p>
<p><strong>总结：</strong></p>
<ul>
<li>索引是按照特定的数据结构把数据表中的数据放在索引文件中，以便于快速查找；</li>
<li>索引存在于磁盘中，会占据物理空间。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>提高数据检索效率</li>
<li>提高聚合函数效率</li>
<li>提高排序效率</li>
<li>使用覆盖索引可避免回表</li>
</ul>
<p><strong>创建索引注意事项：</strong></p>
<ul>
<li>选择性低的字段不要创建索引</li>
<li>很少查询的字段不要创建索引</li>
<li>大数据类型不要创建索引</li>
<li>尽量避免使用null，含有空值的列很难进行查询优化，可以使用空字符串代替</li>
</ul>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="聚集索引和普通索引"><a href="#聚集索引和普通索引" class="headerlink" title="聚集索引和普通索引"></a>聚集索引和普通索引</h3><p>MySQL数据库的B+tree索引分为两大类：<strong>1、聚集索引   2、普通索引</strong></p>
<p><strong>聚集索引</strong>叶子结点存放表中<strong>所有行记录</strong>的信息，表中存储的数据按照索引的顺序存储，检索效率比非聚集索引高，但对数据更新影响较大，创建表时需显示的为表<strong>创建一个主键</strong>（聚集索引）。表中存储的数据按照索引的顺序存储，<strong>检索效率高</strong>，但对数据更新影响较大。</p>
<p><strong>普通索引</strong>数据存储在一个地方，索引存储在另一个地方，索引带有指针指向数据的存储位置。普通索引的叶子结点<strong>不包含所有行的数据记录</strong>，只有自己本身的键值和主键的值。普通索引检索效率比聚集索引低，但对数据更新影响较小。</p>
<h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>主键索引其实就是聚集索引，<strong>每张表有且仅有一个主键</strong>，主键可由表的一个或多个字段组成。最好选择与表的其他字段不相关的列或者是业务不相关的列。一般会设为 int 而且是 AUTO_INCREMENT自增类型的。</p>
<p><strong>总结：</strong></p>
<ul>
<li>主键值唯一</li>
<li>不包含null值</li>
<li>为提高存取效率，需使用自增键作为主键</li>
</ul>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>与普通索引类似,但是唯一索引要求索引列的值是<strong>唯一</strong>的,但可以<strong>允许有空值</strong>。 建立唯一索引一个比较重要的作用是避免数据出现重复。</p>
<p><strong>总结：</strong></p>
<ul>
<li>索引列值唯一</li>
<li>可以包含null值</li>
<li>唯一索引可以有多个</li>
</ul>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据该索引就叫做覆盖索引。</p>
<p>不是所有类型的索引都可成为覆盖索引，覆盖索引必须要存储索引的列，而哈希索引、空间索引和全文索引等都不存储索引列的值，都不能作为覆盖索引。</p>
<p>当发起一个被索引覆盖的查询时，在EXPLAIN的Extra列可以看到“Using index”的信息</p>
<h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>对于BLOB、TEXT或很长的VARCHAR类型的列，可为其前几个字符建立索引，该索引称为前缀索引</p>
<ul>
<li><p>优点：索引更小，查询更快</p>
</li>
<li><p>缺点：不能在order by 或 group by中使用索引，也不能将其用作覆盖索引。</p>
</li>
</ul>
<h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><p>对多个字段同时建立的索引（有顺序，ABC，ACB是完全不同的两种联合索引），使用过程中满足最左前缀原则，将选择性高的放在前面。</p>
<p>建立联合索引(a,b,c)，相当于建立了索引a、ab、abc三个索引。</p>
<h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>采用哈希算法，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。检索时只需一次哈希算法就可以定位至相应的位置，查询速度快。但哈希索引只能进行等值查询，不能进行排序、模糊查询、范围查询等。</p>
<h2 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看表中有哪些索引</span><br><span class="line">show index from table_name</span><br><span class="line"></span><br><span class="line">#使用explain命令查看SQL语句的执行计划，示例：</span><br><span class="line">expain select*from t where name =&apos;name1&apos;;</span><br><span class="line"></span><br><span class="line">#创建普通索引</span><br><span class="line">alter table table_name add index index_name (索引字段);</span><br><span class="line">create index index_name on table_name(索引字段)</span><br><span class="line"></span><br><span class="line">#创建主键</span><br><span class="line">alter table table_name primary key (column);</span><br><span class="line"></span><br><span class="line">#创建唯一索引</span><br><span class="line">alter table table_name add unique(column);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>技能树</title>
    <url>/blog/2019/08/28/%E6%8A%80%E8%83%BD%E6%A0%91/</url>
    <content><![CDATA[<h2 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li>基础概念</li>
<li>事务</li>
<li>存储引擎</li>
<li>InnoDB体系结构</li>
<li>SQL执行过程</li>
<li>information_schema</li>
<li>performance_schema</li>
<li>索引</li>
<li>锁</li>
<li>视图</li>
<li>存储过程</li>
<li>事件</li>
<li>触发器</li>
<li>分区</li>
<li>复制</li>
<li>备份</li>
<li>HA</li>
<li>SQL</li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul>
<li>ssh</li>
<li>grep</li>
<li>scp</li>
<li>ps/kill</li>
<li>top</li>
<li>awk</li>
<li>sed</li>
</ul>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><h2 id="MySQL基本运维能力"><a href="#MySQL基本运维能力" class="headerlink" title="MySQL基本运维能力"></a>MySQL基本运维能力</h2><ul>
<li><a href="https://mino-yn.github.io/blog/2019/08/09/Download-MySQL/">安装MySQL</a></li>
<li>监控</li>
<li><a href="https://mino-yn.github.io/blog/2019/08/27/MySQL%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/">权限管理</a></li>
<li>备份</li>
<li>SQL优化</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MySQL权限管理</title>
    <url>/blog/2019/08/27/MySQL%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="权限表的存取"><a href="#权限表的存取" class="headerlink" title="权限表的存取"></a>权限表的存取</h2><h3 id="权限表"><a href="#权限表" class="headerlink" title="权限表"></a>权限表</h3><p>MySQL中权限的设置存储在数据库的权限表中：</p>
<ul>
<li>mysql.user：用户表、user表中的列分为：用户列、权限列、安全列和资源控制列。</li>
<li>mysql.db：数据库权限设置</li>
<li>mysql.table_priv：表权限设置</li>
<li>mysql.column_priv：列权限设置</li>
</ul>
<h3 id="权限组成结构："><a href="#权限组成结构：" class="headerlink" title="权限组成结构："></a>权限组成结构：</h3><ul>
<li>用户：有自己的用户名和密码，并且拥有能够操作的权限。</li>
<li>操作权限：限制一个用户能够做什么，可以配置到<strong>全局/数据库/表/列</strong></li>
</ul>
<h3 id="权限存取过程"><a href="#权限存取过程" class="headerlink" title="权限存取过程"></a>权限存取过程</h3><p>用户进行连接时，权限表的存取重要分为两个过程</p>
<ul>
<li>通过user表中的host、user、password三个字段与连接的IP、用户名、密码进行对比实现用户身份的验证。</li>
<li>若通过身份验证，则按权限表权限范围依次递减（ user -&gt; db -&gt; tables_priv -&gt; columns_priv） 的顺序得到数据库权限。</li>
</ul>
<h2 id="权限的相关命令"><a href="#权限的相关命令" class="headerlink" title="权限的相关命令"></a>权限的相关命令</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant 权限</span><br><span class="line">on 数据库对象</span><br><span class="line">to 用户 identified by 密码</span><br><span class="line">with grant option(给别人权限)</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建用户 </span><br><span class="line">create user &apos;用户名&apos;@&apos;访问限制&apos; identified by &apos;密码&apos;;</span><br><span class="line"></span><br><span class="line"># 赋予useradmin用户select、insert权限  *.*代表所有数据库对象 </span><br><span class="line">grant select,insert on *.* to &apos;useradmin&apos;@&apos;%&apos;;  </span><br><span class="line"></span><br><span class="line"># 创建useradmin用户并且赋予权限 </span><br><span class="line">grant select,insert on *.* to &apos;useradmin&apos;@&apos;%&apos; identified by &apos;密码&apos;;</span><br><span class="line"></span><br><span class="line">#加上with grant option(给别人权限)权限</span><br><span class="line">grant select,insert on *.* to &apos;useradmin&apos;@&apos;%&apos; identified by &apos;密码&apos; with grant option;</span><br></pre></td></tr></table></figure>

<h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看当前用户权限</span><br><span class="line">show grants;</span><br><span class="line"></span><br><span class="line">#查看特定用户权限</span><br><span class="line">show grants for 用户@访问限制;</span><br></pre></td></tr></table></figure>

<h3 id="回收权限"><a href="#回收权限" class="headerlink" title="回收权限"></a>回收权限</h3><p>使用revoke撤销全部权限，<strong>操作者必须拥有全局的create user或update权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">revoke 权限 on 数据库对象 from 用户;</span><br><span class="line"></span><br><span class="line">#示例：</span><br><span class="line">revoke all on *.* form useradmin;</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">drop user 用户@限制访问;</span><br><span class="line">#实例</span><br><span class="line">drop user &apos;useradmin&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL主要权限"><a href="#MySQL主要权限" class="headerlink" title="MySQL主要权限"></a>MySQL主要权限</h2><table>
<thead>
<tr>
<th>权限</th>
<th>权限说明</th>
</tr>
</thead>
<tbody><tr>
<td>all privileges</td>
<td>除grant外的所有权限</td>
</tr>
<tr>
<td>select</td>
<td>通过SELECT命令选择数据</td>
</tr>
<tr>
<td>insert</td>
<td>通过INSERT命令插入数据</td>
</tr>
<tr>
<td>update</td>
<td>通过UPDATE命令修改现有数据</td>
</tr>
<tr>
<td>delete</td>
<td>通过DELETE命令删除现有数据</td>
</tr>
<tr>
<td>create</td>
<td>创建新的数据库和表</td>
</tr>
<tr>
<td>drop</td>
<td>删除现有数据库和表</td>
</tr>
<tr>
<td>alter</td>
<td>使用alter table 重命名和修改表结构</td>
</tr>
<tr>
<td>reload</td>
<td>使用flush刷新和重新加载MySQL所用各种内部缓存</td>
</tr>
<tr>
<td>shutdown</td>
<td>使用mysqladmin shutdown(关闭MySQL)</td>
</tr>
<tr>
<td>process</td>
<td>使用show full processlist查看其他用户进程，服务器管理</td>
</tr>
<tr>
<td>file</td>
<td>使用select into outfile 和load data infile命令；加载服务器上的文件</td>
</tr>
<tr>
<td>grant option</td>
<td>使用grant和revoke</td>
</tr>
<tr>
<td>index</td>
<td>使用index创建和删除表索引，用索引查询表</td>
</tr>
<tr>
<td>show_db</td>
<td>使用show databases</td>
</tr>
<tr>
<td>super</td>
<td>使用change master、kill、logs、purge、master和set global,允许mysqladmin调试登录</td>
</tr>
<tr>
<td>create_tmp</td>
<td>使用create temporary tables 创建临时表</td>
</tr>
<tr>
<td>lock_tables</td>
<td>使用LOCK TABLES命令阻止对表的访问/修改</td>
</tr>
<tr>
<td>execute</td>
<td>使用call和存储过程</td>
</tr>
<tr>
<td>repl_slave</td>
<td>读取用于维护复制数据库环境的二进制日志文件，主服务器管理</td>
</tr>
<tr>
<td>repl_client</td>
<td>可确定复制从服务器和主服务器的位置，从服务器管理</td>
</tr>
<tr>
<td>create_view</td>
<td>使用create view创建视图</td>
</tr>
<tr>
<td>show_view</td>
<td>使用show view查看视图</td>
</tr>
<tr>
<td>create_routine</td>
<td>使用create procedure,可更改或放弃存储过程和函数</td>
</tr>
<tr>
<td>alter_routine</td>
<td>使用alter procedure和drop procedure更改或放弃存储过程或函数</td>
</tr>
<tr>
<td>create_user</td>
<td>使用create user、drop user、rename user、revoke all privileges</td>
</tr>
<tr>
<td>event</td>
<td>创建、修改和删除事件</td>
</tr>
<tr>
<td>trigger</td>
<td>创建和删除触发器</td>
</tr>
<tr>
<td>create_tablespace</td>
<td>创建表空间</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库文件</title>
    <url>/blog/2019/08/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h1><ul>
<li><a href="https://mino-yn.github.io/blog/2019/08/29/my-cnf/">配置文件</a>（my.cnf）</li>
<li>错误日志文件（error log）</li>
<li><a href="#二进制日志文件">二进制日志文件</a>（binary log）</li>
<li>慢查询日志（slow log）</li>
<li>全量日志（general log）</li>
<li>审计日志（audit log）</li>
<li>中继日志（relay log）</li>
<li>Pid文件</li>
<li>Socket 文件</li>
<li>表结构文件</li>
<li>InnoBD 存储引擎文件</li>
</ul>
<h2 id="二进制日志文件"><a href="#二进制日志文件" class="headerlink" title="二进制日志文件"></a><a name="二进制日志文件">二进制日志文件</a></h2><p>记录对MySQL数据库真正<strong>执行更改</strong>的所有操作（DML语句：以INSERT、UPDATE、SELETE三种指令为核心），不包含没有修改任何数据的语句。</p>
<h3 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h3><ul>
<li><strong>完成主从复制功能</strong>，在主服务器中把所有修改数据的操作记录到binlog中，通过网路发送给从服务器，实现主从同步。</li>
<li><strong>进行恢复操作</strong>，数据通过binlog日志，使用mysqlbinlog命令，实现基于时间点和位置的恢复操作。</li>
</ul>
<p>查看二进制日志文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show binary logs              #列出当前binlog文件及值的大小</span><br><span class="line">show master status            #查看MySQL当前的日志及状态</span><br></pre></td></tr></table></figure>

<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><strong>binlog_format</strong> 代表二进制日志的格式，有 <strong>statement、row、mixed</strong> 三种。</p>
<ul>
<li><strong>statement</strong>：<strong>基于操作的SQL语句</strong>记录到 binlog 中。在 statement 格式下，在将日志转化格式后，日志文件中记录的是完整的SQL语句。简称SBR，不建议在生产环境中使用。</li>
<li><strong>row</strong>：基于<strong>行的变更</strong>情况记录，记录行变更前的样子及变更后的内容，简称RBR，<strong>生产环境中推荐</strong>使用row格式。</li>
<li><strong>mixed</strong>：混合使用 row 和 statement 格式，不建议使用。</li>
</ul>
<p>查看二进制文件时，需要通过 mysqlbinlog 命令来查看二进制日志，在日志转化格式后，输出至 bin.log 文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-v:可以看到具体的执行消息</span><br><span class="line">#-base64-output:把二进制日志文件转化格式</span><br><span class="line">/usr/local/mysql/bin/mysqlbinlog --no-defaults -v -v --base64-output=decode-rows /data/mysql/mysql-bin.000017&gt;bin.log</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>部分涉及binlog的相关参数介绍</p>
<ul>
<li>max_binlog_size：单个binlog的最大值，超过该值自动生成新的binlog文件（重启MySQL实例也会生成新的binlog文件），MySQL5.0后默认值为1G。</li>
<li>binlog_cache_size: 为每个session分配内存，在事务过程中用来存储二进制日志的缓存，提高记录bin-log的效率。</li>
<li>binlog_format ：代表二进制格式。</li>
<li>expire_logs_days：二进制文件过期时间，单位：天。</li>
<li>sync_binlog：影响binlog的刷新。</li>
<li>log_slave_updates：搭建m-&gt;s1-&gt;s2主从框架时，设置log_slave_updates=1，实现 s1到 s2 的同步。</li>
<li>binlog_row_image:  参数有full、minimal、noblob三个值：full：全记录；minimal：只记录要修改列的记录；noblob：记录除blog、text的所有字段，默认为full。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ssh免密登录</title>
    <url>/blog/2019/08/23/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%EF%BC%88%E5%8D%95%E5%90%91%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ssh登录与文件传输"><a href="#ssh登录与文件传输" class="headerlink" title="ssh登录与文件传输"></a>ssh登录与文件传输</h2><p>使用一台服务器登录另一台服务器，可直接使用SSH协议进行<strong>登录</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：ssh [-l login_name] [-p port] [user@]hostname</span><br><span class="line"></span><br><span class="line">ssh 192.168.0.11                       #不指定用户，默认使用当前宿主用户名登录</span><br><span class="line">ssh root@192.168.0.11                  # 指定用户登录</span><br><span class="line">ssh -l root 192.168.0.11</span><br><span class="line">ssh root@192.168.0.11 -p 2222          # 指定端口，默认端口22</span><br><span class="line">ssh root@192.168.0.11 &quot;ls /usr/local&quot;  # 远程登录后执行某命令</span><br></pre></td></tr></table></figure>

<p>可以利用scp<strong>远程传输文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：scp [file|folder] [user@host]:[remote_folder] [-P port]</span><br><span class="line"></span><br><span class="line">scp username@servername:/path/filename                   #从服务器上下载文件</span><br><span class="line">scp -r username@servername:remote_dir/local_dir          #从服务器上下载整个目录</span><br><span class="line">scp /path/local_filename username@servername:/path       #上传本地文件至服务器</span><br><span class="line">scp  -r /tmp/local_dir username@servername:remote_dir    #上传目录至服务器</span><br><span class="line">scp -P 60022 -r /local_dir username@servername:remote_dir  #指定端口，默认端口22</span><br></pre></td></tr></table></figure>

<h2 id="设置免密登录"><a href="#设置免密登录" class="headerlink" title="设置免密登录"></a>设置免密登录</h2><p>但以上操作每次都需要输入目标服务器的密码，操作起来比较麻烦，且不适合集群服务器的批量操作。我们可以通过配置rsa私钥和公钥的方式实现免密ssh登录。</p>
<p>这里介绍免密登录的单向配置，如果想实现双向的互信免密登录，再反向配置一遍即可。</p>
<p>若想实现从A到B的免密登录，则A为源服务器，B为目标服务器。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1、获取源服务器的<strong>公钥</strong>     ~/.ssh/id_rsa.pub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCp7KnYj1baMhQn4FPfV6YiMogWw5cu57kfGoZYMdp8KNyJ5zmqz7UZUfmURYeoiMQB7v8oY3zVq13X8Gmmw/rzROS/vR/mqSbbnSruHh+x42oVtjZz67/UtFLTO1DT/+YmT+XkrkuI2Cx6CxWFQgThLXMNStYif3Rl0+aKC7Gb0hlPwoNT+UPHMLAW7Y2x+R7I8Tdvt75jSI4TANq8QzG+/Iy9tZiG80VC2KbgGdTkDLDZrIoftfVWihm4Ec29uJocpbxMRNpMTb7yn12ySWbY7mJ2fpqGAh+s1toF94ASPfg4Hlv6Y6lx2QumePKKIGQh1bWEOirxKljUbVfqD6NF root@hlhtapp29</span><br></pre></td></tr></table></figure>

<p>2、将源服务器生成的公钥添加到目标服务器中的authorized_keys列表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi ~/.ssh/authorized_keys</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCp7KnYj1baMhQn4FPfV6YiMogWw5cu57kfGoZYMdp8KNyJ5zmqz7UZUfmURYeoiMQB7v8oY3zVq13X8Gmmw/rzROS/vR/mqSbbnSruHh+x42oVtjZz67/UtFLTO1DT/+YmT+XkrkuI2Cx6CxWFQgThLXMNStYif3Rl0+aKC7Gb0hlPwoNT+UPHMLAW7Y2x+R7I8Tdvt75jSI4TANq8QzG+/Iy9tZiG80VC2KbgGdTkDLDZrIoftfVWihm4Ec29uJocpbxMRNpMTb7yn12ySWbY7mJ2fpqGAh+s1toF94ASPfg4Hlv6Y6lx2QumePKKIGQh1bWEOirxKljUbVfqD6NF root@hlhtapp29</span><br></pre></td></tr></table></figure>

<p>3、如果源服务器没有公钥，或目标服务器中没有authorized_keys文件，可通过执行ssh-keygen生成新的密钥。</p>
<p><strong>注意</strong>：若服务器中原本存在公钥和私钥，执行ssh-keygen命令会生成新的公钥和私钥对原有的密钥进行覆盖，可能导致之前配置的互信不可用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">/root/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.    ##id_rsa:私钥  </span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.    ##id_rsa.pub:公钥</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:4qHMkrfb8bchDuoYV1DjGFy3JYzegeCidBa5yRvmBAU root@CSB-service-2</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| Eo++o++o .      |</span><br><span class="line">| . oo=ooo+       |</span><br><span class="line">| .+o*.....       |</span><br><span class="line">|..oO .. .        |</span><br><span class="line">|. + o + S        |</span><br><span class="line">|   * + o         |</span><br><span class="line">|  + * + . .      |</span><br><span class="line">|   * + = ...     |</span><br><span class="line">|  ..=.. o...     |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>

<p><strong>服务器初始化</strong></p>
<p>若目标服务器未初始化，首先进行服务器初始化，提升权限，开启22端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /bin/bash</span><br><span class="line"></span><br><span class="line">if [ $(id -u) != &quot;0&quot; ]; then</span><br><span class="line">errorLog &quot;错误：请用root账户运行此脚本&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">echo &quot;提升权限...&quot;</span><br><span class="line">if [[ ! `cat /etc/sudoers | grep -v grep | grep haieradmin` ]] ; then</span><br><span class="line">    echo &quot;需要提升权限。。。&quot;</span><br><span class="line">    sed -i &apos;/## Allow root to run any commands anywhere / a\haieradmin ALL=(ALL) NOPASSWD:ALL&apos; /etc/sudoers</span><br><span class="line">    if [[ ! `cat /etc/sudoers | grep -v grep | grep haieradmin` ]] ; then</span><br><span class="line">        echo &quot;权限提升失败...&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;权限提升成功...&quot;</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">    echo &quot;haieradmin已经是sudoers&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;开启22端口访问...&quot;</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=22/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">echo &quot;删除hosts.deny...&quot;</span><br><span class="line">sed -i &apos;s/sshd:all/ /g&apos; /etc/hosts.deny</span><br><span class="line"></span><br><span class="line">echo &quot;追加hosts.allow...&quot;</span><br><span class="line">if [[ `cat /etc/hosts.allow | grep -v 10.138.*.*` ]]; then</span><br><span class="line">    echo &quot;追加10.138.*.*&quot;</span><br><span class="line">    echo &quot;sshd:10.138.*.*&quot; &gt;&gt; /etc/hosts.allow</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>配置免密脚本下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/shell/sshFreeLogin.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下MySQL常用命令</title>
    <url>/blog/2019/08/23/Common-SQL/</url>
    <content><![CDATA[<h2 id="开启与关闭"><a href="#开启与关闭" class="headerlink" title="开启与关闭"></a>开启与关闭</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql start               #使用service启动</span><br><span class="line">/etc/init.d/mysqld start          #使用mysqld脚本启动服务</span><br></pre></td></tr></table></figure>

<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql stop                #使用service启动</span><br><span class="line">/etc/init.d/mysqld stop           #使用mysqld脚本关闭服务</span><br></pre></td></tr></table></figure>

<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql restart             #使用service启动</span><br><span class="line">/etc/inint.d/mysql restart        #使用mysqld脚本重启服务</span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep mysqld              #查看MySQL启动进程，验证是否启动成功</span><br></pre></td></tr></table></figure>

<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u 用户名 -p 密码            #密码明文</span><br><span class="line">mysql -u 用户名 -p                #密码密文</span><br></pre></td></tr></table></figure>

<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h3 id="SET-PASSWORD命令（需登录）"><a href="#SET-PASSWORD命令（需登录）" class="headerlink" title="SET PASSWORD命令（需登录）"></a>SET PASSWORD命令（需登录）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：mysql&gt; set password for 用户名@localhost = password(&apos;新密码&apos;);</span><br><span class="line">举例：mysql&gt;set password for root@localhost = password(&apos;123456&apos;);</span><br></pre></td></tr></table></figure>

<h3 id="使用sql语句更新-mysql-库中的-user-表（需登录）"><a href="#使用sql语句更新-mysql-库中的-user-表（需登录）" class="headerlink" title="使用sql语句更新 mysql 库中的 user 表（需登录）"></a>使用sql语句更新 mysql 库中的 user 表（需登录）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql; </span><br><span class="line">mysql&gt; update user set password=password(&apos;123&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;; </span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="mysqladmin命令，明文（不需登录）"><a href="#mysqladmin命令，明文（不需登录）" class="headerlink" title="mysqladmin命令，明文（不需登录）"></a>mysqladmin命令，明文（不需登录）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：mysqladmin -u用户名 -p旧密码 password 新密码</span><br><span class="line">举例：mysqladmin -uroot -p123 password 123456</span><br></pre></td></tr></table></figure>

<h3 id="mysqladmin命令，密文（不需登录）"><a href="#mysqladmin命令，密文（不需登录）" class="headerlink" title="mysqladmin命令，密文（不需登录）"></a>mysqladmin命令，密文（不需登录）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：mysqladmin -u用户名 -p旧密码 password+回车，然后输入两次新密码</span><br><span class="line">举例：mysqladmin -uroot -p123 password</span><br></pre></td></tr></table></figure>

<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;                             #返回可用数据库列表</span><br><span class="line">USE db_name;                                #选择数据库</span><br><span class="line">SHOW STATUS;                                #用于显示广泛的服务器状态信息</span><br><span class="line">Show variables like &apos;%参数名%&apos;;              #查看MySQL数据库中的参数</span><br><span class="line">select version() from dual;                 #查看数据库版本信息</span><br><span class="line">SHOW COLUMNS FROM tbl_name;                 #返回tbl_name表中每个字段的信息</span><br><span class="line">show processlist;                           #显示用户正在运行的线程</span><br><span class="line">show binary logs;                           #列出当前binlog文件及值的大小</span><br><span class="line">show master status                          #查看MySQL当前的日志及状态</span><br><span class="line">show slave status \G                        #查看从属服务器线程的参数关键信息</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldump 数据迁移</title>
    <url>/blog/2019/08/23/mysqldump-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="mysqldump的备份与恢复"><a href="#mysqldump的备份与恢复" class="headerlink" title="mysqldump的备份与恢复"></a>mysqldump的备份与恢复</h2><p>mysqldump是MySQL数据库中自带的命令工具，是基础的一款备份工具。我们可以通过 /usr/local/mysql/bin/mysqldump -help 命令来查看其命令的使用说明</p>
<p>这里使用mysqldump实现MySQL的数据迁移</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、连接原服务器和新服务器的数据库，分别查看两个数据库的版本信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select version() from dual;</span><br></pre></td></tr></table></figure>

<p>2、需要查看需要进行备份的数据库库名和大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><p>1、登录原服务器，使用mysqldump对需要还原的数据库进行备份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#备份单个库</span><br><span class="line">/usr/local/mysqlcosmo/bin/mysqldump  --single-transaction  -S /tmp/mysql-cosmodb.sock -uroot  -p&apos;root123&apos; cosmodb &gt;cosmodb.sql   </span><br><span class="line"></span><br><span class="line">#备份全库</span><br><span class="line">/usr/local/mysqlcosmo/bin/mysqldump  --single-transaction  -S /tmp/mysql-cosmodb.sock -uroot  -p&apos;root123&apos; -A &gt;all.sql   </span><br><span class="line"></span><br><span class="line">#备份单表，db1是库名 t为想备份的表名</span><br><span class="line">usr/local/mysqlcosmo/bin/mysqldump  --single-transaction  -S /tmp/mysql-cosmodb.sock -uroot  -p&apos;root123&apos; db1 t &gt;t.sql</span><br></pre></td></tr></table></figure>

<p>2、将备份文件传送至新的服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp cosmodb.sql haieradmin@10.138.232.85:/tmp</span><br></pre></td></tr></table></figure>

<p>​    若两台服务器间未配置互信，且不知道服务器密码，需先配置互信，或新建用户设置密码。</p>
<h3 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h3><p>1、查看新数据库中是否有同名的数据库，防止直接还原时将该库覆盖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>2、若没有可以新建一个数据库将数据还原至该库中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database cosmodb;</span><br></pre></td></tr></table></figure>

<p>3、将数据还原至新服务器的cosmodb库中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#恢复单个库</span><br><span class="line">mysql -uroot -p&apos;root123&apos; cosmodb &lt; cosmodb.sql  </span><br><span class="line"></span><br><span class="line">#恢复全库</span><br><span class="line">mysql -uroot -p&apos;root123&apos; cosmodb &lt; all.sql  </span><br><span class="line"></span><br><span class="line">#恢复db1库下的表t</span><br><span class="line">mysql -uroot -p&apos;root123&apos; db1 &lt; t.sql</span><br></pre></td></tr></table></figure>

<h3 id="导出存储过程-amp-事件"><a href="#导出存储过程-amp-事件" class="headerlink" title="导出存储过程&amp;事件"></a>导出存储过程&amp;事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#只导出存储过程和函数(不导出结构和数据，要同时导出结构的话，需要同时使用-d)</span><br><span class="line">mysqldump -R -ndt dbname -u root -p &gt; routines.sql</span><br><span class="line"></span><br><span class="line">#只导出事件</span><br><span class="line">mysqldump -E -ndt dbname -u root -p &gt; events.sql</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL函数</title>
    <url>/blog/2019/08/16/Function/</url>
    <content><![CDATA[<h2 id="第10章-创建计算字段"><a href="#第10章-创建计算字段" class="headerlink" title="第10章 创建计算字段"></a>第10章 创建计算字段</h2><p>什么是计算字段。如何创建字段以及如何从应用程序中使用别名引用它们</p>
<h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><p>计算字段并<strong>不实际存在</strong>于数据表中，而是运行时在SELECT语句内创建的。当存储在数据库表中的数据不是应用程序所需要的格式，可以通过计算字段直接从<strong>数据库</strong>中检索出转换、计算或格式化过的数据。</p>
<p><strong>字段</strong>：基本与列的意思相同，但数据库列一般称为列，术语字段通常用在计算字段的连接上。</p>
<p>注：仅数据库知道SELECT语句中哪些列是实际的表列，哪些列是计算字段。客户机的角度，计算字段的数据是以与其他列的数据相同的方式返回。</p>
<h3 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h3><p><strong>拼接：</strong>将值联结到一起构成单个值，MySQL使用Concat()函数来拼接两个列。</p>
<p>生成一个供应商报表将vendors表中的供应商名和位置信息以 name(location) 的格式列出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name,&apos; (&apos;,vend_country,&apos;)&apos;)</span><br><span class="line">From vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>RTrim()</strong>：可以删除串右侧多余的空格进行数据整理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(RTrim(vend_name),&apos; (&apos;,RTrim(vend_country),&apos;)&apos;)</span><br><span class="line">From vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>LTrim()</strong> :  去掉串左边的空格。</p>
<p><strong>Trim()</strong>: 去掉串两边的空格。</p>
<h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><p>由于客户机无法引用未命名的列，未命名的新计算列不能应用于客户机应用中。为解决此问题，SQL支持别名。</p>
<p><strong>别名(alias)：</strong>一个字段或值的替换名，别名用<strong>AS</strong>关键字赋予。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(RTrim(vend_name),&apos; (&apos;,RTrim(vend_country),&apos;)&apos;) AS vend_title</span><br><span class="line">From vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure>

<p>+———————————+<br>| vend_title                       |<br>+———————————+<br>| ACME (USA)                   |<br>| Anvils R Us (USA)          |<br>| Furball Inc. (USA)          |<br>| Jet Set (England)            |<br>| Jouets Et Ours (France)|<br>| LT Supplies (USA)          |<br>+———————————-+</p>
<h3 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h3><p>计算字段的另一常见用途是对检索出的数据进行算术计算。</p>
<p>orders表包含收到的所有订单，orderitems表包含每个订单中的各项商品，检索订单号2005中的所有物品，并对各物品的价格进行汇总。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,quantity,item_price,quantity*item_price AS expanded_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num =20005;</span><br></pre></td></tr></table></figure>

<p><strong>测试计算：</strong>SELECT可以通过省略from子句对函数进行简单的测试与试验，如：</p>
<p>SELECT 3*2 :  返回6</p>
<p>SELECT Trim(‘abc’):  返回abc</p>
<p>SELECT Now():  利用 Now() 函数返回当前日期和时间。 </p>
<h2 id="第11章-使用数据处理函数"><a href="#第11章-使用数据处理函数" class="headerlink" title="第11章 使用数据处理函数"></a>第11章 使用数据处理函数</h2><p>介绍什么是函数，如何使用SQL的数据处理函数，着重介绍了日期处理函数</p>
<p><strong>关于函数</strong>：SQL支持利用函数处理数据，函数一般是在数据上执行的，方便数据的转换和处理。函数没有SQL的可移植性强，使用函数应做好代码注释，以便自己或他人能确切知道所编写SQL代码的含义。</p>
<h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><p>多数SQL支持一下类型的函数</p>
<ul>
<li>用于<strong>处理文本串</strong>（如：删除或填充值，转换值为大写或小写）的文本函数</li>
<li>用于在<strong>数值数据上进行算术操作</strong>（如：返回绝对值，进行代数运算）的数值函数。</li>
<li>用于<strong>处理日期和时间值</strong>并从这些值中提取特定成分（如：返回两个日期之差，检查日期有效性等）的日期和时间函数。</li>
<li><strong>返回DBMS正使用的特殊信息</strong>（如：返回用户登录信息，检查版本细节）的系统函数。</li>
</ul>
<h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><p><strong>常用的文本处理函数</strong>:</p>
<p>left( ) :返回串左边字符                               Right()：返回串右边的字符             </p>
<p>length()：返回串的长度                             Soundex():返回串的SOUNDEX值</p>
<p>Locate()：找出串的一个子串                    SubString():返回子串的字符</p>
<p>Lower()：将串转换为小写                         Upper():将串转换为大写</p>
<p>LTrim()：去掉串左边的空格                       RTrim():去掉串右边的空格</p>
<p>Soundex：将任何文本串转换为描述其语音表示的字母数字模式的算法，SOUNDEX考虑了类似的发音字符和音节，使得对串进行发音比较而不是字母比较。</p>
<p>customers表中顾客Coyote Inc.的联系名为Y. Lie被错误输入为Y. Lee，通过其联系名对该顾客进行搜索。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_name,cust_contact</span><br><span class="line">FROM customers</span><br><span class="line">WHERE Soundex(cust_contact) = Soundex(&apos;Y Lie&apos;);</span><br></pre></td></tr></table></figure>

<p>+——————-+——————–+<br>| cust_name   | cust_contact |<br>+——————-+——————–+<br>| Coyote Inc.   | Y Lee              |<br>+——————-+—— ————-+</p>
<h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p>日期和时间采用相应的数据类型和特殊的格式存储，实现快速有效的排序和过滤，并节省物理存储空间。、</p>
<p><strong>MySQL首选的日期格式：yyyy-mm-dd</strong></p>
<p><strong>常用日期和时间处理函数：</strong></p>
<p>AddDate(): 增加一个日期（天、周等）                               DayOfWeek(): 对于一个日期，返回对应的星期几</p>
<p>AddTime(): 增加一个时间（时、分等）                               Hour(): 返回一个时间的小时部分</p>
<p>CurDate(): 返回当前日期                                                       Minute(): 返回一个时间的分钟部分</p>
<p>CurTime(): 返回当前时间                                                       Month(): 返回一个日期的月份部分</p>
<p>Date(): 返回日期时间的日期部分                                           Now(): 返回当前日期和时间</p>
<p>DateDiff(): 计算两个日期之差                                                Second(): 返回一个时间的秒部分</p>
<p>Date_Add(): 高度灵活的日期运算函数                                  Time(): 返回一个日期时间的时间部分</p>
<p>Date_Format(): 返回一个格式化的日期或时间串                 Year(): 返回一个日期的年份部分</p>
<p>Day(): 返回一个日期的天数部分</p>
<p>检索出2005年9月下的所有订单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_id,order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Date(order_date) BETWEEN &apos;2005-09-01&apos; AND &apos;2005-09-30&apos;;</span><br></pre></td></tr></table></figure>

<h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p>数值处理函数仅处理数值数据，一般主要用于代数、三角或几何运算。</p>
<p><strong>常用数值处理函数:</strong></p>
<p>Abs(): 返回一个数的绝对值                         Rand(): 返回一个随机数</p>
<p>Cos(): 返回一个角度的余弦                          Sin(): 返回一个角度的正弦</p>
<p>Exp(): 返回一个数的指数值                          Sqrt(): 返回一个数的平方根</p>
<p>Mod(): 返回除操作的余数                            Tan(): 返回一个角度的正切</p>
<p>Pi(): 返回圆周率</p>
<h2 id="第12章-汇总数据"><a href="#第12章-汇总数据" class="headerlink" title="第12章 汇总数据"></a>第12章 汇总数据</h2><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p><strong>聚集函数：</strong>运行在行组上，计算和返回单个值的函数，用于需要汇总数据而无需将其实际检索出来的情况，如：</p>
<ul>
<li><p>确定表中函数（或满足每个条件或包含某个特定值的行数）。</p>
</li>
<li><p>获得表中行组的和。</p>
</li>
<li><p>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。</p>
</li>
</ul>
<p>上述例子都需要对表中的数据（而不是实际数据本身）汇总。因此，因此返回实际表数据是对时间和处理资源的一种浪费，MySQL支持一系列的聚集函数，可以用多种方法进行使用以返回所需的结果，这些函数是高效设计的，返回结果比在客户机应用程序中计算要快得多。</p>
<p><strong>SQL聚集函数</strong></p>
<p>AVG( ) : 返回某列的平均值                             MIN( ) : 返回某列的最小值</p>
<p>COUNT( ) : 返回某列的行数                           SUM( ) : 返回某列值之和</p>
<p>MAX( ) : 返回某列的最大值</p>
<h4 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG ( ) 函数"></a>AVG ( ) 函数</h4><p>AVG（）通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG（）可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。AVG（）函数忽略列值为NULL的行。</p>
<p>返回products表中所有产品的平均价格：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(prod_price) AS avg_price</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure>

<p>+—————–+<br>| avg_price   |<br>+—————–+<br>| 16.133571 |<br>+—————–+</p>
<h4 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT ( ) 函数"></a>COUNT ( ) 函数</h4><p>count ( ) 函数的两种使用方式：</p>
<ul>
<li>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li>
<li>使用COUNT(column)对特定的列中具有的行进行计数，忽略NULL值。</li>
</ul>
<p>返回customers表中客户的总数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) AS num_cust</span><br><span class="line">FROM customers;</span><br></pre></td></tr></table></figure>

<p>+—————-+<br>| num_cust |<br>+—————-+<br>|        5         |<br>+—————-+</p>
<p>只对具有电子邮件地址的客户计数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(cust_email) AS num_cust</span><br><span class="line">FROM customers;</span><br></pre></td></tr></table></figure>

<p>+—————-+<br>| num_cust  |<br>+—————-+<br>|        3          |<br>+—————-+</p>
<h4 id="MAX-函数-MIN-函数"><a href="#MAX-函数-MIN-函数" class="headerlink" title="MAX ( )函数,MIN( )函数"></a>MAX ( )函数,MIN( )函数</h4><p>MAX( )返回指定列中的最大值，MIN( )返回指定列的最小值，MIX( )和MAX( )都要求指定列名。</p>
<p>返回products表中最贵的物品价格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(prod_price) AS max_price</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure>

<p>+—————-+<br>| max_price |<br>+—————-+<br>|     55.00     |<br>+—————-+</p>
<p><strong>对非数值数据使用MAX()、MIN()</strong></p>
<p>MySQL允许使用MAX( )、MIN( )、返回任意列的最大值和最小值，包括返回文本列的最大值与最小值。在用于文本数据时，若数据按照相应的列排序，MAX( )返回最后一行，MIN()返回最前面的行。</p>
<p><strong>NULL值</strong>：MIN( )、MAX( )函数忽略列值为NULL的行。</p>
<h4 id="SUM-）函数"><a href="#SUM-）函数" class="headerlink" title="SUM( ）函数"></a>SUM( ）函数</h4><p>sum( )用来返回制定列值的和(总计），</p>
<p><strong>NULL值：</strong>SUM( ) 函数忽略列值为NULL的行。</p>
<p>合计order_num = 20005的每项物品的item_price*quantity，得出总的订单金额。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT SUM(item_price*quantity) AS total_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num = 20005;</span><br></pre></td></tr></table></figure>

<p>+—————–+<br>| total_price |<br>+—————–+<br>|      149.87   |<br>+—————–+</p>
<p>利用标准的算术操作符，所有的聚集函数都可用来执行多个列上的计算。</p>
<h4 id="聚集不同的值"><a href="#聚集不同的值" class="headerlink" title="聚集不同的值"></a>聚集不同的值</h4><p>对以上聚集函数可进行如下使用：</p>
<ul>
<li>对所有的行执行计算，指定ALL参数或不给参数（ALL为默认参数）。</li>
<li>只包含不同的值，用DISTINCT参数,DISTINCT必须使用列名，因此只能用于COUNT(DISTINCT),不能用于COUNT（*）。</li>
</ul>
<p>返回特定供应商提供的产品的平均价格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(DISTINCT prod_price) AS avg_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id = 1003;</span><br></pre></td></tr></table></figure>

<h4 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h4><p>SELECT可以根据需要包含多个聚集函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) AS num_items,</span><br><span class="line">       MIN(prod_price) AS price_min,</span><br><span class="line">       MAX(prod_price) AS price_max,</span><br><span class="line">       AVG(prod_price) AS price_avg</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure>

<p>+——————+—————+—————–+—————+<br>| num_items | price_min | price_max | price_avg |<br>+——————+—————+—————–+—————+<br>|        14         |      2.50      |     55.00      | 16.133571 |<br>+——————+—————+—————–+—————+</p>
]]></content>
      <tags>
        <tag>MySQL Crash Course</tag>
      </tags>
  </entry>
  <entry>
    <title>数据过滤</title>
    <url>/blog/2019/08/15/Data-filtering/</url>
    <content><![CDATA[<h2 id="第6章-过滤数据"><a href="#第6章-过滤数据" class="headerlink" title="第6章 过滤数据"></a>第6章 过滤数据</h2><p>使用SELECT语句的WHERE子句指定搜索条件</p>
<p><strong>检查单个值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price =2.50;</span><br></pre></td></tr></table></figure>

<p><strong>范围值检查</strong></p>
<p>检查某个范围的值，可使用BETWEEN操作符，需要范围的开始值和结束值两个值。如：检索价格在5美元和10美元间的所有产品：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price BETWEEN 5 AND 10;</span><br></pre></td></tr></table></figure>

<p><strong>空值检查</strong></p>
<p>NULL:无值，不包含值，与字段包含0、空字符串或仅仅包含空格不同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_id</span><br><span class="line">FROM customers</span><br><span class="line">WHERE cust_email IS NULL;</span><br></pre></td></tr></table></figure>

<p><strong>NULL与不匹配</strong>：由于未知（NULL）具有特殊的含义，所以在匹配过滤或不匹配过滤时不返回它们，因此在过滤数据时，需验证返回数据给出的被过滤列具有NULL行。</p>
<p><strong>WHERE位置</strong>：同时使用 ORDER BY 和 WHERE,ORDER BY 位于WHERE 之后。</p>
<p><img src="/blog/blog/2019/08/15/Data-filtering/Data-filtering%5C3.png" alt="WHERE子句操作符"></p>
<h2 id="第7章-数据过滤"><a href="#第7章-数据过滤" class="headerlink" title="第7章 数据过滤"></a>第7章 数据过滤</h2><h3 id="组合WHERE子句"><a href="#组合WHERE子句" class="headerlink" title="组合WHERE子句"></a>组合WHERE子句</h3><p><strong>AND操作符</strong> </p>
<p>指示检索满足<strong>所有</strong>给定条件的行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,prod_price,prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id = 1003 AND prod_price &lt;= 10;</span><br></pre></td></tr></table></figure>

<p><strong>OR操作符</strong></p>
<p>指示检索匹配<strong>任一</strong>条件的行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id = 1002 OR ven_id = 1003;</span><br></pre></td></tr></table></figure>

<p><strong>计算次序</strong></p>
<p>优先级：( )&gt;AND&gt;OR</p>
<p>在使用具有AND和OR操作符的WHERE子句时，应使用圆括号明确的分组操作符，不要过分依赖默认计算次序。</p>
<p>列出价格为10美元（含）以上且由1002或1003制造的所有产品:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;=10</span><br></pre></td></tr></table></figure>

<h3 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h3><p>在WHERE子句中用来指定要匹配值的清单的关键字，功能与OR相当。</p>
<p>检索供应商1002和1003制造的所有产品</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1002,1003)</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<p>1、使用长的合法选项清单时，IN操作符语法更清楚直观。</p>
<p>2、计算的次序更容易管理。</p>
<p>3、一般比OR操作符清单执行更快。</p>
<p>4、最大优点是<strong>IN可以包含其他的SELECT语句</strong>，使得能够更动态地建立WHERE子句。</p>
<h3 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h3><p>否定其之后所跟的任何条件</p>
<p>列出除1002和1003之外的所有供应商制造的产品：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id NOT IN (1002,1003)</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p>注：MySQL支持使用NOT对IN、BETWEEN和EXISTS子句取反。</p>
<h2 id="第8章-用通配符过滤"><a href="#第8章-用通配符过滤" class="headerlink" title="第8章 用通配符过滤"></a>第8章 用通配符过滤</h2><p>介绍什么是通配符，以及怎样使用LIKE操作符进行通配搜索，以便对数据进行复杂过滤。</p>
<h3 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h3><p>为在搜索子句中使用通配符，必须使用LIKE操作符，LIKE指示MySQL后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。</p>
<p><strong>通配符</strong>：用来匹配值的一部分的特殊字符。</p>
<p><strong>搜索模式</strong>：由字面值、通配符或两者组合构成的搜索条件。</p>
<h4 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（%）通配符"></a>百分号（%）通配符</h4><p>%表示任何字符出现<strong>任意次数（包括0次）</strong>，是最常使用的通配符。</p>
<p>找出所有以词jet起头的产品：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name LIKE &apos;jet%&apos;;</span><br></pre></td></tr></table></figure>

<p>注：1、根据MySQL的配置方式不同，搜索可能是区分大小写的，若区分大小写则’jet%’与’JET%’得到的结果将不同。</p>
<p>​        2、<strong>%通配符不能匹配NULL</strong>，即使是 WHERE prod_name LIKE  ‘%’也不能匹配值NULL作为产品名的行。</p>
<h4 id="下划线（-）通配符"><a href="#下划线（-）通配符" class="headerlink" title="下划线（_）通配符"></a>下划线（_）通配符</h4><p>下划线的用途与%一样，但_总是匹配<strong>一个字符</strong>，不能多也不能少。</p>
<h4 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h4><p>通配符搜索的处理一般比前面讨论的其他搜索所花的时间更长，使用通配符需要注意：</p>
<ul>
<li><p>不要过度使用通配符，若其他操作符能达到相同的目的，优先使用其他操作符。</p>
</li>
<li><p>使用通配符时，除非绝对有必要，不要将其用在搜索模式的开始处，通配符位于搜索模式开始处，搜索速度最慢。</p>
</li>
<li><p>注意通配符位置，放错地方得不到想要的结果。</p>
</li>
</ul>
<h2 id="第9章用正则表达式进行搜索"><a href="#第9章用正则表达式进行搜索" class="headerlink" title="第9章用正则表达式进行搜索"></a>第9章用正则表达式进行搜索</h2><p>正则表达式用来匹配文本的特殊的串（字符集合），将一个正则表达式与一个文本串进行比较。MySQL用WHERE子句对正则表达式提供了初步的支持，允许指定正则表达式过滤SELECT检索出的数据，但MySQL仅支持多数正则表达式实现的一个很小的子集。</p>
<h3 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a>基本字符匹配</h3><p>检索列prod_name包含文本1000的所有行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &apos;1000&apos;</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p>+——————–+<br>| prod_name    |<br>+———————+<br>| JetPack 1000 |<br>+———————+</p>
<p><strong>REGEXP</strong>后所跟的东西作为正则表达式处理。</p>
<p><strong>LIKE 与 REGEXP</strong></p>
<p>将上述语句中的REGEXP替换为LIKE:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name LIKE &apos;1000&apos;</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p>执行该语句发现，替换为LIKE后该语句不返回数据，而替换前的REGEXP语句返回一行。</p>
<ul>
<li><p><strong>LIKE</strong>对<strong>列整体</strong>进行匹配，如果被匹配的文本在列值中出现，LIKE将不会找到他，相应的列不会被返回（除非使用通配符）。</p>
</li>
<li><p><strong>REGEXP</strong>在<strong>列值内</strong>进行匹配，如果被匹配的文本在列值中出现，REGEXP将会找到它，相应的行被返回。REGEXP可以通过使用^和$定位符来匹配整个列值。</p>
</li>
</ul>
<p>MySQL正则表达式匹配不区分大小写，为区分大小写可使用BINARY关键字，如：WHERE prod_name REGEXP BINARY ‘JetPack .000’。</p>
<h3 id="进行OR匹配"><a href="#进行OR匹配" class="headerlink" title="进行OR匹配"></a>进行OR匹配</h3><p>使用 | 从功能上类似于SELECT语句中使用OR语句，多个OR条件可以并入单个正则表达式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &apos;1000|2000|3000&apos;</span><br></pre></td></tr></table></figure>

<h3 id="匹配几个字符之一"><a href="#匹配几个字符之一" class="headerlink" title="匹配几个字符之一"></a>匹配几个字符之一</h3><p>匹配特定的字符可以通过指定一组用 [ ] 括起来的字符来完成,如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &apos;[123] Ton&apos;</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p>+——————–+<br>| prod_name   |<br>+——————–+<br>| 1 ton anvil     |<br>| 2 ton anvil     |<br>+——————–+</p>
<p>使用了正则表达式[123] Ton,[123]定义一组字符，代表匹配1或2或3，[ ]是另一种形式的OR语句，[123] Ton为[1|2|3] Ton的缩写，我们需要使用 [ ] 来定义OR语句查找什么。</p>
<p>在集合开始处放置^,可以否定一个字符集，即匹配除指定字符外的任何东西。[^123]：匹配除了字符123外的任何东西。</p>
<h3 id="匹配范围"><a href="#匹配范围" class="headerlink" title="匹配范围"></a>匹配范围</h3><p>为了简化类似[0123456789]这种集合，可使用-来定义一个范围如：</p>
<p>[1-3] : 匹配1或2或3</p>
<p>[a-z] :  匹配任意字母字符</p>
<h3 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a>匹配特殊字符</h3><p>为了匹配特殊字符，必须使用\\ 为前导，\\- 表示查找 - ，\\. 表示查找 . 。</p>
<p>匹配特殊字符 .  。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_name</span><br><span class="line">FROM vendors</span><br><span class="line">WHERE vend_name REGEXP &apos;\\.&apos;</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure>

<p>\\也用来引用元字符（具有特殊含义的字符）</p>
<p><img src="/blog/blog/2019/08/15/Data-filtering/Data-filtering%5C1.png" alt></p>
<p>多数正则表达式实现使用单个 \ 转义特殊字符，以便能使用这些字符本身，但MySQL要求使用两个反斜杠（MySQL自己解释一个，正则表达式库解释另一个）。</p>
<h3 id="匹配字符类"><a href="#匹配字符类" class="headerlink" title="匹配字符类"></a>匹配字符类</h3><p>一个字符类定义一组字符，为了方便工作，可以使用预定义的字符集。</p>
<p><img src="/blog/blog/2019/08/15/Data-filtering/Data-filtering%5C2.png" alt></p>
<h3 id="匹配多个实例"><a href="#匹配多个实例" class="headerlink" title="匹配多个实例"></a>匹配多个实例</h3><p>可以用正则表达式重复元字符实现多个实例的匹配</p>
<p><img src="/blog/blog/2019/08/15/Data-filtering/Data-filtering%5C4.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &apos;\\([0-9] sticks?\\)&apos;</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p>+——————–+<br>| prod_name    |<br>+———————+<br>| TNT (1 stick)   |<br>| TNT (5 sticks) |<br>+———————+</p>
<p>正则表达式：\\([0-9] sticks?\\) ：</p>
<ul>
<li><p>\\(   匹配（</p>
</li>
<li><p>[0-9]   匹配任意数字</p>
</li>
<li><p>sticks？匹配stick和sticks （s后的？使s可选，因为？匹配它前面的任何字符0次或1次出现，没有？，匹配stick和sticks会非常困难）</p>
</li>
<li><p>\\)  匹配   ）</p>
</li>
</ul>
<p>匹配连在一起的4位数字：[[:digit:]]{4}</p>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>为了匹配特定位置的文本，需要使用定位符</p>
<p><img src="/blog/blog/2019/08/15/Data-filtering/C:%5CUsers%5C19028862%5Cblog%5Csource_posts%5CData-filtering%5C5.png" alt></p>
<p><strong>^ 的双重用途</strong>：在集合中（用 [ ] 定义），^用来否定该集合，否则用来指串的开始处。</p>
<p>[0-9\\.]：在文本的任意位置对数字或 小数点进行查找匹配。</p>
<p>^[0-9\\.]: 匹配以小数点或者数字开始的字符串。</p>
<p><strong>简单的正则表达式测试</strong>：可以在不使用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查返回0（没有匹配）或1（匹配）。如：</p>
<p>SELECT ‘hello’ REGEXP  ‘[0-9]’  : 返回0（因为文本hello 中没有数字）</p>
]]></content>
      <tags>
        <tag>MySQL Crash Course</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用与数据检索</title>
    <url>/blog/2019/08/14/MySQL-Crash-Course/</url>
    <content><![CDATA[<h2 id="第3章-使用MySQL"><a href="#第3章-使用MySQL" class="headerlink" title="第3章 使用MySQL"></a>第3章 使用MySQL</h2><p>如何用USE选择数据库，用SHOW查看MySQL数据库、表和内部信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE db_name;                     #选择数据库,需要先使用USE打开数据库才能读取其中的信息</span><br><span class="line">SHOW DATABASES;                  #返回可用数据库列表</span><br><span class="line">SHOW TABLES;                     #返回当前数据库内可用列表</span><br><span class="line">SHOW COLUMNS FROM tbl_name;      #返回tbl_name表中每个字段的信息</span><br><span class="line">DESCRIBE tbl_name;               #SHOW COLUMNS FROM tbl_name;的快捷方式</span><br><span class="line">SHOW STATUS;                     #用于显示广泛的服务器状态信息</span><br><span class="line">SHOW CREATE DATABASE db_name;    #显示创建特定数据库</span><br><span class="line">SHOW CREATE TABLE;               #显示创建特定的表</span><br><span class="line">HELP SHOW;                       #显示允许的SHOW语句</span><br></pre></td></tr></table></figure>

<h2 id="第4章-检索数据"><a href="#第4章-检索数据" class="headerlink" title="第4章 检索数据"></a>第4章 检索数据</h2><p>如何使用SQL的SELECT语句来检索单个表列、多个表列以及所有表列。</p>
<p><strong>检索单个列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT col_name</span><br><span class="line">FROM tbl_name;</span><br></pre></td></tr></table></figure>

<p><strong>检索多个列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT col_name1,col_name2,col_name3</span><br><span class="line">FROM tbl_name;</span><br></pre></td></tr></table></figure>

<p><strong>检索所有列</strong></p>
<p>一般最好不使用通配符（*），检索不需要的列通常会降低检索和应用程序的性能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM tbl_name;</span><br></pre></td></tr></table></figure>

<p><strong>检索不同的行</strong></p>
<p>使用关键字DISTINCT ，注：不能部分使用DISTINCT，DISTINCT应用于所有列，而不仅是前置它的列。    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT col_name           </span><br><span class="line">FROM tbl_name;</span><br></pre></td></tr></table></figure>

<p><strong>限制结果</strong></p>
<p>SELECT语句返回所有匹配的行，为了返回指定的行，可以使用LIMIT子句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT col_name                   #使用SELECT语句检索单个列，LIMIT n指示MySQL返回不多于n行</span><br><span class="line">FROM tblname</span><br><span class="line">LIMIT n;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT col_name                   #LIMIT n,m指示MySQL返回从行n开始的m行。</span><br><span class="line">FROM tblname</span><br><span class="line">LIMIT n,m;</span><br></pre></td></tr></table></figure>

<p>注：检索出来的第一行为行0而不是行1，LIMIT1,1将检索出第二行，LIMIT检索记录行6-15</p>
<p><strong>使用完全限定的表名</strong></p>
<p>可以使用完全限定的列名或者表名,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT tbl_name.col_name            #使用完全限定的列名</span><br><span class="line">FROM tbl_name;</span><br><span class="line">SELECT tbl_name.col_name            #使用完全限定的列名和表名</span><br><span class="line">FROM db_name.col_name;</span><br></pre></td></tr></table></figure>

<h2 id="第5章-排序检索数据"><a href="#第5章-排序检索数据" class="headerlink" title="第5章 排序检索数据"></a>第5章 排序检索数据</h2><p>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义。</p>
<p><strong>按单个列排序</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT col_name1     #col_name1与col_name2可以相同也可以不同</span><br><span class="line">FROM tbl_name        #即可以用检索列排序数据也可用非检索列排序数据。</span><br><span class="line">ORDER BY col_name2;</span><br></pre></td></tr></table></figure>

<p><strong>按多个列排序</strong></p>
<p>为了按多个列排序，只要指定列名与列名之间用逗号分开即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT col_name1,col_name2,col_name3</span><br><span class="line">FROM tbl_name </span><br><span class="line">ORDER BY  col_name4,col_name5;</span><br></pre></td></tr></table></figure>

<p>注：先根据col_name4进行排序，当 col_name4相同时，才根据 col_name5进行排序。  如果col_name4的所有值都是唯一的，则不会按col_name5进行排序。</p>
<p><strong>指定排序方向</strong></p>
<p>数据排序默认按升序排序，若想进行降序排序，需要指定DESC关键字。</p>
<p>以价格降序排序产品：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,prod_price,prod_name</span><br><span class="line">FROM products</span><br><span class="line">ORDER BY prod_price DESC;</span><br></pre></td></tr></table></figure>

<p>以价格降序排序产品后，再对产品名排序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,prod_price,prod_name</span><br><span class="line">FROM products</span><br><span class="line">ORDER BY prod_price DESC,prod_name; #对prod_price以降序排序，prod_name仍按标准的升序排序</span><br></pre></td></tr></table></figure>

<p>注：1、DESC关键字只应用到直接位于其前面的列名，若想在多个列上进行降序排序，必须对每个列指定DESC关键字。</p>
<p>​        2、与DESC相反的关键字是ASC，用来指定升序，由于默认排序顺序是升序的，所以一般不指定。</p>
<p>​        3、ORDER BY子句应位于FROM之后，LIMIT需位于ORDER BY之后。</p>
<p>如：使用ORDER BY和LIMIT组合，找出最昂贵的物品的价格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_price</span><br><span class="line">FROM products</span><br><span class="line">ORDER BY prod_price DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL Crash Course</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的安装部署与卸载</title>
    <url>/blog/2019/08/09/Download-MySQL/</url>
    <content><![CDATA[<h2 id="MySQL5-7安装"><a href="#MySQL5-7安装" class="headerlink" title="MySQL5.7安装"></a>MySQL5.7安装</h2><p>1、创建用户，指定MySQL所在的用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; groupadd mysql </span><br><span class="line">shell&gt; useradd -g mysql mysql -s /sbin/nologin</span><br></pre></td></tr></table></figure>

<p>2、下载软件包，并将解压MySQL软件包至  /usr/local/  目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/mysql-5.7.23-el7-x86_64.tar.gz</span><br><span class="line">shell&gt; scp mysql-5.7.23-el7-x86_64.tar.gz root@x.x.x.x:/usr/local/src/     </span><br><span class="line">shell&gt; tar -zxvf mysql-5.7.23-el7-x86_64.tar.gz -C /usr/local/</span><br><span class="line">shell&gt; ln -s /usr/local/mysql-5.7.23-el7-x86_64 /usr/local/mysql       #做软链方便日后的升级</span><br><span class="line">shell&gt; chown mysql:mysql -R /usr/local/mysql                           #给MySQL目录授权</span><br></pre></td></tr></table></figure>

<p>3、创建MySQL的数据目录，并给数据目录赋权。这里选择将目录创建在  /data/mysql 下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; mkdir -p /data/mysql    </span><br><span class="line">shell&gt; chown mysql:mysql -R /data/mysql                                #给收据目录授权</span><br></pre></td></tr></table></figure>

<p>4、编辑配置文件my.cnf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; vim /etc/my.cnf     # 进入my.cnf中，并进行文件编辑</span><br></pre></td></tr></table></figure>

<p>更改配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port                      = 3306</span><br><span class="line">socket                    = /data/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port                      = 3306</span><br><span class="line">socket                    = /data/mysql/mysql.sock</span><br><span class="line">pid_file                  = /data/mysql/mysql.pid</span><br><span class="line">basedir                   = /usr/local/mysql</span><br><span class="line">datadir                   = /data/mysql</span><br><span class="line">character_set_server      = utf8</span><br><span class="line"></span><br><span class="line"># LOG</span><br><span class="line">slow_query_log            = 1</span><br><span class="line">long_query_time           = 5</span><br><span class="line">log_error                 = /data/mysql/error.log</span><br><span class="line">slow_query_log_file       = /data/mysql/slow.log</span><br><span class="line"></span><br><span class="line"># INNODB</span><br><span class="line">innodb_data_home_dir      = /data/mysql</span><br><span class="line">innodb_buffer_pool_size   = 10240M</span><br><span class="line">innodb_log_file_size      = 1G</span><br><span class="line">innodb_data_file_path     = ibdata1:1G:autoextend</span><br><span class="line"></span><br><span class="line"># OTHER</span><br><span class="line">max_connections           = 3000</span><br><span class="line">interactive_timeout       = 600</span><br><span class="line">wait_timeout              = 600</span><br><span class="line">lower_case_table_names    = 1</span><br><span class="line">log_timestamps            = SYSTEM</span><br><span class="line">explicit_defaults_for_timestamp = 1</span><br><span class="line">skip-ssl</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line"># REPLICATION</span><br><span class="line">server-id                 = 3306100</span><br><span class="line">log-bin                   = /data/mysql/mysql-bin</span><br><span class="line">sync_binlog               = 0</span><br><span class="line">max_binlog_size           = 1024M</span><br><span class="line">binlog-format             = row</span><br><span class="line">expire_logs_days          = 15</span><br></pre></td></tr></table></figure>

<p>5、对数据库进行初始化操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; /usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/data/mysql --user=mysql --initialize</span><br></pre></td></tr></table></figure>

<p>6、启动MySQL数据库  ，可以用 ps -ef|grep mysqld 查看MySQL启动进程，看是否启动成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql 2&gt;&amp;1 &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure>

<p>7、开启防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>8、设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; cd /usr/local/mysql/bin</span><br><span class="line">shell&gt; cp mysql mysqladmin mysqlbinlog mysqld mysqld_safe mysqldump /usr/bin/</span><br><span class="line"></span><br><span class="line">shell&gt; vi /usr/local/mysql/support-files/mysql.server</span><br><span class="line">`mysqld_pid_file_path`=/data/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line">shell&gt; cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">shell&gt; chmod +x /etc/init.d/mysqld</span><br><span class="line">shell&gt; chkconfig --add mysqld</span><br><span class="line">shell&gt; chkconfig mysqld on</span><br><span class="line">shell&gt; chkconfig --list</span><br></pre></td></tr></table></figure>

<p>9、设置用户</p>
<p>数据库启动成功成功后，进入数据库的初始密码会在  /data/mysql/error.log  下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /data/mysql/error.log | grep password</span><br></pre></td></tr></table></figure>

<p>使用初始密码进入数据库后，修改数据库的root密码，设置为永不过期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD = &apos;Haier@123&apos;;</span><br><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; Password EXPIRE NEVER;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>创建用户并授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建用户src</span><br><span class="line">mysql&gt; CREATE USER &apos;sre&apos;@&apos;%&apos; IDENTIFIED BY PASSWORD &apos;*66CC8D8F94978869E17ABDA6FD2E1A5D817E619E&apos;;</span><br><span class="line">mysql&gt; GRANT all privileges on *.* to &apos;sre&apos;@&apos;%&apos; WITH GRANT OPTION;</span><br><span class="line">#创建用户hdm</span><br><span class="line">mysql&gt; CREATE USER &apos;hdm&apos;@&apos;%&apos; IDENTIFIED BY PASSWORD &apos;*14533888C6CA3952B3957903FF7E69469C7E3A2B&apos;;</span><br><span class="line">mysql&gt; GRANT SELECT, SHOW DATABASES, PROCESS, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;hdm&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure>

<p>进行权限的刷新并查看用户情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; select user,host,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure>

<p>10、登录数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql -S /data/mysql/mysql.sock -pHaier@123   #通过socket登录到指定端口的数据库</span><br></pre></td></tr></table></figure>

<p><strong>注：有时由于重启数据库等原因会出现初始密码过期的情况</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cmp25 init.d]# mysql -u root -p&apos;U1t)ZVy(T*af&apos; -S/data/mysql3100/mysql.sock</span><br><span class="line">ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入bin目录下</span><br><span class="line">cd /usr/local/mysql3100/bin/</span><br><span class="line">#修改密码</span><br><span class="line">[root@cmp25 bin]#  ./mysqladmin -uroot -p password -S/data/mysql3100/mysql.sock</span><br><span class="line">Enter password:            #输入原始密码</span><br><span class="line">New password:              #输入新密码</span><br><span class="line">Confirm new password:      #重复新密码</span><br></pre></td></tr></table></figure>

<h2 id="MySQL彻底卸载"><a href="#MySQL彻底卸载" class="headerlink" title="MySQL彻底卸载"></a>MySQL彻底卸载</h2><p>1、关进程并删除mysqld</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看MySQL启动进程，</span><br><span class="line">ps -ef | grep mysqld     </span><br><span class="line">#若MySQL处于启动状态，停止MySQL服务</span><br><span class="line">cd /etc/init.d</span><br><span class="line">[root@cmp15 init.d]# ./mysqld stop</span><br><span class="line">#删除mysqld</span><br><span class="line">[root@cmp15 init.d]# rm -rf mysqld</span><br></pre></td></tr></table></figure>

<p>2、删除数据目录，这里数据文件存储在在  /data/mysql 目录中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /data/</span><br><span class="line">rm -rf mysql</span><br></pre></td></tr></table></figure>

<p>3、删除安装目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/                      </span><br><span class="line">[root@cmp15 local]# rm -rf mysql</span><br></pre></td></tr></table></figure>

<p>4、删除配置文件my.cnf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure>

<h2 id="MySQL的启动与关闭"><a href="#MySQL的启动与关闭" class="headerlink" title="MySQL的启动与关闭"></a>MySQL的启动与关闭</h2><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><ul>
<li>使用 <code>init.d</code>，<code>mysqld</code> 脚本来自于 <code>/usr/local/mysql/support-files/mysql.server</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/mysqld stop</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>mysqladmin</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysqladmin -u&apos;xx&apos; -p&apos;xx&apos; shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>service</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ systemctl stop mysqld</span><br><span class="line">$ service mysql stop</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li>使用 <code>init.d</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>mysqld_safe</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysqld_safe --defaults-file=/etc/my.cnf --user=mysql &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>service</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ systemctl start mysqld</span><br><span class="line">$ service mysql start</span><br></pre></td></tr></table></figure>

<h2 id="MySQL5-6安装"><a href="#MySQL5-6安装" class="headerlink" title="MySQL5.6安装"></a>MySQL5.6安装</h2><p>1、下载安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql -s /sbin/nologin</span><br><span class="line">wget https://mino-yn.oss-cn-qingdao.aliyuncs.com/mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz</span><br><span class="line">tar -zxvf mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz -C /usr/local/</span><br><span class="line">ln -s mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz mysql</span><br></pre></td></tr></table></figure>

<p>2、编辑配置文件my.cnf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port                      = 3306</span><br><span class="line">socket                    = /data/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port                      = 3306</span><br><span class="line">socket                    = /data/mysql/mysql.sock</span><br><span class="line">pid_file                  = /data/mysql/mysql.pid</span><br><span class="line">basedir                   = /usr/local/mysql</span><br><span class="line">datadir                   = /data/mysql</span><br><span class="line">character_set_server      = utf8</span><br><span class="line"></span><br><span class="line"># LOG</span><br><span class="line">slow_query_log            = 1</span><br><span class="line">long_query_time           = 5</span><br><span class="line">log_error                 = /data/mysql/error.log</span><br><span class="line">slow_query_log_file       = /data/mysql/slow.log</span><br><span class="line"></span><br><span class="line"># INNODB</span><br><span class="line">innodb_data_home_dir      = /data/mysql</span><br><span class="line">innodb_buffer_pool_size   = 10240M</span><br><span class="line">innodb_log_file_size      = 1G</span><br><span class="line">innodb_data_file_path     = ibdata1:1G:autoextend</span><br><span class="line"></span><br><span class="line"># OTHER</span><br><span class="line">max_connections           = 3000</span><br><span class="line">interactive_timeout       = 600</span><br><span class="line">wait_timeout              = 600</span><br><span class="line">lower_case_table_names    = 1</span><br><span class="line"></span><br><span class="line"># REPLICATION</span><br><span class="line">server-id                 = 3306100</span><br><span class="line">log-bin                   = /data/mysql/mysql-bin</span><br><span class="line">sync_binlog               = 0</span><br><span class="line">max_binlog_size           = 1024M</span><br><span class="line">binlog-format             = row</span><br><span class="line">expire_logs_days          = 15</span><br></pre></td></tr></table></figure>

<p>3、创建MySQL的数据目录，并给数据目录赋权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/mysql</span><br><span class="line">chown mysql:mysql -R /usr/local/mysql</span><br><span class="line">chown mysql:mysql -R /data/mysql</span><br></pre></td></tr></table></figure>

<p>4、初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/scripts/mysql_install_db  --basedir=/usr/local/mysql --defaults-file=/etc/my.cnf --user=mysql</span><br></pre></td></tr></table></figure>

<p>5、启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql 2&gt;&amp;1 &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure>

<p>6、开启防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>7、设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql/bin</span><br><span class="line">cp mysql mysqladmin mysqlbinlog mysqld mysqld_safe mysqldump /usr/bin/</span><br><span class="line"></span><br><span class="line">vi /usr/local/mysql/support-files/mysql.server</span><br><span class="line">`mysqld_pid_file_path`=/data/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MySQL的用户权限管理</title>
    <url>/blog/2019/08/09/user-management/</url>
    <content><![CDATA[<h2 id="MySQL的用户权限管理"><a href="#MySQL的用户权限管理" class="headerlink" title="MySQL的用户权限管理"></a>MySQL的用户权限管理</h2><p>MySQL数据库账号安全对DBA来说至关重要，工作中的数据库环境一般分为测试环境和生产环境，工作时常需要给开发人员或其他人员分配权限，权限的申请流程需要设置规范，使人们按照规则来办事。</p>
<h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p>1、可以限制用户访问那些数据库、数据表；</p>
<p>2、可以限制用户可以对那些表进行select、create、delete、alter、insert、update等操作；</p>
<p>3、限制用户登录的IP或域名；</p>
<p>4、可以限制用户自己的权限可以授权给其他用户</p>
<h3 id="用户分类"><a href="#用户分类" class="headerlink" title="用户分类"></a>用户分类</h3><p>MySQL数据库的用户一般分为两类：</p>
<p>1、超级管理员用户<strong>root</strong>。</p>
<p>2、由root用户创建的<strong>普通用户</strong>，普通用户的权限由root用户进行分配。</p>
<p>root用户避免作为Web连接用，超级管理员用户（root用户和all privileges权限用户）只能归DBA管理。</p>
<h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><p><strong>MySQL5.6</strong> 查看用户情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user,host,password from user</span><br></pre></td></tr></table></figure>

<p><strong>MySQL5.7</strong> 查看用户情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql</span><br><span class="line">select user,host,authentication_string from user;</span><br></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>创建用户时，最好专库专账号，避免一个账号管理多个库。</p>
<p><strong>创建用户语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user 用户名@主机ip identified by ‘密码’;</span><br></pre></td></tr></table></figure>

<p>给开发人员进行权限分配时，可以分配只读权限和读写权限用户。</p>
<p><strong>创建只读用户：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &apos;erp_read&apos;@&apos;192.168.56.%&apos; identified by &apos;erp123&apos;;       #为erp库创建只读用户</span><br><span class="line">grant select on erp.* to &apos;erp_read&apos;@&apos;192.168.56.%&apos; identified by &apos;erp123&apos;;</span><br><span class="line">flush privileges;       #刷新权限</span><br></pre></td></tr></table></figure>

<p><strong>创建读写用户：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &apos;erp_user&apos;@&apos;192.168.56.%&apos; identified by &apos;erp123&apos;;    为erp库创建读写用户</span><br><span class="line">grant select,insert,update,delete on erp.* to &apos;erp_user&apos;@&apos;192.168.56.%&apos; identified by &apos;erp123&apos;;</span><br><span class="line">flush privileges;      #刷新权限</span><br></pre></td></tr></table></figure>

<p><strong>修改用户密码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for 用户名@主机ip = password(&apos;新密码&apos;);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>查询系统中的pv/uv数据</title>
    <url>/blog/2019/08/09/search-pv-uv/</url>
    <content><![CDATA[<h2 id="连接至数据库"><a href="#连接至数据库" class="headerlink" title="连接至数据库"></a>连接至数据库</h2><p>打开数据库管理系统，新建MySQL连接，输入对应的ip地址、用户名、密码、连接至数据库</p>
<h2 id="查询pv-uv数据"><a href="#查询pv-uv数据" class="headerlink" title="查询pv/uv数据"></a>查询pv/uv数据</h2><p>进入matomo库中的matomo_site表查看需要查询数据的系统所对应的id号码（idsite）。</p>
<p>新建查询，将需要进行pv/uv数据查询的系统所对应的idsite填入，并修改日期范围。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  a.days,</span><br><span class="line">  a.count AS uv,</span><br><span class="line">  b.count AS pv </span><br><span class="line">FROM</span><br><span class="line">  (</span><br><span class="line">  SELECT</span><br><span class="line">    DATE_FORMAT(</span><br><span class="line">      date_add( uv.visit_last_action_time, INTERVAL 8 HOUR ),</span><br><span class="line">      &apos;%Y%m%d&apos; </span><br><span class="line">    ) days,</span><br><span class="line">    count( 1 ) count </span><br><span class="line">  FROM</span><br><span class="line">    matomo_log_visit uv </span><br><span class="line">  WHERE</span><br><span class="line">    uv.idsite =                                #填入系统对应的idsite</span><br><span class="line">    AND date_add( uv.visit_last_action_time, INTERVAL 8 HOUR ) BETWEEN &apos;2019-07-01 00:00:00&apos; </span><br><span class="line">    AND &apos;2019-07-30 23:59:59&apos;                 #修改所要导出数据的日期范围。</span><br><span class="line">  GROUP BY</span><br><span class="line">    days </span><br><span class="line">  ) a,</span><br><span class="line">  (</span><br><span class="line">  SELECT</span><br><span class="line">    DATE_FORMAT(</span><br><span class="line">      date_add( pv.server_time, INTERVAL 8 HOUR ),</span><br><span class="line">      &apos;%Y%m%d&apos; </span><br><span class="line">    ) days,</span><br><span class="line">    count( 1 ) count </span><br><span class="line">  FROM</span><br><span class="line">    matomo_log_link_visit_action pv </span><br><span class="line">  WHERE    </span><br><span class="line">    pv.idsite =                                #填入系统对应的idsite</span><br><span class="line">    AND date_add( pv.server_time, INTERVAL 8 HOUR ) BETWEEN &apos;2019-07-01 00:00:00&apos; </span><br><span class="line">    AND &apos;2019-07-30 23:59:59&apos; </span><br><span class="line">    AND pv.idaction_name IS NOT NULL </span><br><span class="line">  GROUP BY</span><br><span class="line">    days </span><br><span class="line">  ) b </span><br><span class="line">WHERE</span><br><span class="line">  a.days = b.days </span><br><span class="line">ORDER BY</span><br><span class="line">  a.days</span><br></pre></td></tr></table></figure>

<h2 id="导出查询结果"><a href="#导出查询结果" class="headerlink" title="导出查询结果"></a>导出查询结果</h2><p>点击导出结果，选择导出当前结果，选择导出格式为Excel数据表进行导出。即可得到包含有系统pv/uv数据的Excel表格。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux入门基础</title>
    <url>/blog/2019/08/09/introduction-to-Linux/</url>
    <content><![CDATA[<h2 id="Linux目录介绍"><a href="#Linux目录介绍" class="headerlink" title="Linux目录介绍"></a>Linux目录介绍</h2><p><strong>/etc：</strong>(etcetera) 系统配置文件存放的目录，不建议在此目录下存放可执行文件。</p>
<p><strong>/usr：</strong>(unix shared resources) 应用程序存放目录，</p>
<ul>
<li>/usr/bin ：存放应用程序，</li>
<li>/usr/share ：存放共享数据，</li>
<li>/usr/lib： 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。</li>
<li>/usr/local:存放软件升级包。</li>
</ul>
<p><strong>/root：</strong> 系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。</p>
<h2 id="Linux常用指令"><a href="#Linux常用指令" class="headerlink" title="Linux常用指令"></a>Linux常用指令</h2><p><strong>cd命令：</strong></p>
<p>用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。</p>
<ul>
<li><p>cd /root/Docements         # 切换到目录/root/Docements  </p>
</li>
<li><p>cd ./path                             # 切换到当前目录下的path目录中，“.”表示当前目录    </p>
</li>
<li><p>cd ../path                            # 切换到上层目录中的path目录中，“..”表示上一层目录</p>
</li>
</ul>
<p><strong>ls命令：</strong></p>
<p>ls命令是用来查看文件与目录的命令，list之意，它的参数非常多，下面就列出一些常用的参数 。</p>
<ul>
<li><p>-l ：一般直接使用ll，列出长数据串，包含文件的属性与权限数据等</p>
</li>
<li><p>-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）  </p>
</li>
<li><p>-d ：仅列出目录本身，而不是列出目录的文件数据  </p>
</li>
<li><p>-h ：将文件容量以较易读的方式（GB，kB等）列出来  </p>
</li>
<li><p>-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来  </p>
</li>
</ul>
<p><strong>pwd</strong>：查看用户当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df -h                #查看磁盘占用比例</span><br><span class="line">ls -lht              #查看目录下所有文件大小总量</span><br><span class="line">du -sh * |sort -nr   #将当前目录下的文件从大到小排序  -n：从小到大排序</span><br><span class="line">tail -f 文件名        #动态查看日志信息</span><br><span class="line">tail -n 20 文件名     #查看最后一部分日志</span><br><span class="line">rm -rf               #删除文件</span><br><span class="line">top                  #动态查看cpu状态</span><br><span class="line"></span><br><span class="line">#服务器创建新用户</span><br><span class="line">$sudo useradd -m -s /bin/bash userName    // 在/home目录下新建userName目录</span><br><span class="line">$sudo passwd userName                     //设置密码</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>数据库基础与MySQL简介</title>
    <url>/blog/2019/08/06/Database-Foundation/</url>
    <content><![CDATA[<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>​        <strong>数据库</strong>是一个以某种<strong>有组织的</strong>方式存储的<strong>数据集合，</strong>可以将数据库想象为一个存储电子文件的文件柜，该文件柜存储数据的物理位置，不管数据是什么以及是如何组织的。</p>
<p>简单来讲，<strong>数据库是保存有组织的数据的容器</strong>（通常是一个文件或一组文件）。</p>
<h2 id="数据库管理系统-DBMS"><a href="#数据库管理系统-DBMS" class="headerlink" title="数据库管理系统(DBMS)"></a>数据库管理系统(DBMS)</h2><p>​        数据的所有存储、检索、管理和处理实际上是由数据库软件——数据库管理系统（Database Management System，简称DBMS）完成的，MySQL就是一种DBMS。数据库与DBMS的关系可以简单理解成：<strong>数据库是通过DBMS创建和操纵的容器</strong></p>
<p><strong>DBMS可以分为两类：</strong></p>
<ul>
<li><p><strong>基于共享文件系统的DBMS</strong>，例如:Microsoft Access，FileMaker,一般只用于桌面用途，不用于高端或更关键的应用。</p>
</li>
<li><p><strong>客户机—服务器的DBMS</strong>，例如：<strong>MySQL、Oracle、Microsoft SQL Server</strong>等。</p>
<p>客户机—服务器应用分为两个不同的部分：</p>
<p><strong>客户机</strong>：与用户打交道，将用户请求通过网络发送给服务器处理。</p>
<p><strong>服务器</strong>：与数据文件打交道，负责处理数据以及访问数据。</p>
</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li><strong>表(table)：</strong> 某种特定类型的数据的结构化清单，是数据库的<strong>基本存储结构</strong>，数据库由表组成。</li>
</ul>
<p>​         同一数据库中表的<strong>表名</strong>是<strong>唯一</strong>的，即相同数据库中存在表名相同的表。</p>
<ul>
<li><p><strong>模式（schema）：</strong>关于数据库和表的布局及特性的信息。</p>
</li>
<li><p><strong>列（column）:</strong>   <strong>表中的一个字段</strong>。所有的表都是由一个或多个列组成。可以将数据库想象成一个网格，网格中每一例存储着    一条特定的信息。如在顾客表中，一列存储顾客编号，另一列存储顾客姓名，地址、城市等其他信息都存储在其各自的列中。</p>
</li>
<li><p><strong>数据类型（datatype）：**</strong>所容许的数据的类型。**每个表列都有相应的数据类型，其限制（或容许）该列中存储的数据。</p>
</li>
<li><p><strong>行（row)：</strong>表中的一个<strong>记录</strong>。</p>
</li>
<li><p><strong>主键（primary key）：唯一</strong>标识表中每行的这个列（或这组列），创建的每个表都应具有一个主键。</p>
</li>
<li><p><strong>SQL：</strong>  <strong>结构化查询语言</strong>（Structured Query Language）的缩写，一种专门用来与数据库通信的语言。</p>
</li>
</ul>
<h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><strong>MySQL是一种基于客户机—服务器的DBMS，</strong>MySQL由于性能高、成本低、可靠性好，是最流行的开源数据库之一。</p>
<p><strong>主要优势：</strong></p>
<p>1、免费：MySQL是一款免费软件，任何人都可以从MySQL的官方网站下载该软件</p>
<p>2、开源：开放源代码且无版权制约、可以对源代码进行修改、自主性强、使用成本低。</p>
<p>3、门槛低：MySQL软件体积小，安装使用简单，使开发者能够快速上手。</p>
<p>4、支持多种操作系统，提供多种api接口，支持多种开发语言。</p>
<p>版本更新历程</p>
<p><strong>MySQL属于关系型数据库</strong>。</p>
<p>关系型数据库管理系统：采用<strong>二维表格</strong>模型来组织管理的数据库系统，即把数据保存在不同的表中，而不是将数据放在一个大仓库中。</p>
<h2 id="MySQL版本详解"><a href="#MySQL版本详解" class="headerlink" title="MySQL版本详解"></a><a href="https://www.cnblogs.com/mehome/p/9428175.html" target="_blank" rel="noopener">MySQL版本详解</a></h2>]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>入职指南</title>
    <url>/blog/2019/08/05/guide/</url>
    <content><![CDATA[<h2 id="主要安排"><a href="#主要安排" class="headerlink" title="主要安排"></a>主要安排</h2><ul>
<li>安装相关软件：<a href="http://vpn.haier.net/" target="_blank" rel="noopener">vpn</a> / <a href="https://app.haier.net/?ihaier&201908051821" target="_blank" rel="noopener">iHaier</a> / 钉钉 / Xmind / HeidiSQL / Xshell / OneNote / Sublime Text3 / Typora</li>
<li><a href="https://huiraoo.github.io/blog" target="_blank" rel="noopener">Github Page +Hexo + Next搭建个人博客</a></li>
</ul>
<h3 id="部分软件功能"><a href="#部分软件功能" class="headerlink" title="部分软件功能"></a>部分软件功能</h3><ul>
<li><p><strong>HeidiSQL</strong>：用于简单化MySQL服务器和数据库管理的图形化界面。</p>
</li>
<li><p><strong>Xshell</strong>：在Windows界面下访问远端不同系统下的服务器。</p>
</li>
<li><p><strong>OneNote</strong>：电子笔记本。特点：免费、编辑功能强大、层级分明、布局自由适合资料的二次整理与创作。</p>
</li>
<li><p><strong>Sublime Text3</strong>：跨平台的代码编辑器，同时支持Windows、Linux等操作系统。主要功能：拼写检查、书签、完整的Python API，Goto功能，即时项目切换，多选择，多窗口等等。</p>
</li>
<li><p><strong>Typora</strong>：轻便简洁的Markdown编辑器，支持即时渲染技术，写个人博客时要用。</p>
<p> <strong>Typora常用快捷键：</strong><u>下划线</u>  ：Ctrl+U </p>
<p>​                                   <strong>字体加粗</strong>：Ctrl +B</p>
<p>​                                    <em>斜体</em>  ：Ctrl+I</p>
<p>​                                  <del>删除线</del>    ：Alt+Shift+5</p>
<pre><code>n级标题  ：Ctrl+n</code></pre></li>
</ul>
<h3 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;       #新建文章</span><br><span class="line">$ hexo new page &quot;My New Page&quot;  #新建页面</span><br><span class="line">$ hexo server                  #启动服务</span><br><span class="line">$ hexo generate                #生成静态文件</span><br><span class="line">$ hexo g -d                    #生成+部署</span><br><span class="line">$ hexo g -s                    #生成+预览</span><br></pre></td></tr></table></figure>

<p>​            </p>
<p>​          </p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2019/08/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
